rascsi131_pc98_mo_hdi_20171130.diff

description (in Japanese):
RaSCSI の PC-98 方面サポート強化的な何か.

* MS-DOS (5.0～6.2) 標準の FORMAT コマンドによる光磁気(MO)ディスクの初期化対応
* HDI(Anex86), HDM(T98Next) 形式のディスクイメージ対応

運用上の注意点:
* DOS の FORMAT コマンドは MO を常に 128M とみなすらしい. 230M 以上のメディアを初期化しても128Mしか使えないので別のフォーマッタを使うほうがいい. 
* 初期の SCSI ボード（PC-9801-55および互換品）はシリンダ数4096以上のディスクを正しく扱えないので、使用するHDイメージのサイズには注意が必要（HDNの場合399M、HDI/HDMは271Mが上限）


diff -urp src.org/raspberrypi/disk.cpp src/raspberrypi/disk.cpp
--- src.org/raspberrypi/disk.cpp	2017-09-03 16:15:44.000000000 +0900
+++ src/raspberrypi/disk.cpp	2017-11-30 20:25:57.757298664 +0900
@@ -67,6 +67,7 @@ DiskTrack::DiskTrack()
 	dt.buffer = NULL;
 	dt.maplen = 0;
 	dt.changemap = NULL;
+	dt.imgoffset = 0;
 }
 
 //---------------------------------------------------------------------------
@@ -96,13 +97,15 @@ DiskTrack::~DiskTrack()
 //	初期化
 //
 //---------------------------------------------------------------------------
-void FASTCALL DiskTrack::Init(int track, int size, int sectors, BOOL raw)
+void FASTCALL DiskTrack::Init(int track, int size, int sectors, BOOL raw, off64_t imgoff)
 {
 	ASSERT(track >= 0);
 	ASSERT((size == 8) || (size == 9) || (size == 11));
 	ASSERT((sectors > 0) && (sectors <= 0x100));
+	// ASSERT(imgoff >= 0);
 
 	// パラメータを設定
+	dt.imgoffset = imgoff;
 	dt.track = track;
 	dt.size = size;
 	dt.sectors = sectors;
@@ -145,6 +148,7 @@ BOOL FASTCALL DiskTrack::Load(const File
 	} else {
 		offset <<= dt.size;
 	}
+	offset += dt.imgoffset;
 
 	// レングスを計算(このトラックのデータサイズ)
 	length = dt.sectors << dt.size;
@@ -293,6 +297,7 @@ BOOL FASTCALL DiskTrack::Save(const File
 	// オフセットを計算(これ以前のトラックは256セクタ保持とみなす)
 	offset = ((off64_t)dt.track << 8);
 	offset <<= dt.size;
+	offset += dt.imgoffset;
 
 	// セクタあたりのレングスを計算
 	length = 1 << dt.size;
@@ -418,12 +423,13 @@ BOOL FASTCALL DiskTrack::Write(const BYT
 //	コンストラクタ
 //
 //---------------------------------------------------------------------------
-DiskCache::DiskCache(const Filepath& path, int size, int blocks)
+DiskCache::DiskCache(const Filepath& path, int size, int blocks, off64_t imgoff)
 {
 	int i;
 
 	ASSERT((size == 8) || (size == 9) || (size == 11));
 	ASSERT(blocks > 0);
+	// ASSERT(imgoff >= 0);
 
 	// キャッシュワーク
 	for (i = 0; i < CacheMax; i++) {
@@ -437,6 +443,7 @@ DiskCache::DiskCache(const Filepath& pat
 	sec_size = size;
 	sec_blocks = blocks;
 	cd_raw = FALSE;
+	imgoffset = imgoff;
 }
 
 //---------------------------------------------------------------------------
@@ -695,7 +702,7 @@ BOOL FASTCALL DiskCache::Load(int index,
 	}
 
 	// ディスクトラックを初期化
-	disktrk->Init(track, sec_size, sectors, cd_raw);
+	disktrk->Init(track, sec_size, sectors, cd_raw, imgoffset);
 
 	// ロードを試みる
 	if (!disktrk->Load(sec_path)) {
@@ -761,6 +768,7 @@ Disk::Disk()
 	disk.lun = 0;
 	disk.code = 0;
 	disk.dcache = NULL;
+	disk.imgoffset = 0;
 
 	// その他
 	cache_wb = TRUE;
@@ -987,7 +995,7 @@ BOOL FASTCALL Disk::Open(const Filepath&
 
 	// キャッシュ初期化
 	ASSERT(!disk.dcache);
-	disk.dcache = new DiskCache(path, disk.size, disk.blocks);
+	disk.dcache = new DiskCache(path, disk.size, disk.blocks, disk.imgoffset);
 
 	// 読み書きオープン可能か
 	if (fio.Open(path, Fileio::ReadWrite)) {
@@ -1334,6 +1342,10 @@ int FASTCALL Disk::ModeSense(const DWORD
 	if (disk.writep) {
 		buf[2] = 0x80;
 	}
+	// set medium-type for MO
+	if (disk.id == MAKEID('S', 'C', 'M', 'O')) {
+		buf[1] = 0x03; // optical reversible or erasable
+	}
 
 	// DBDが0なら、ブロックディスクリプタを追加
 	if ((cdb[1] & 0x08) == 0) {
@@ -2829,6 +2841,183 @@ int FASTCALL SCSIHD_APPLE::AddVendor(int
 
 //===========================================================================
 //
+//	SCSI ハードディスク (Anex86/T98Next)
+//
+//===========================================================================
+
+//---------------------------------------------------------------------------
+//
+//	コンストラクタ
+//
+//---------------------------------------------------------------------------
+SCSIHD_NECwithHDR::SCSIHD_NECwithHDR() : SCSIHD_NEC()
+{
+	cylinders = 0;
+	heads = 0;
+	sectors = 0;
+	sectorsize = 0;
+	imgoffset = 0;
+	imgsize = 0;
+}
+
+//---------------------------------------------------------------------------
+//
+//	オープン
+//
+//---------------------------------------------------------------------------
+static inline WORD getWordLE(const BYTE *b)
+{
+	return ((WORD)(b[1]) << 8) | b[0];
+}
+static inline DWORD getDwordLE(const BYTE *b)
+{
+	return ((DWORD)(b[3]) << 24) | ((DWORD)(b[2]) << 16) | ((DWORD)(b[1]) << 8) | b[0];
+}
+
+
+BOOL FASTCALL SCSIHD_NECwithHDR::Open(const Filepath& path, BOOL attn)
+{
+	Fileio fio;
+	off64_t size;
+	BYTE hdr[512];
+	BOOL b = FALSE;
+	LPCSTR ext;
+
+	ASSERT(this);
+	ASSERT(!disk.ready);
+
+	// 読み込みオープンが必要
+	if (!fio.Open(path, Fileio::ReadOnly)) {
+		return FALSE;
+	}
+
+	// ファイルサイズの取得
+	size = fio.GetFileSize();
+	if (size >= sizeof(hdr)) {
+		b = fio.Read(hdr, sizeof(hdr));
+	}
+	fio.Close();
+
+	if (!b) {
+		return FALSE;
+	}
+
+	// todo: fix Filepath::GetExt() 
+	ext = strrchr(path.GetPath(), '.');
+	if (ext) ext++;
+	else ext = path.GetPath() + strlen(path.GetPath());
+
+	// 512バイト単位であること
+	if (size & 0x1ff) {
+		return FALSE;
+	}
+
+	// 10MB以上
+	if (size < 0x9f5400) {
+		return FALSE;
+	}
+	// xm6iに準じて2TB
+	// よく似たものが wxw/wxw_cfg.cpp にもある
+	if (size > 2LL * 1024 * 1024 * 1024 * 1024) {
+		return FALSE;
+	}
+
+	if (xstrcasecmp(ext, "hdi") == 0) { // Anex86 HD image? 
+		imgoffset = getDwordLE(&hdr[4 + 4]);
+		imgsize =   getDwordLE(&hdr[4 + 4 + 4]);
+		sectorsize =getDwordLE(&hdr[4 + 4 + 4 + 4]);
+		sectors =   getDwordLE(&hdr[4 + 4 + 4 + 4 + 4]);
+		heads =     getDwordLE(&hdr[4 + 4 + 4 + 4 + 4 + 4]);
+		cylinders = getDwordLE(&hdr[4 + 4 + 4 + 4 + 4 + 4 + 4]);
+	}
+	else if (xstrcasecmp(ext, "nhd") == 0 && memcmp(hdr, "T98HDDIMAGE.R0\0", 15) == 0) { // T98Next HD image?
+		imgoffset = getDwordLE(&hdr[0x10 + 0x100]);
+		cylinders = getDwordLE(&hdr[0x10 + 0x100 + 4]);
+		heads =     getWordLE( &hdr[0x10 + 0x100 + 4 + 4]);
+		sectors =   getWordLE( &hdr[0x10 + 0x100 + 4 + 4 + 2]);
+		sectorsize =getWordLE( &hdr[0x10 + 0x100 + 4 + 4 + 2 + 2]);
+		imgsize = (off64_t)cylinders * heads * sectors * sectorsize;
+	}
+
+	if (sectorsize != 512) {
+		return FALSE;
+	}
+
+	if (imgoffset + imgsize > size || (imgsize % sectorsize != 0)) {
+		return FALSE;
+	}
+
+	// セクタサイズとブロック数
+	for(disk.size = 16; disk.size > 0; --(disk.size)) {
+		if ((1 << disk.size) == sectorsize)
+			break;
+	}
+	if (disk.size <= 0 || disk.size > 16)
+		return FALSE;
+
+	disk.blocks = (DWORD)(imgsize >> disk.size);
+	disk.imgoffset = imgoffset;
+
+	// 基本クラス
+	return Disk::Open(path);
+}
+
+//---------------------------------------------------------------------------
+//
+//	フォーマットページ追加
+//
+//---------------------------------------------------------------------------
+int FASTCALL SCSIHD_NECwithHDR::AddFormat(BOOL change, BYTE *buf)
+{
+	int bufcnt;
+	int size;
+
+	ASSERT(this);
+	ASSERT(buf);
+
+	bufcnt = SCSIHD_NEC::AddFormat(change, buf);
+
+	if (!change && disk.ready) {
+		// tracks per zone
+		buf[0x2] = (BYTE)(heads >> 8);
+		buf[0x3] = (BYTE)heads;
+		
+		// sectors per track
+		buf[0xa] = (BYTE)(sectors >> 8);
+		buf[0xb] = (BYTE)sectors;
+	}
+
+	return bufcnt;
+}
+
+//---------------------------------------------------------------------------
+//
+//	ドライブページ追加
+//
+//---------------------------------------------------------------------------
+int FASTCALL SCSIHD_NECwithHDR::AddDrive(BOOL change, BYTE *buf)
+{
+	int bufcnt;
+
+	ASSERT(this);
+	ASSERT(buf);
+
+	bufcnt = SCSIHD_NEC::AddDrive(change, buf);
+
+	if (!change && disk.ready) {
+		buf[0x2] = (BYTE)(cylinders >> 16);
+		buf[0x3] = (BYTE)(cylinders >> 8);
+		buf[0x4] = (BYTE)cylinders;
+		
+		buf[0x5] = (BYTE)heads;
+	}
+
+	return bufcnt;
+}
+
+
+//===========================================================================
+//
 //	SCSI 光磁気ディスク
 //
 //===========================================================================
@@ -3058,6 +3247,176 @@ int FASTCALL SCSIMO::Inquiry(
 	return size;
 }
 
+//---------------------------------------------------------------------------
+//
+//	MODE SELECT
+//	※disk.codeの影響を受けない
+//
+//---------------------------------------------------------------------------
+BOOL FASTCALL SCSIMO::ModeSelect(const DWORD *cdb, const BYTE *buf, int length)
+{
+	int page;
+	int size;
+
+	ASSERT(this);
+	ASSERT(buf);
+	ASSERT(length >= 0);
+
+	// PF
+	if (cdb[1] & 0x10) {
+		// Mode Parameter header
+		if (length >= 12) {
+			// ブロックレングスのバイト数をチェック
+			size = 1 << disk.size;
+			if (buf[9] != (BYTE)(size >> 16) ||
+				buf[10] != (BYTE)(size >> 8) || buf[11] != (BYTE)size) {
+				// 今のところセクタ長の変更は許さない
+				disk.code = DISK_INVALIDPRM;
+				return FALSE;
+			}
+			buf += 12;
+			length -= 12;
+		}
+
+		// ページの解析
+		while (length > 0) {
+			// ページの取得
+			page = buf[0];
+
+			switch (page) {
+				// format device
+				case 0x03:
+					// 物理セクタのバイト数をチェック
+					size = 1 << disk.size;
+					if (buf[0xc] != (BYTE)(size >> 8) || buf[0xd] != (BYTE)size) {
+						// 今のところセクタ長の変更は許さない
+						disk.code = DISK_INVALIDPRM;
+						return FALSE;
+					}
+					break;
+				// vendor unique format
+				case 0x20:
+					// just ignore, for now
+					break;
+
+				// その他ページ
+				default:
+					break;
+			}
+
+			// 次のページへ
+			size = buf[1] + 2;
+			length -= size;
+			buf += size;
+		}
+	}
+
+	// とりあえずエラーは発生させない(MINIX)
+	disk.code = DISK_NOERROR;
+
+	return TRUE;
+}
+
+//---------------------------------------------------------------------------
+//
+//	Vendor Unique Format Page 20h (MO)
+//
+//---------------------------------------------------------------------------
+int FASTCALL SCSIMO::AddVendor(int page, BOOL change, BYTE *buf)
+{
+	ASSERT(this);
+	ASSERT(buf);
+
+	// ページコード20h
+	if ((page != 0x20) && (page != 0x3f)) {
+		return 0;
+	}
+
+	// コード・レングスを設定
+	buf[0] = 0x20;
+	buf[1] = 0x0a;
+
+	// 変更可能領域はない
+	if (change) {
+		return 12;
+	}
+
+	/*
+		mode page code 20h - Vendor Unique Format Page
+		format mode XXh type 0
+		information: http://h20628.www2.hp.com/km-ext/kmcsdirect/emr_na-lpg28560-1.pdf
+		
+		offset  description
+		  02h   format mode
+		  03h   type of format (0)
+		04~07h  size of user band (total sectors?)
+		08~09h  size of spare band (spare sectors?)
+		0A~0Bh  number of bands
+		
+		actual value of each 3.5inches optical medium (grabbed by Fujitsu M2513EL)
+		
+		                     128M     230M    540M    640M
+		---------------------------------------------------
+		size of user band   3CBFAh   6CF75h  FE45Ch  4BC50h
+		size of spare band   0400h    0401h   08CAh   08C4h
+		number of bands      0001h    000Ah   0012h   000Bh
+		
+		further information: http://r2089.blog36.fc2.com/blog-entry-177.html
+	*/
+
+	if (disk.ready) {
+		unsigned spare = 0;
+		unsigned bands = 0;
+		
+		if (disk.size == 9) switch (disk.blocks) {
+			// 128MB
+			case 248826:
+				spare = 1024;
+				bands = 1;
+				break;
+
+			// 230MB
+			case 446325:
+				spare = 1025;
+				bands = 10;
+				break;
+
+			// 540MB
+			case 1041500:
+				spare = 2250;
+				bands = 18;
+				break;
+		}
+
+		if (disk.size == 11) switch (disk.blocks) {
+			// 640MB
+			case 310352:
+				spare = 2244;
+				bands = 11;
+				break;
+
+			// 1.3GB (lpproj: not tested with real device)
+			case 605846:
+				spare = 4437;
+				bands = 18;
+				break;
+		}
+
+		buf[2] = 0; // format mode
+		buf[3] = 0; // type of format
+		buf[4] = (BYTE)(disk.blocks >> 24);
+		buf[5] = (BYTE)(disk.blocks >> 16);
+		buf[6] = (BYTE)(disk.blocks >> 8);
+		buf[7] = (BYTE)disk.blocks;
+		buf[8] = (BYTE)(spare >> 8);
+		buf[9] = (BYTE)spare;
+		buf[10] = (BYTE)(bands >> 8);
+		buf[11] = (BYTE)bands;
+	}
+
+	return 12;
+}
+
 //===========================================================================
 //
 //	CDトラック
diff -urp src.org/raspberrypi/disk.h src/raspberrypi/disk.h
--- src.org/raspberrypi/disk.h	2017-09-03 16:17:08.000000000 +0900
+++ src/raspberrypi/disk.h	2017-11-29 22:32:27.956380176 +0900
@@ -66,6 +66,7 @@ class DiskTrack
 public:
 	// 内部データ定義
 	typedef struct {
+		off64_t imgoffset;				// actual disk image offset
 		int track;						// トラックナンバー
 		int size;						// セクタサイズ(8 or 9)
 		int sectors;					// セクタ数(<=0x100)
@@ -84,7 +85,7 @@ public:
 										// コンストラクタ
 	virtual ~DiskTrack();
 										// デストラクタ
-	void FASTCALL Init(int track, int size, int sectors, BOOL raw = FALSE);
+	void FASTCALL Init(int track, int size, int sectors, BOOL raw = FALSE, off64_t imgoff = 0);
 										// 初期化
 	BOOL FASTCALL Load(const Filepath& path);
 										// ロード
@@ -130,7 +131,7 @@ public:
 
 public:
 	// 基本ファンクション
-	DiskCache(const Filepath& path, int size, int blocks);
+	DiskCache(const Filepath& path, int size, int blocks, off64_t imgoff = 0);
 										// コンストラクタ
 	virtual ~DiskCache();
 										// デストラクタ
@@ -171,6 +172,8 @@ private:
 										// セクタブロック数
 	BOOL cd_raw;
 										// CD-ROM RAWモード
+	off64_t imgoffset;
+										// offset of the beginning of actual image
 };
 
 //===========================================================================
@@ -196,6 +199,7 @@ public:
 		DWORD lun;						// LUN
 		DWORD code;						// ステータスコード
 		DiskCache *dcache;				// ディスクキャッシュ
+		off64_t imgoffset;				// offset of actual image
 	} disk_t;
 
 public:
@@ -318,7 +322,7 @@ protected:
 	// サブ処理
 	virtual int FASTCALL AddError(BOOL change, BYTE *buf);
 										// エラーページ追加
-	int FASTCALL AddFormat(BOOL change, BYTE *buf);
+	virtual int FASTCALL AddFormat(BOOL change, BYTE *buf);
 										// フォーマットページ追加
 	virtual int FASTCALL AddDrive(BOOL change, BYTE *buf);
 										// ドライブページ追加
@@ -453,6 +457,40 @@ public:
 	// コマンド
 	int FASTCALL Inquiry(const DWORD *cdb, BYTE *buf, DWORD major, DWORD minor);
 										// INQUIRYコマンド
+	BOOL FASTCALL ModeSelect(const DWORD *cdb, const BYTE *buf, int length);
+										// MODE SELECT(6)コマンド
+
+	// サブ処理
+	int FASTCALL AddVendor(int page, BOOL change, BYTE *buf);
+										// ベンダ特殊ページ追加
+};
+
+//===========================================================================
+//
+//	SCSI ハードディスク (Anex86/T98Next)
+//
+//===========================================================================
+class SCSIHD_NECwithHDR : public SCSIHD_NEC
+{
+public:
+	// 基本ファンクション
+	SCSIHD_NECwithHDR();
+										// コンストラクタ
+	BOOL FASTCALL Open(const Filepath& path, BOOL attn = TRUE);
+										// オープン
+
+	int FASTCALL AddFormat(BOOL change, BYTE *buf);
+										// フォーマットページ追加
+	int FASTCALL AddDrive(BOOL change, BYTE *buf);
+										// ドライブページ追加
+
+private:
+	int cylinders;
+	int heads;
+	int sectors;
+	int sectorsize;
+	off64_t imgoffset;
+	off64_t imgsize;
 };
 
 //---------------------------------------------------------------------------
diff -urp src.org/raspberrypi/rascsi.cpp src/raspberrypi/rascsi.cpp
--- src.org/raspberrypi/rascsi.cpp	2017-09-05 21:37:26.000000000 +0900
+++ src/raspberrypi/rascsi.cpp	2017-09-24 20:55:27.305653430 +0900
@@ -332,6 +332,8 @@ BOOL ProcessCmd(FILE *fp, int id, int cm
 			case 1:		// HDS/HDN/HDA
 				if (xstrcasecmp(ext, "hdn") == 0) {
 					disk[id] = new SCSIHD_NEC();
+				} else if (xstrcasecmp(ext, "hdi") == 0 || xstrcasecmp(ext, "nhd") == 0) {
+					disk[id] = new SCSIHD_NECwithHDR();
 				} else if (xstrcasecmp(ext, "hda") == 0) {
 					disk[id] = new SCSIHD_APPLE();
 				} else {
@@ -530,6 +532,7 @@ BOOL ParseArgument(int argc, char* argv[
 			if (xstrcasecmp(ext, "hdf") == 0 ||
 				xstrcasecmp(ext, "hds") == 0 ||
 				xstrcasecmp(ext, "hdn") == 0 ||
+				xstrcasecmp(ext, "hdi") == 0 || xstrcasecmp(ext, "nhd") == 0 ||
 				xstrcasecmp(ext, "hda") == 0) {
 				// HD(SASI/SCSI)
 				type = 0;