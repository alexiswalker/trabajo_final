Index: src/main/java/sample/model/ArchonBoard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/sample/model/ArchonBoard.java	(revision 95e74850984143f518a311bbfb9e1b15776ee7b7)
+++ src/main/java/sample/model/ArchonBoard.java	(revision 299cf19a0de97570d919342475890434f6969cb3)
@@ -1,5 +1,8 @@
 package main.java.sample.model;
 
+import com.opencsv.CSVReader;
+import com.opencsv.CSVWriter;
+import javafx.geometry.Pos;
 import main.java.sample.exceptions.SideHasNoMovesException;
 import main.java.sample.model.pieces.Archer;
 import main.java.sample.model.pieces.ArchonPiece;
@@ -19,6 +22,10 @@
 import main.java.sample.model.pieces.Valkyrie;
 import main.java.sample.model.pieces.Wizard;
 
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
@@ -29,9 +36,6 @@
     private Map<Piece, Position> blackPositions = new HashMap<>();
     private Piece[][] board = new ArchonPiece[9][9];
 
-    private Move lastMove;
-    private Piece lastMovedPiece;
-
     public ArchonBoard() {
         int frontRow = 1;
         int backRow = 0;
@@ -83,6 +87,7 @@
         placePiece(new Sorceress(), new Position(4, backRow));
     }
 
+    // Vytváří kopii šachovnice, kopíruje proměnné, aby se mohli nezávisle měnit
     private ArchonBoard(ArchonBoard b) {
         board = new ArchonPiece[9][9];
 
@@ -94,6 +99,7 @@
         blackPositions = new HashMap<>(b.blackPositions);
     }
 
+    // postaví postavičku na pozici
     private void placePiece(Piece p, Position pos) {
         if (p.getSide().equals(Side.BLACK)) {
             blackPositions.put(p, pos);
@@ -103,7 +109,7 @@
         board[pos.getRow()][pos.getCol()] = p;
     }
 
-    private void removePiece(Piece p) {
+    public void removePiece(Piece p) {
         Position pos;
         if (p.getSide().equals(Side.BLACK)) {
             pos = blackPositions.get(p);
@@ -125,11 +131,10 @@
             removePiece(destPiece);
         }
 
+        // odstráníš ze starého místra na šachovnici
         removePiece(p);
+        // vlozeni stejne postavicky na cilovou pozici
         placePiece(p, destPos);
-
-        lastMove = m;
-        lastMovedPiece = p;
     }
 
     @Override
@@ -147,26 +152,11 @@
             return false;
         }
 
-        //TODO implement blocking by other figures
-
-        ArchonBoard preview = new ArchonBoard(this);
-        Position destPos = m.getDestination();
-
-        Piece destPiece = getPieceAt(destPos);
-
-        //kill a piece
-        if (destPiece != null) {
-            preview.removePiece(destPiece);
-        }
-        //move p
-        preview.removePiece(mover);
-        preview.placePiece(mover, destPos);
-
         return true;
     }
 
     @Override
-    public Map<Piece, Set<Move>> generateAllMovesForSide(Side s) throws SideHasNoMovesException {
+    public Map<Piece, Set<Move>> generateAllMovesForSide(Side s) {
         Map<Piece, Set<Move>> allMoves = new HashMap<>();
         Map<Piece, Position> piecePositions;
         if (s.equals(Side.WHITE)) {
@@ -174,30 +164,25 @@
         } else {
             piecePositions = blackPositions;
         }
-        boolean sideHasMoves = false;
 
+        // for pres vsechny postavicky, pro ktere se generuji kroky, kontroluje pro danou postavicku všechny možné kroky,
+        // jestli jsou opravdu proveditelné
         for (Piece p: piecePositions.keySet()) {
             Set<Move> moves = p.generateMoves(piecePositions.get(p));
 
+            // ze Stack Overflow - filtruje postavicky ktere se nemohou pohnout. Vytvori novy Set s tahy, ktere se daji opravdu provezt
             Set<Move> filtered = moves.stream()
                     .filter(m -> pieceCanMove(m, s))
                     .collect(Collectors.toSet());
 
-            if (!filtered.isEmpty()) {
-                sideHasMoves = true;
-            }
-
             allMoves.put(p, filtered);
         }
 
-        if (!sideHasMoves) {
-            throw new SideHasNoMovesException(s.toString() + " has no moves.");
-        }
-
         return allMoves;
     }
 
     @Override
+    // vraci mapu vsech figurek a jejich pozic
     public Map<Piece, Position> getAllActivePiecesPositions() {
         Map<Piece, Position> all = new HashMap<>();
         all.putAll(whitePositions);
@@ -207,16 +192,68 @@
 
     @Override
     public Piece getPieceAt(Position p) {
-        return board[p.getRow()][p.getCol()];
+        return getPieceAt(p.getRow(), p.getCol());
     }
 
     @Override
+    // nahradi figurku na dane pozici figurkou v argumentu
     public void replacePieceAt(Position pos, Piece newPiece) {
         Piece old = getPieceAt(pos);
         removePiece(old);
         placePiece(newPiece, pos);
     }
 
+    @Override
+    public String save() {
+        try (CSVWriter writer = new CSVWriter(new FileWriter("archon-save-file.csv"));){
+            // for přes všechny dvojice figurka a její pozice
+            for (Map.Entry<Piece, Position> entry : getAllActivePiecesPositions().entrySet()) {
+                Piece piece = entry.getKey();
+                Position position = entry.getValue();
+                writer.writeNext(getCsvDataForPieceAndPosition(piece, position));
+            }
+            return "The game was saved.";
+        } catch (IOException e) {
+            return "The game could not be saved due to error: " + e;
+        }
+    }
+
+    // Vytvoří pole stringu, které představuje data v jednom řádku csv souboru
+    // formát je x-souřadnice, y-souřadnice, jméno postavičky, HP postavičky
+    private String[] getCsvDataForPieceAndPosition(Piece piece, Position position) {
+        String[] result = new String[4];
+        result[0] = String.valueOf(position.getRow());
+        result[1] = String.valueOf(position.getCol());
+        result[2] = piece.getType().getName();
+        result[3] = String.valueOf(piece.getHp());
+        return result;
+    }
+
+    @Override
+    public String load() {
+        board = new ArchonPiece[9][9];
+        whitePositions = new HashMap<>();
+        blackPositions = new HashMap<>();
+
+        try (CSVReader reader = new CSVReader(new FileReader("archon-save-file.csv"))) {
+            String[] nextLine;
+            // přiřadí do nextLine hodnotu dalšího řádku a zárověň zkontroluje, jestli není null
+            while ((nextLine = reader.readNext()) != null) {
+                int row = Integer.parseInt(nextLine[0]);
+                int col = Integer.parseInt(nextLine[1]);
+                Position position = new Position(row, col);
+
+                Piece piece = ArchonPiece.loadPieceWithName(nextLine[2], Double.parseDouble(nextLine[3]));
+                placePiece(piece, position);
+            }
+            return "Game was loaded";
+        } catch (FileNotFoundException e) {
+            return "No save file is present.";
+        } catch (IOException e) {
+            return "The game could not be loaded due to error: " + e;
+        }
+    }
+
     private Piece getPieceAt(int row, int col) {
         return board[row][col];
     }
Index: src/main/java/sample/view/BoardView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/sample/view/BoardView.java	(revision 95e74850984143f518a311bbfb9e1b15776ee7b7)
+++ src/main/java/sample/view/BoardView.java	(revision 299cf19a0de97570d919342475890434f6969cb3)
@@ -1,11 +1,15 @@
 package main.java.sample.view;
 
 import javafx.event.EventHandler;
+import javafx.scene.control.ScrollPane;
 import javafx.scene.input.MouseEvent;
 import javafx.scene.layout.GridPane;
 import javafx.scene.layout.Pane;
 import javafx.scene.layout.Priority;
+import javafx.scene.layout.VBox;
 import javafx.scene.paint.Color;
+import javafx.scene.text.Text;
+import main.java.sample.controller.ArchonState;
 import main.java.sample.controller.GameController;
 import main.java.sample.controller.GameState;
 import main.java.sample.exceptions.IllegalMoveException;
@@ -14,22 +18,32 @@
 import main.java.sample.model.Position;
 import main.java.sample.model.Side;
 
-import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+// Zobrazuje stav hry
 public class BoardView {
     private GameController controller;
+    private VBox root;
     private GridPane gridPane;
+    private ScrollPane infoPane;
+    private Text infoText;
     private Tile[][] tiles;
+    // true pokud je postavička označená kliknutím
     private boolean click = false;
+    // Políčko, na které se kliklo
     private Tile origin;
 
     public BoardView(GameController controller) {
         this.controller = controller;
         tiles = new Tile[9][9];
         gridPane = new GridPane();
-        gridPane.setStyle("-fx-background-color: goldenrod");
+        infoPane = new ScrollPane();
+        infoPane.setVvalue(1.0);
+        root = new VBox();
+        root.getChildren().add(gridPane);
+        root.getChildren().add(infoPane);
+        // vyčístí stav, vytvoří nový controller, atd.
         reset(controller);
     }
 
@@ -50,13 +64,16 @@
         };
     }
 
+    // zapíše která postavička je označená a zvýrazní její možné kroky
     private void firstClick(Tile tile) {
         origin = tile;
-        Color color = Color.LIGHTGREEN;
+        Color color = Color.ORANGE;
         Color capture = Color.DARKSALMON;
         Set<Move> moves = controller.getMovesForPiecesAt(tile.getPosition());
 
-        if (moves.size() > 0) {
+        // pokud má postavička nějaké tahy
+        if (moves != null && moves.size() > 0) {
+            // pro všechny tahy
             for (Move m : moves) {
                 Position pos = m.getDestination();
                 Tile x = getTileAt(pos);
@@ -75,18 +92,26 @@
     }
 
     private void secondClick(Tile tile) throws IllegalMoveException {
+        // najdeme kroky pro označnou postavičku
         Set<Move> moves = controller.getMovesForPiecesAt(origin.getPosition());
+        // najdeme pozici na kterou se ted kliklo
         Position destination = tile.getPosition();
 
         boolean isTherePieceAtDestination = controller.getSideOfPieceAt(destination) != null;
+        // kliklo se na postavičku stejné strany?
         boolean clickedOnSameSidePiece = isTherePieceAtDestination
                 && controller.getSideOfPieceAt(destination).equals(controller.getSideOfPieceAt(origin.getPosition()));
-        if (origin.getPosition().equals(destination) || clickedOnSameSidePiece) {
+        boolean clickedOnSamePiece = origin.getPosition().equals(destination);
+
+        // Pokud je pravda, odznáčí označenou postavičku
+        if (clickedOnSamePiece || clickedOnSameSidePiece) {
             origin.clear();
             for (Move x : moves) {
                 Position pos = x.getDestination();
+                // ruší se zvýraznění
                 getTileAt(pos).clear();
             }
+            // Pokud se kliklo na cizí postavičku, nebo prázdné pole
         } else {
             for (Move m : moves) {
                 Position pos = m.getDestination();
@@ -101,63 +126,101 @@
     }
 
     public Pane getView() {
-        return gridPane;
-    }
-
-    public Tile[][] getTiles() {
-        return tiles;
+        return root;
     }
 
     private Tile getTileAt(int row, int col) {
-        return getTiles()[row][col];
+        return tiles[row][col];
     }
 
     private Tile getTileAt(Position postition) {
         return getTileAt(postition.getRow(), postition.getCol());
     }
 
-    public void updateView(Move moveMade, List<Position> capturedPostions) {
+    // updatuje pohled na šachovnici podle dat v controlleru
+    private void updateView(Move moveMade) {
         Color previous = Color.NAVAJOWHITE;
         Position start = moveMade.getStart();
         Position end = moveMade.getDestination();
 
+        getTileAt(start).highlight(previous);
+        getTileAt(end).highlight(previous);
+    }
+
+    private void redrawBoard() {
         for (Tile[] tileLine : tiles) {
             for (Tile t : tileLine) {
                 t.clear();
+                if (t.isShifting()) {
+                    t.highlight(controller.getCurrentState().getCurrentTileColor().getColor());
+                }
                 Position current = t.getPosition();
-                getTileAt(start).highlight(previous);
-                getTileAt(end).highlight(previous);
                 t.setImage(controller.getImageForPieceAt(current));
             }
         }
     }
 
-    public void handleSideChange(Side s) {
-        //TODO: implement
+    private void handleSideChange(Side s) {
+        redrawBoard();
+        if (controller.getCurrentState().isGameOver()) {
+            return;
+        }
+        if (s != null && s.equals(Side.WHITE)) {
+            appendToInfoText("It is WHITE players turn");
+        } else {
+            appendToInfoText("It is BLACK players turn");
+        }
     }
 
-    public void handleGameStateChange(GameState state) {
-        //TODO: implement
+    private void handleFightNotification(String message) {
+        if (message != null) {
+            appendToInfoText(message);
+        }
+    }
+
+    private void handleGameStateChange(GameState state) {
+        if (state == null) {
+            return;
+        }
+        if (state.equals(ArchonState.ONGOING)) {
+            appendToInfoText("The game has started");
+        } else if (state.equals(ArchonState.WHITE_WINS)) {
+            appendToInfoText("WHITE side wins");
+        } else if (state.equals(ArchonState.BLACK_WINS)) {
+            appendToInfoText("BLACK side wins");
+        }
     }
 
     public void reset(GameController newController) {
         controller = newController;
         controller.addMoveListener(
-                (Move move, List<Position> capturePositions) ->
-                        updateView(move, capturePositions)
-        );
+                (Move move) -> updateView(move));
+
+        controller.addFightListener(
+                (String message) -> handleFightNotification(message));
 
         controller.addCurrentSideListener(
-                (Side side) ->  handleSideChange(side)
-        );
+                (Side side) -> handleSideChange(side));
 
         controller.addGameStateChangeListener(
                 (GameState state) -> handleGameStateChange(state));
 
+        infoText = new Text();
+        infoPane.setContent(infoText);
         addPieces();
         controller.startGame();
     }
 
+    private void appendToInfoText(String message) {
+        if (infoText == null) {
+            infoText = new Text(message);
+            infoPane.setContent(infoText);
+        } else {
+            infoText = new Text(infoText.getText() + "\n" + message);
+            infoPane.setContent(infoText);
+        }
+    }
+
     private void addPieces() {
         gridPane.getChildren().clear();
         Map<Piece, Position> pieces = controller.getAllActivePiecesPositions();
@@ -171,7 +234,7 @@
                         1 + tile.getPosition().getRow());
                 GridPane.setHgrow(tile.getRootNode(), Priority.ALWAYS);
                 GridPane.setVgrow(tile.getRootNode(), Priority.ALWAYS);
-                getTiles()[row][col] = tile;
+                tiles[row][col] = tile;
                 tile.getRootNode().setOnMouseClicked(tileListener(tile));
                 tile.setImage(null);
                 tile.clear();
@@ -183,7 +246,14 @@
             Position placeAt = pieces.get(p);
             getTileAt(placeAt).setImage(p.getType().getImage());
         }
+    }
 
+    public void save() {
+        appendToInfoText(controller.save());
+    }
 
+    public void load() {
+        appendToInfoText(controller.load());
+        redrawBoard();
     }
 }
Index: src/main/java/sample/controller/ArchonController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/sample/controller/ArchonController.java	(date 1514658644000)
+++ src/main/java/sample/controller/ArchonController.java	(date 1514660859000)
@@ -14,8 +14,8 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Random;
 import java.util.Set;
-import java.util.function.BiConsumer;
 import java.util.function.Consumer;
 
 public class ArchonController implements GameController {
@@ -25,9 +25,10 @@
     private Map<Piece, Set<Move>> currentMoves;
 
     // Další tři proměnné jsou listy listenerů
-    private List<BiConsumer<Move, List<Position>>> moveCallbacks; // pohyb postavičky
+    private List<Consumer<Move>> moveCallbacks; // pohyb postavičky
     private List<Consumer<GameState>> stateCallbacks; // výhra nebo remíza
     private List<Consumer<Side>> sideCallbacks; // změna stray
+    private List<Consumer<String>> fightCallbacks;
 
     private boolean gameFinished = false;
     private GameState currentState;
@@ -36,6 +37,7 @@
         moveCallbacks = new ArrayList<>();
         stateCallbacks = new ArrayList<>();
         sideCallbacks = new ArrayList<>();
+        fightCallbacks = new ArrayList<>();
 
         board = new ArchonBoard();
         currentSide = Side.WHITE;
@@ -95,9 +97,9 @@
     }
 
     private Side getWinningSide() {
-        Position[] positions = new Position[]{new Position(0,4),
-                new Position(4,0), new Position(4,4),
-                new Position(4,8), new Position(8,4)};
+        Position[] positions = new Position[]{new Position(0, 4),
+                new Position(4, 0), new Position(4, 4),
+                new Position(4, 8), new Position(8, 4)};
 
         List<Side> sides = Arrays.asList(getSideOfPieceAt(positions[0]),
                 getSideOfPieceAt(positions[1]),
@@ -134,13 +136,26 @@
             Set<Move> movesForMover = currentMoves.get(mover);
             // kontroluji, že nějaké tahy má
             if (movesForMover != null) {
-                board.movePiece(mover, m);
-                List<Position> capturePositions = new ArrayList<>();
-                capturePositions.add(m.getDestination());
+                Piece destPiece = board.getPieceAt(m.getDestination());
+                double pieceRemainingHp = mover.getHp();
+                if (destPiece != null) {
+                    pieceRemainingHp = fight(mover, destPiece);
+                }
+
+                boolean movePiece = true;
+
+                if (pieceRemainingHp < 0) {
+                    board.removePiece(mover);
+                    movePiece = false;
+                }
+
+                if (movePiece) {
+                    board.movePiece(mover, m);
+                }
 
                 // upozornuje všechny listenery poslouchájící pohyby postaviček o provedenem pohybu
-                for (BiConsumer<Move, List<Position>> callback : moveCallbacks) {
-                    callback.accept(m, capturePositions);
+                for (Consumer<Move> callback : moveCallbacks) {
+                    callback.accept(m);
                 }
 
                 Side winningSide = getWinningSide();
@@ -156,13 +171,56 @@
         }
     }
 
+    // vrací HP zbylé výherní postavičce, pokud vyhrál útočník, je číslo pozitivní, pokud obránce je negativní
+    private double fight(Piece attacker, Piece defender) {
+        Random random = new Random();
+        boolean thisPieceAttacking = true;
+        boolean attackSuccessfull;
+        double attack;
+        while (attacker.getHp() > 0 && defender.getHp() > 0) {
+            attackSuccessfull = random.nextBoolean();
+            if (attackSuccessfull) {
+                if (thisPieceAttacking) {
+                    attack = attacker.getAttackPower() / 2.0;
+                    defender.attackForHp(attack);
+                    notifyOfFight(attacker.getType().getName() + " attacked " + defender.getType().getName() + " for " + attack + " HP");
+                } else {
+                    attack = defender.getAttackPower() / 2.0;
+                    attacker.attackForHp(attack);
+                    notifyOfFight(defender.getType().getName() + " attacked " + attacker.getType().getName() + " for " + attack + " HP");
+                }
+            } else {
+                if (thisPieceAttacking) {
+                    notifyOfFight(attacker.getType().getName() + " missed attack on " + defender.getType().getName());
+                } else {
+                    notifyOfFight(defender.getType().getName() + " missed attack on " + attacker.getType().getName());
+                }
+            }
+            thisPieceAttacking = !thisPieceAttacking;
+        }
+
+        if (attacker.getHp() > defender.getHp()) {
+            notifyOfFight(attacker.getType().getName() + " wins the fight");
+            return attacker.getHp();
+        } else {
+            notifyOfFight(defender.getType().getName() + " wins the fight");
+            return -defender.getHp();
+        }
+    }
+
+    private void notifyOfFight(String message) {
+        for (Consumer<String> callback : fightCallbacks) {
+            callback.accept(message);
+        }
+    }
+
     @Override
     public Map<Piece, Position> getAllActivePiecesPositions() {
         return board.getAllActivePiecesPositions();
     }
 
     @Override
-    public void addMoveListener(BiConsumer<Move, List<Position>> moveListener) {
+    public void addMoveListener(Consumer<Move> moveListener) {
         moveCallbacks.add(moveListener);
     }
 
@@ -176,6 +234,11 @@
         sideCallbacks.add(sideListener);
     }
 
+    @Override
+    public void addFightListener(Consumer<String> fightListener) {
+        fightCallbacks.add(fightListener);
+    }
+
     @Override
     public Image getImageForPieceAt(Position position) {
         Piece piece = board.getPieceAt(position);
Index: src/main/java/sample/controller/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/sample/controller/GameController.java	(date 1514658644000)
+++ src/main/java/sample/controller/GameController.java	(date 1514660859000)
@@ -36,11 +36,13 @@
     // jenmom provolává na stejnou metodu v ArchonBoard
     Map<Piece, Position> getAllActivePiecesPositions();
     // registruje posluchace pro akci pohnuti postavicky
-    void addMoveListener(BiConsumer<Move, List<Position>> moveListener);
+    void addMoveListener(Consumer<Move> moveListener);
     // registruje posluchace pro zmeny herniho stavu
     void addGameStateChangeListener(Consumer<GameState> listener);
     // posluchac pro zmenu stavu strany, ktera je na tahu
     void addCurrentSideListener(Consumer<Side> sideListener);
+    // posluchac pro zmeny hp pri souboji postavice
+    void addFightListener(Consumer<String> fightListener);
     // vrati obrazek pro postavicku na dane pozici
     Image getImageForPieceAt(Position position);
 
Index: src/main/java/sample/model/Board.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/sample/model/Board.java	(date 1514658644000)
+++ src/main/java/sample/model/Board.java	(date 1514660859000)
@@ -21,6 +21,8 @@
     // nahradí postavičku na pozici za danou parametrem
     void replacePieceAt(Position pos, Piece newPiece);
 
+    void removePiece(Piece p);
+
     String save();
     String load();
 }
Index: src/main/java/sample/model/Piece.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/sample/model/Piece.java	(date 1514658644000)
+++ src/main/java/sample/model/Piece.java	(date 1514660859000)
@@ -9,4 +9,5 @@
     PieceType getType();
     double getHp();
     double getAttackPower();
+    void attackForHp(double minusHP);
 }
Index: src/main/java/sample/model/pieces/ArchonPiece.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/sample/model/pieces/ArchonPiece.java	(date 1514658644000)
+++ src/main/java/sample/model/pieces/ArchonPiece.java	(date 1514660859000)
@@ -6,6 +6,7 @@
 import main.java.sample.model.Side;
 
 import java.util.Objects;
+import java.util.Random;
 
 public abstract class ArchonPiece implements Piece {
     private static int refCount;
@@ -23,6 +24,11 @@
         this.attackPower = attackPower;
     }
 
+    @Override
+    public void attackForHp(double minusHP) {
+        hp -= minusHP;
+    }
+
     public static Piece loadPieceWithName(String name, double hp) {
         switch (name) {
             case "KNIGHT":