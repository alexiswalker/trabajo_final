type ProgAlgebra p r c a = (
    [r] -> p,                    -- program
    String -> [c] -> r,          -- rule
    (c,                          -- commands
    Dir -> c,                    -- command
    Dir -> [a] -> c,             -- alterCommands
    String -> c),                -- commandName
    Pat -> [c] -> a              -- alt
    )

foldProg :: ProgAlgebra p r c a -> Program -> p
foldProg (program, rule (commands, command, alterCommands, commandName), alt) = fold
    where
      fold (Program xs) = program $ map folda xs
      folda (Rule s xs) = rule s $ map foldb xs
      foldb (Turn d) = command d
      foldb (Case d xs) = alterCommands d $ map foldc xs
      foldb (Ident s) = commandName s
      foldb _ = commands
      foldc (Alt p xs) = alt p $ map foldb xs