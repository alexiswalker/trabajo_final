Index: source/game/g_cmds.c
===================================================================
--- source/game/g_cmds.c	(revision 5592)
+++ source/game/g_cmds.c	(working copy)
@@ -694,30 +694,6 @@
 	ent->client->showinventory = false;
 }
 
-
-int PlayerSort (void const *a, void const *b)
-{
-	int		anum, bnum;
-
-	anum = *(int *)a;
-	bnum = *(int *)b;
-
-	if ( game.clients[anum].ps.stats[STAT_SPECTATOR] == 0 )
-		anum = game.clients[anum].ps.stats[STAT_FRAGS];
-	else
-		anum = 0;
-	if ( game.clients[bnum].ps.stats[STAT_SPECTATOR] == 0 )
-		bnum = game.clients[bnum].ps.stats[STAT_FRAGS];
-	else
-		bnum = 0;
-
-	if (anum < bnum)
-		return -1;
-	if (anum > bnum)
-		return 1;
-	return 0;
-}
-
 /*
 =================
 Cmd_Players_f
@@ -739,8 +715,8 @@
 			count++;
 		}
 
-	// sort by frags
-	qsort (index, count, sizeof(index[0]), PlayerSort);
+	// sort by frags ascending
+	qsort (index, count, sizeof(index[0]), G_PlayerSortAscending);
 
 	// print information
 	large[0] = 0;
Index: source/game/g_local.h
===================================================================
--- source/game/g_local.h	(revision 5592)
+++ source/game/g_local.h	(working copy)
@@ -670,6 +670,8 @@
 
 extern  cvar_t  *sv_tickrate;
 
+extern 	cvar_t	*sv_gamereport;
+
 //mutators
 extern  cvar_t  *instagib;
 extern  cvar_t  *rocket_arena;
@@ -862,6 +864,8 @@
 
 char	*G_CopyString (const char *in);
 void	G_CleanPlayerName ( const char *source, char *dest );
+int 	G_PlayerSortAscending (void const *a, void const *b);
+int 	G_PlayerSortDescending (void const *a, void const *b);
 
 char	*vtos (vec3_t v);
 
Index: source/game/g_main.c
===================================================================
--- source/game/g_main.c	(revision 5592)
+++ source/game/g_main.c	(working copy)
@@ -196,6 +196,9 @@
 cvar_t  *sv_custombots;
 
 cvar_t  *sv_tickrate;
+
+cvar_t	*sv_gamereport;
+
 float   FRAMETIME;
 
 //unlagged
@@ -378,28 +381,35 @@
 }
 
 
-/**
- * \brief Log scores and stats
+// Note: This function returns a pointer to a substring of the original string.
+// If the given string was allocated dynamically, the caller must not overwrite
+// that pointer with the returned value, since the original pointer must be
+// deallocated using the same allocator with which it was allocated.  The return
+// value must NOT be deallocated using free() etc.
+char *trimwhitespace(char *str)
+{
+  char *end;
+
+  // Trim leading space
+  while(isspace((unsigned char)*str)) str++;
+
+  if(*str == 0)  // All spaces?
+    return str;
+
+  // Trim trailing space
+  end = str + strlen(str) - 1;
+  while(end > str && isspace((unsigned char)*end)) end--;
+
+  // Write new null terminator
+  *(end+1) = 0;
+
+  return str;
+}
+
+/*
+ * Log scores and stats into a game report file on the server in json format.
+ * Bots will be skipped.
  *
- * \detail This is a somewhat crude formatted dump of game information to
- *         the server console and log file. This version is mostly intended
- *         to collect some data about bot targeting accuracy.
- *
- *         The odds that the array indexes for the weapon hit data and weapon
- *         accuracy data are correctly cross-referenced are slim.
- *
- *  --- from hud stat report (p_hud.c) ---
- * --- currently def'd out ---
- * 0: "blaster"
- * 1: "disruptor"
- * 2: "smartgun"
- * 3: "chaingun"
- * 4: "flame"
- * 5: "rocket"
- * 6: "beamgun"
- * 7: "vaporizer"
- * 8: "violator"
- *
  *--- weapon_hit[] incremented ---
  * 0 : blasterball_touch  : Weapon_Beamgun, Weapon_Blaster
  * 0 : fire_blaster_beam  : Weapon_Beamgun, Weapon_Blaster, Weapon_Alienblaster
@@ -413,77 +423,86 @@
  * 7 : bomb_touch         : Weapon_Bomber, Weapon_Vaporizer
  * 7 : fire_vaporizer     : Weapon_Vaporizer
  * 8 : fire_violator      : Weapon_Violator
-
- * --- from sample.cfg accuracy
- * weapon_hit[] :to: bot weapacc[]
- * 0: 1: blaster
- * 1: 2: alien disruptor
- * 3: 3: chaingun
- * 4: 4: flame thrower
- * x: 5: homing rocket launcher (not implemented)
- * 5: 6: rocket launcher
- * 2: 7: alien smartgun
- * 6: 8: alien beamgun
- * 7: 9: alien vaporizer
- * 8: x: violator
  */
 static void game_report( void )
 {
 	static const char* weapname[] =
 	{
-		 "   blaster", // 0 
-		 " disruptor", // 1
-		 "  smartgun", // 2
-		 "  chaingun", // 3
-		 "     flame", // 4
-		 "    rocket", // 5
-		 "   beamgun", // 6 
-		 " vaporizer", // 7
-		 "  violator"  // 8
+		 "blaster", 		// 0 
+		 "disruptor", 		// 1
+		 "smartgun", 		// 2
+		 "chaingun", 		// 3
+		 "flamethrower", 	// 4
+		 "rocketlauncher", 	// 5
+		 "beamgun", 		// 6 
+		 "vaporizer", 		// 7
+		 "violator"  		// 8
 	};
-	/* cross-reference from weapon_hit to weapacc[] */
-	static const int accxref[] =
-	{
-		1, /* 0 blaster   */
-		2, /* 1 disruptor */
-		7, /* 2 smartgun  */
-		3, /* 3 chaingun  */
-		4, /* 4 flame     */
-		6, /* 5 rocket    */
-		8, /* 6 beamgun   */
-		9, /* 7 vaporizer */
-		0  /* 8 violator  */ /* no weapacc[] for this */
-	};
 
 	edict_t *pclient;
 	int i;
 	char *client_name;
+	int	count;
+	int	index[256];
 
-	gi.dprintf( "<GAME-REPORT-BEGIN>\n" );
+	char filename[MAX_OSPATH];
+	FILE *jsonfile;
+	
+	time_t t = time(NULL);
+	struct tm tm = *gmtime(&t);
 
-	for ( i = 0, pclient = &g_edicts[1] ; i < game.maxclients ; ++pclient, i++ )
-	{ // for each possible client, human or bot
-		if (pclient->inuse && player_participating (pclient))
+	Com_sprintf(filename, sizeof(filename), "%s/game report %04d-%02d-%02d %02d:%02d:%02d.json", 
+		FS_Gamedir(), tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec);
+
+	FS_CreatePath(filename);
+	jsonfile = fopen(filename, "w");
+	if (!jsonfile) {
+		Com_Printf("ERROR: couldn't open %s.\n", filename);
+		return;
+	}
+
+	count = 0;
+	for ( i = 0; i < game.maxclients; i++ )
+	{
+		pclient = g_edicts + 1 + i;
+		if (pclient->inuse && player_participating (pclient) && !pclient->is_bot)
 		{
-			int weap;
+			index[count] = i;
+			count++;
+		}
+	}
 
-			/* scoring - UNSORTED */
-			client_name = Info_ValueForKey( pclient->client->pers.userinfo, "name" );
-			if ( pclient->is_bot )
+	// sort by frags descending
+	qsort (index, count, sizeof(index[0]), G_PlayerSortDescending);
+
+	fprintf(jsonfile, "{\n");
+	fprintf(jsonfile, "\t\"players\": [\n");
+
+	for ( i = 0; i < count; i++ )
+	{ 	
+		int weap;
+		qboolean weaponSkillPrinted = false;
+
+		pclient = g_edicts + 1 + index[i];
+		if (pclient->inuse && player_participating (pclient) && !pclient->is_bot)
+		{						
+			int ratio = 0;
+			if (game.clients[index[i]].resp.deaths != 0)
 			{
-				gi.dprintf( "%s (%i,%0.2f): %i\n",
-						client_name,
-						pclient->skill, pclient->awareness,
-						game.clients[i].resp.score );
+				ratio = 100 * game.clients[index[i]].resp.score / game.clients[index[i]].resp.deaths;
 			}
-			else
-			{
-				gi.dprintf( "%s: %i\n",
-						client_name,
-						game.clients[i].resp.score );
-			}
 
+			/* scoring */
+			client_name = Info_ValueForKey( pclient->client->pers.userinfo, "name" );
+
+			fprintf(jsonfile, "\t\t{\n");
+			fprintf(jsonfile, "\t\t\t\"name\": \"%s\",\n", trimwhitespace(client_name));
+			fprintf(jsonfile, "\t\t\t\"score\": %i,\n", game.clients[index[i]].resp.score);
+			fprintf(jsonfile, "\t\t\t\"deaths\": %i,\n", game.clients[index[i]].resp.deaths);
+			fprintf(jsonfile, "\t\t\t\"ratio\": %i,\n", ratio);
+
 			/* weapon skill */
+			fprintf(jsonfile, "\t\t\t\"weapon_skill\": [\n");
 			for ( weap = 0; weap < 9; weap++ )
 			{
 				if ( pclient->client->resp.weapon_shots[weap] != 0 )
@@ -490,34 +509,34 @@
 				{
 					int hits  = pclient->client->resp.weapon_hits[weap];
 					int shots = pclient->client->resp.weapon_shots[weap];
-					int percent = (100 * hits) / shots;
-
-					if ( pclient->is_bot )
+					int percent = 100 * hits / shots;
+				
+					if (weaponSkillPrinted)
 					{
-						if ( weap == 8 )
-						{ /* violator - no weapacc[], accuracy always 1.0 */
-							gi.dprintf( " %s (1.0): %i/%i = %i%%\n",
-								weapname[weap], hits, shots, percent );
-						}
-						else
-						{
-							gi.dprintf( " %s (%0.2f): %i/%i = %i%%\n",
-								weapname[weap],
-								pclient->weapacc[accxref[weap]],
-								hits, shots, percent );
-						}
+						fprintf(jsonfile, ",\n");
 					}
-					else
-					{
-						gi.dprintf( " %s : %i/%i = %i%%\n",
-								weapname[weap], hits, shots, percent );
-					}
+					fprintf(jsonfile, "\t\t\t\t{\"weapon\": \"%s\", \"hits\": %i, \"shots\": %i, \"accuracy\": %i}", 
+						weapname[weap], hits, shots, percent);				
+					weaponSkillPrinted = true;
 				}
 			}
+			fprintf(jsonfile, "\n\t\t\t]\n");
+
+			if (i < count - 1)
+			{
+				fprintf(jsonfile, "\t\t},\n");
+			}
+			else
+			{
+				fprintf(jsonfile, "\t\t}\n");
+			}
 		}
 	}
-	gi.dprintf("<GAME-REPORT-END>\n");
+	
+	fprintf(jsonfile, "\t]\n");
+	fprintf(jsonfile, "}\n");
 
+	fclose(jsonfile);
 }
 
 
@@ -542,8 +561,8 @@
 	int i;
 	FILE *fp;
 
-	// log game scoring, statistics. currently crude for bot testing mostly.
-	if ( g_dedicated && g_dedicated->integer != 0 )
+	// Output game scoring and statistics into a game report in json format.
+	if ( g_dedicated && g_dedicated->integer != 0 && sv_gamereport->value )
 	{
 		game_report();
 	}
Index: source/game/g_save.c
===================================================================
--- source/game/g_save.c	(revision 5592)
+++ source/game/g_save.c	(working copy)
@@ -196,6 +196,7 @@
 	sv_custombots = gi.cvar("sv_custombots", "0", CVAR_LATCH | CVARDOC_INT);
 	gi.cvar_describe (sv_custombots, "0 uses default botfile. Any other value selects a botfile of the form botinfo/custom<value>.tmp.");
 	sv_tickrate = gi.cvar("sv_tickrate", "10", CVAR_SERVERINFO | CVAR_LATCH | CVARDOC_INT);
+	sv_gamereport = gi.cvar("sv_gamereport", "1", CVAR_LATCH | CVARDOC_BOOL);
 
 	//mutator
 	instagib = gi.cvar ("instagib", "0", CVAR_LATCH | CVAR_GAMEINFO | CVARDOC_BOOL);
Index: source/game/g_utils.c
===================================================================
--- source/game/g_utils.c	(revision 5592)
+++ source/game/g_utils.c	(working copy)
@@ -546,6 +546,58 @@
 	}
 }
 
+int PlayerSort (void const *a, void const *b, qboolean ascending)
+{
+	int		anum, bnum;
+	int		afrags, bfrags;
+	int		adeaths, bdeaths;
+
+	anum = *(int *)a;
+	bnum = *(int *)b;
+
+	if ( game.clients[anum].ps.stats[STAT_SPECTATOR] == 0 )
+	{
+		afrags = game.clients[anum].resp.score;
+		adeaths = game.clients[anum].resp.deaths;
+	}
+	else
+	{
+		afrags = 0;
+		adeaths = 0;
+	}
+	if ( game.clients[bnum].ps.stats[STAT_SPECTATOR] == 0 )
+	{
+		bfrags = game.clients[bnum].resp.score;
+		bdeaths = game.clients[bnum].resp.deaths;
+	}
+	else
+	{
+		bfrags = 0;
+		bdeaths = 0;
+	}
+	
+	if (afrags < bfrags)
+		return ascending ? -1 : 1;
+	if (afrags > bfrags)
+		return ascending ? 1 : -1;
+	if (adeaths < bdeaths)
+		return ascending ? 1 : -1;
+	if (adeaths > bdeaths)
+		return ascending ? -1 : 1;
+		
+	return 0;
+}
+
+int G_PlayerSortAscending (void const *a, void const *b)
+{
+	return PlayerSort(a, b, true);
+}
+
+int G_PlayerSortDescending (void const *a, void const *b)
+{
+	return PlayerSort(a, b, false);
+}
+
 #if defined WIN32_VARIANT
 //useful rounding func
 int round(double number)
Index: source/game/p_hud.c
===================================================================
--- source/game/p_hud.c	(revision 5592)
+++ source/game/p_hud.c	(working copy)
@@ -665,12 +665,12 @@
 	char	string[1400];
 	int		stringlength;
 	int		i, j, k;
-	int		sorted[MAX_CLIENTS];
-	int		sortedscores[MAX_CLIENTS];
-	int		score, total;
 	int		x, y;
 	gclient_t	*cl;
 	edict_t		*cl_ent;
+	int		count;
+	int		index[256];
+
 #if 0
 	// 2010-12 unused. see below
 	char	acc[16];
@@ -691,9 +691,9 @@
 		CTFScoreboardMessage (ent, killer, mapvote);
 		return;
 	}
-	// sort the clients by score
-	total = 0;
-	for (i=0 ; i<game.maxclients ; i++)
+
+	count = 0;
+	for (i = 0; i < game.maxclients; i++)
 	{
 		cl_ent = g_edicts + 1 + i;
 		if (!cl_ent->inuse)
@@ -702,22 +702,13 @@
 			game.clients[i].resp.participation != participation_duelwaiting)
 			continue;
 
-		score = game.clients[i].resp.score;
-		for (j=0 ; j<total ; j++)
-		{
-			if (score > sortedscores[j])
-				break;
-		}
-		for (k=total ; k>j ; k--)
-		{
-			sorted[k] = sorted[k-1];
-			sortedscores[k] = sortedscores[k-1];
-		}
-		sorted[j] = i;
-		sortedscores[j] = score;
-		total++;
+		index[count] = i;
+		count++;	
 	}
 
+	// sort by frags descending
+	qsort (index, count, sizeof(index[0]), G_PlayerSortDescending);
+
 	// print level name and exit rules
 	string[0] = 0;
 
@@ -729,13 +720,13 @@
 	stringlength += j;
 
 	// add the clients in sorted order
-	if (total > 12)
-		total = 12;
+	if (count > 12)
+		count = 12;
 
-	for (i=0 ; i<total ; i++)
+	for (i = 0; i < count; i++)
 	{
-		cl = &game.clients[sorted[i]];
-		cl_ent = g_edicts + 1 + sorted[i];
+		cl = &game.clients[index[i]];
+		cl_ent = g_edicts + 1 + index[i];
 
 		x = 0;
 		y = 32 + 32 * (i%12);
@@ -754,11 +745,11 @@
 		if (player_participating (cl_ent))
 			Com_sprintf (entry, sizeof(entry),
 				"client %i %i %i %i %i %i ",
-				x, y, sorted[i], cl->resp.score, cl->ping, (int)((level.time - cl->resp.entertime)/60));
+				x, y, index[i], cl->resp.score, cl->ping, (int)((level.time - cl->resp.entertime)/60));
 		else //duel mode will have queued spectators
 			Com_sprintf (entry, sizeof(entry),
 				"queued %i %i %i %i %i %i ",
-				x, y, sorted[i], cl->resp.score, cl->ping, cl->pers.queue-2);
+				x, y, index[i], cl->resp.score, cl->ping, cl->pers.queue-2);
 
 		j = strlen(entry);
 		if (stringlength + j > 1024)