import csv
from pylab import plot,show
from time import time
import numpy as np
import matplotlib.pyplot as plt

from sklearn import metrics
from sklearn.cluster import KMeans
from sklearn.datasets import load_digits
from sklearn.decomposition import PCA
from sklearn.preprocessing import scale

with open("iris2.csv", 'r') as f:
    entrada = list(csv.reader(f, delimiter=","))            #Recebendo a entrada do arquivo csv

# Cria uma matriz a partir do list
myarray = np.asarray(entrada)

# Converte a matriz de string para de np.float
dadoTratado = myarray.astype(np.float)

# Printa o tipo de dado pra ter certeza que realmente virou float
print(type(dadoTratado[1][1]))

# Printa a matriz inteira
print(dadoTratado)

# Inicializa o K Means
kmeans = KMeans(n_clusters=3)

# Da fit na entrada
kmeans.fit(dadoTratado)

# Exeuta o kmeans
dadoTratadoKMeans = kmeans.predict(dadoTratado)

# Recebendo os centorides
centroids = kmeans.cluster_centers_

# Printando os centroides
print(centroids)

#Printando Dados do K Means
print(len(dadoTratadoKMeans))


print(metrics.silhouette_score(dadoTratado, kmeans.labels_, metric='euclidean', sample_size=None, random_state=None))
# Teste para printar grafico que deu errado
# plot(dadoTratadoKMeans[0],dadoTratadoKMeans[0],'ob',
#      dadoTratadoKMeans[1],dadoTratadoKMeans[1],'or')
# plot(centroids[1],centroids[2],'sg',markersize=8)
# show()