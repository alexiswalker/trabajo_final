diff --git a/plugins/janus_audiobridge.c b/plugins/janus_audiobridge.c
index f527499..82521d4 100644
--- a/plugins/janus_audiobridge.c
+++ b/plugins/janus_audiobridge.c
@@ -821,6 +821,7 @@ static void janus_audiobridge_room_destroy(janus_audiobridge_room *audiobridge)
 		return;
 	if(!g_atomic_int_compare_and_exchange(&audiobridge->destroyed, 0, 1))
 		return;
+	JANUS_LOG(LOG_INFO, "Destroying room %"SCNu64"!\n", audiobridge->room_id);
 	/* Wait for the thread to finish */
 	g_thread_join(audiobridge->thread);
 	/* Decrease the counter */
@@ -1149,7 +1150,7 @@ int janus_audiobridge_init(janus_callbacks *callback, const char *config_path) {
 	config_folder = config_path;
 	if(config != NULL)
 		janus_config_print(config);
-	
+		
 	rooms = g_hash_table_new_full(g_int64_hash, g_int64_equal, (GDestroyNotify)g_free, (GDestroyNotify)janus_audiobridge_room_destroy);
 	sessions = g_hash_table_new_full(NULL, NULL, NULL, (GDestroyNotify)janus_audiobridge_session_destroy);
 	messages = g_async_queue_new_full((GDestroyNotify) janus_audiobridge_message_free);
@@ -1637,6 +1638,7 @@ struct janus_plugin_result *janus_audiobridge_handle_message(janus_plugin_sessio
 		/* Create the audio bridge room */
 		janus_audiobridge_room *audiobridge = g_malloc0(sizeof(janus_audiobridge_room));
 		if(audiobridge == NULL) {
+			janus_mutex_unlock(&rooms_mutex);
 			JANUS_LOG(LOG_FATAL, "Memory error!\n");
 			error_code = JANUS_AUDIOBRIDGE_ERROR_UNKNOWN_ERROR;
 			g_snprintf(error_cause, 512, "Memory error");
@@ -1730,12 +1732,6 @@ struct janus_plugin_result *janus_audiobridge_handle_message(janus_plugin_sessio
 		audiobridge->rtp_udp_sock = -1;
 		janus_mutex_init(&audiobridge->rtp_mutex);
 		janus_refcount_init(&audiobridge->ref, janus_audiobridge_room_free);
-		g_hash_table_insert(rooms, janus_uint64_dup(audiobridge->room_id), audiobridge);
-		JANUS_LOG(LOG_VERB, "Created audiobridge: %"SCNu64" (%s, %s, secret: %s, pin: %s)\n",
-			audiobridge->room_id, audiobridge->room_name,
-			audiobridge->is_private ? "private" : "public",
-			audiobridge->room_secret ? audiobridge->room_secret : "no secret",
-			audiobridge->room_pin ? audiobridge->room_pin : "no pin");
 		/* We need a thread for the mix */
 		GError *error = NULL;
 		char tname[16];
@@ -1758,6 +1754,12 @@ struct janus_plugin_result *janus_audiobridge_handle_message(janus_plugin_sessio
 		} else {
 			g_hash_table_insert(rooms, janus_uint64_dup(audiobridge->room_id), audiobridge);
 		}
+		JANUS_LOG(LOG_VERB, "Created audiobridge: %"SCNu64" (%s, %s, secret: %s, pin: %s)\n",
+		audiobridge->room_id, audiobridge->room_name,
+		audiobridge->is_private ? "private" : "public",
+		audiobridge->room_secret ? audiobridge->room_secret : "no secret",
+		audiobridge->room_pin ? audiobridge->room_pin : "no pin");
+
 		if(save) {
 			/* This room is permanent: save to the configuration file too
 			 * FIXME: We should check if anything fails... */
@@ -1979,7 +1981,6 @@ struct janus_plugin_result *janus_audiobridge_handle_message(janus_plugin_sessio
 		json_object_set_new(destroyed, "room", json_integer(room_id));
 		/* Notify all participants that the fun is over, and that they'll be kicked */
 		JANUS_LOG(LOG_VERB, "Notifying all participants\n");
-		janus_mutex_lock(&audiobridge->mutex);
 		GHashTableIter iter;
 		gpointer value;
 		g_hash_table_iter_init(&iter, audiobridge->participants);
@@ -2722,12 +2723,10 @@ static void janus_audiobridge_hangup_media_internal(janus_plugin_session *handle
 	/* Get rid of participant */
 	janus_audiobridge_participant *participant = (janus_audiobridge_participant *)session->participant;
 	session->participant = NULL;
-	janus_mutex_lock(&rooms_mutex);
 	janus_audiobridge_room *audiobridge = participant->room;
 	gboolean removed = FALSE;
 	if(audiobridge != NULL) {
 		participant->room = NULL;
-		janus_mutex_lock(&audiobridge->mutex);
 		json_t *event = json_object();
 		json_object_set_new(event, "audiobridge", json_string("event"));
 		json_object_set_new(event, "room", json_integer(audiobridge->room_id));
@@ -2801,12 +2800,10 @@ static void janus_audiobridge_hangup_media_internal(janus_plugin_session *handle
 	participant->last_drop = 0;
 	janus_mutex_unlock(&participant->qmutex);
 	if(audiobridge != NULL) {
-		janus_mutex_unlock(&audiobridge->mutex);
 		if(removed) {
 			janus_refcount_decrease(&audiobridge->ref);
 		}
 	}
-	janus_mutex_unlock(&rooms_mutex);
 }
 
 /* Thread to handle incoming messages */
@@ -2901,8 +2898,6 @@ static void *janus_audiobridge_handler(void *data) {
 					JANUS_LOG(LOG_ERR, "Unauthorized (not in the allowed list)\n");
 					error_code = JANUS_AUDIOBRIDGE_ERROR_UNAUTHORIZED;
 					g_snprintf(error_cause, 512, "Unauthorized (not in the allowed list)");
-					janus_mutex_unlock(&audiobridge->mutex);
-					janus_mutex_unlock(&rooms_mutex);
 					goto error;
 				}
 			}
@@ -3100,8 +3095,6 @@ static void *janus_audiobridge_handler(void *data) {
 					json_object_set_new(pl, "talking", p->talking ? json_true() : json_false());
 				json_array_append_new(list, pl);
 			}
-			janus_mutex_unlock(&audiobridge->mutex);
-			janus_mutex_unlock(&rooms_mutex);
 			event = json_object();
 			json_object_set_new(event, "audiobridge", json_string("joined"));
 			json_object_set_new(event, "room", json_integer(room_id));
@@ -3325,7 +3318,6 @@ static void *janus_audiobridge_handler(void *data) {
 					JANUS_LOG(LOG_ERR, "Unauthorized (not in the allowed list)\n");
 					error_code = JANUS_AUDIOBRIDGE_ERROR_UNAUTHORIZED;
 					g_snprintf(error_cause, 512, "Unauthorized (not in the allowed list)");
-					janus_mutex_unlock(&audiobridge->mutex);
 					janus_mutex_unlock(&rooms_mutex);
 					goto error;
 				}
@@ -3352,7 +3344,6 @@ static void *janus_audiobridge_handler(void *data) {
 				if(g_hash_table_lookup(audiobridge->participants, &user_id) != NULL) {
 					janus_refcount_decrease(&audiobridge->ref);
 					/* User ID already taken */
-					janus_mutex_unlock(&audiobridge->mutex);
 					janus_mutex_unlock(&rooms_mutex);
 					JANUS_LOG(LOG_ERR, "User ID %"SCNu64" already exists\n", user_id);
 					error_code = JANUS_AUDIOBRIDGE_ERROR_ID_EXISTS;
@@ -3395,7 +3386,6 @@ static void *janus_audiobridge_handler(void *data) {
 					/* Join the old room again... */
 					g_hash_table_insert(audiobridge->participants, janus_uint64_dup(participant->user_id), participant);
 					janus_mutex_unlock(&old_audiobridge->mutex);
-					janus_mutex_unlock(&audiobridge->mutex);
 					janus_mutex_unlock(&rooms_mutex);
 					goto error;
 				}
@@ -3434,7 +3424,6 @@ static void *janus_audiobridge_handler(void *data) {
 					/* Join the old room again... */
 					g_hash_table_insert(audiobridge->participants, janus_uint64_dup(participant->user_id), participant);
 					janus_mutex_unlock(&old_audiobridge->mutex);
-					janus_mutex_unlock(&audiobridge->mutex);
 					janus_mutex_unlock(&rooms_mutex);
 					goto error;
 				}
@@ -3556,7 +3545,6 @@ static void *janus_audiobridge_handler(void *data) {
 				json_object_set_new(info, "muted", participant->muted ? json_true() : json_false());
 				gateway->notify_event(&janus_audiobridge_plugin, session->handle, info);
 			}
-			janus_mutex_unlock(&audiobridge->mutex);
 			janus_mutex_unlock(&rooms_mutex);
 		} else if(!strcasecmp(request_text, "leave")) {
 			/* This participant is leaving */
@@ -4101,7 +4089,8 @@ static void *janus_audiobridge_mixer_thread(void *data) {
 		}
 	}
 	g_free(rtpbuffer);
-	JANUS_LOG(LOG_VERB, "Leaving mixer thread for room %"SCNu64" (%s)...\n", audiobridge->room_id, audiobridge->room_name);
+	JANUS_LOG(LOG_VERB, "Leaving mixer thread for room %"SCNu64" (%s)... %d %d %d\n", audiobridge->room_id, audiobridge->room_name,
+	g_atomic_int_get(&initialized), g_atomic_int_get(&stopping), g_atomic_int_get(&audiobridge->destroyed));
 
 	janus_refcount_decrease(&audiobridge->ref);
 
diff --git a/plugins/janus_videoroom.c b/plugins/janus_videoroom.c
index 85d88af..eced57e 100644
--- a/plugins/janus_videoroom.c
+++ b/plugins/janus_videoroom.c
@@ -1263,9 +1263,7 @@ static void janus_videoroom_participant_joining(janus_videoroom_publisher *p) {
 		json_object_set_new(event, "videoroom", json_string("event"));
 		json_object_set_new(event, "room", json_integer(p->room->room_id));
 		json_object_set_new(event, "joining", user);
-		janus_mutex_lock(&p->room->mutex);
 		janus_videoroom_notify_participants(p, event);
-		janus_mutex_unlock(&p->room->mutex);
 		/* user gets deref-ed by the owner event */
 		json_decref(event);
 	}