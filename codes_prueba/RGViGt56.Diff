diff --git a/module/zfs/zio_crypt.c b/module/zfs/zio_crypt.c
index 5ffa1e8..876db4e 100644
--- a/module/zfs/zio_crypt.c
+++ b/module/zfs/zio_crypt.c
@@ -447,6 +447,7 @@ zio_do_crypt_uio(boolean_t encrypt, uint64_t crypt, crypto_key_t *key,
 		ret = crypto_encrypt(&mech, &plaindata, key, tmpl, &cipherdata,
 		    NULL);
 		if (ret != CRYPTO_SUCCESS) {
+			zfs_dbgmsg("HERE1: %d", ret);
 			ret = SET_ERROR(EIO);
 			goto error;
 		}
@@ -663,6 +664,7 @@ zio_crypt_do_hmac(zio_crypt_key_t *key, uint8_t *data, uint_t datalen,
 	ret = crypto_mac(&mech, &in_data, &key->zk_hmac_key, key->zk_hmac_tmpl,
 	    &digest_data, NULL);
 	if (ret != CRYPTO_SUCCESS) {
+		zfs_dbgmsg("HERE2: %d", ret);
 		ret = SET_ERROR(EIO);
 		goto error;
 	}
@@ -883,6 +885,7 @@ zio_crypt_bp_do_hmac_updates(crypto_context_t ctx, boolean_t should_bswap,
 
 	ret = crypto_mac_update(ctx, &cd, NULL);
 	if (ret != CRYPTO_SUCCESS) {
+		zfs_dbgmsg("HERE3: %d", ret);
 		ret = SET_ERROR(EIO);
 		goto error;
 	}
@@ -894,6 +897,7 @@ zio_crypt_bp_do_hmac_updates(crypto_context_t ctx, boolean_t should_bswap,
 
 	ret = crypto_mac_update(ctx, &cd, NULL);
 	if (ret != CRYPTO_SUCCESS) {
+		zfs_dbgmsg("HERE4: %d", ret);
 		ret = SET_ERROR(EIO);
 		goto error;
 	}
@@ -987,6 +991,7 @@ zio_crypt_do_dnode_hmac_updates(crypto_context_t ctx, boolean_t should_bswap,
 
 	ret = crypto_mac_update(ctx, &cd, NULL);
 	if (ret != CRYPTO_SUCCESS) {
+		zfs_dbgmsg("HERE5: %d", ret);
 		ret = SET_ERROR(EIO);
 		goto error;
 	}
@@ -1060,6 +1065,7 @@ zio_crypt_do_objset_hmacs(zio_crypt_key_t *key, void *data, uint_t datalen,
 	/* calculate the portable MAC from the portable fields and metadnode */
 	ret = crypto_mac_init(&mech, &key->zk_hmac_key, NULL, &ctx, NULL);
 	if (ret != CRYPTO_SUCCESS) {
+		zfs_dbgmsg("HERE6: %d", ret);
 		ret = SET_ERROR(EIO);
 		goto error;
 	}
@@ -1072,6 +1078,7 @@ zio_crypt_do_objset_hmacs(zio_crypt_key_t *key, void *data, uint_t datalen,
 
 	ret = crypto_mac_update(ctx, &cd, NULL);
 	if (ret != CRYPTO_SUCCESS) {
+		zfs_dbgmsg("HERE7: %d", ret);
 		ret = SET_ERROR(EIO);
 		goto error;
 	}
@@ -1090,6 +1097,7 @@ zio_crypt_do_objset_hmacs(zio_crypt_key_t *key, void *data, uint_t datalen,
 
 	ret = crypto_mac_update(ctx, &cd, NULL);
 	if (ret != CRYPTO_SUCCESS) {
+		zfs_dbgmsg("HERE8: %d", ret);
 		ret = SET_ERROR(EIO);
 		goto error;
 	}
@@ -1107,6 +1115,7 @@ zio_crypt_do_objset_hmacs(zio_crypt_key_t *key, void *data, uint_t datalen,
 
 	ret = crypto_mac_final(ctx, &cd, NULL);
 	if (ret != CRYPTO_SUCCESS) {
+		zfs_dbgmsg("HERE9: %d", ret);
 		ret = SET_ERROR(EIO);
 		goto error;
 	}
@@ -1126,6 +1135,7 @@ zio_crypt_do_objset_hmacs(zio_crypt_key_t *key, void *data, uint_t datalen,
 	/* calculate the local MAC from the userused and groupused dnodes */
 	ret = crypto_mac_init(&mech, &key->zk_hmac_key, NULL, &ctx, NULL);
 	if (ret != CRYPTO_SUCCESS) {
+		zfs_dbgmsg("HERE10: %d", ret);
 		ret = SET_ERROR(EIO);
 		goto error;
 	}
@@ -1144,6 +1154,7 @@ zio_crypt_do_objset_hmacs(zio_crypt_key_t *key, void *data, uint_t datalen,
 
 	ret = crypto_mac_update(ctx, &cd, NULL);
 	if (ret != CRYPTO_SUCCESS) {
+		zfs_dbgmsg("HERE11: %d", ret);
 		ret = SET_ERROR(EIO);
 		goto error;
 	}
@@ -1166,6 +1177,7 @@ zio_crypt_do_objset_hmacs(zio_crypt_key_t *key, void *data, uint_t datalen,
 
 	ret = crypto_mac_final(ctx, &cd, NULL);
 	if (ret != CRYPTO_SUCCESS) {
+		zfs_dbgmsg("HERE12: %d", ret);
 		ret = SET_ERROR(EIO);
 		goto error;
 	}