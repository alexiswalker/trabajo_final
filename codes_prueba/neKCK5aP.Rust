pub enum CommandOutput {
    NoOutput,
    Output(char),
    Error(String)
}

pub struct Command { 
    opcode: char,
    func: fn(interpreter: &Interpreter) -> CommandOutput
}

impl Command {
    pub fn new() -> Command {
        Command {
            opcode: '\0',
            func: |i: &Interpreter| CommandOutput::Error(String::from("NotImplemented"))
        }
    }
}

pub struct Interpreter {
    pub stack: Vec<i64>,
    pub stack_ptr: usize,
    pub commands: Vec<Command>
}

fn get_default_commands() -> Vec<Command> {
    let mut ret = Vec::new();
    let mut cmd = Command::new();

    cmd.opcode = '!';
    cmd.func = |i: &Interpreter| CommandOutput::NoOutput;

    ret.push(cmd);

    ret
}

impl Interpreter {
    pub fn new() -> Interpreter {
        Interpreter { 
            stack: Vec::new(),
            stack_ptr: 0,
            commands: get_default_commands()
        }
    }

    pub fn execute(&self, command: char) -> CommandOutput {
        for cmd in &(self.commands) {
            println!("Iterating: {}", cmd.opcode);
        }
        CommandOutput::Error(String::from("NotImplementedYet"))
    }
}