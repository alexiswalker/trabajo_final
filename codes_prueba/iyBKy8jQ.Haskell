-- up to this point, everything shall be given

--Fügt einen Knoten dem Pfad hinzu und addiert sein Gewicht zum Gesamtgewicht falls er noch nicht im Pfad vorhanden ist.
add :: Eq a =>Path a -> Weight -> a-> Path a 
add p w n = if contains p n then p else P (cost p + w) (path p++[n]) 

--Prüft ob ein Knoten schon in einem Pfad vorhanden ist
contains :: Eq n => Path n -> n -> Bool
contains p n = elem n (path p) 

tpp :: (Ix n, Show n) => Graph n -> n -> Maybe (Path n) 
tpp g n = if cycles g n ==[] then Nothing else Just (minPath (cycles g n) emptyPath)

minPath :: [Path n] -> Path n -> Path n
minPath [] (P wm pm) = (P wm pm)
minPath ((P w p):ps) (P wm pm)  
    | w < wm = minPath ps (P w p)
    | otherwise = minPath ps (P wm pm)
--Startet das suchen in einem gegeben Graphen mit Startpunkt n
cycles :: (Show n, Ix n) => Graph n -> n -> [Path n]
cycles g n = (traverse1 g (g!n) (P 0 [n])) ++ [P 0 [n]]

--Traversiert rekursiv durch einen gegeben Graphen wobei nur Knoten zum Pfad hinzugefügt werden welche 
--noch nicht im Pfad vorhanden sind. Ausnahme: Nächster Punkt ist auch Startpunkt
traverse1 :: (Ix n) => Graph n -> [(Weight,n)] -> Path n -> [Path n]
traverse1 _ [] _ = []
traverse1 g ((w,n):es) (P pw pn) 
    | not (contains (P pw pn) n) = traverse1 g (g!n) (add (P pw pn) w n) ++ traverse1 g es (P pw pn)
    | n == head pn = [ add (P pw pn) w n] ++ traverse1 g es (P pw pn)
    | otherwise = traverse1 g es (P pw pn)
-- Extrahiert aus einer Liste an gegebenen Pfaden (Voraussetzung: Es sind Kreise) solche die ein Hamiltonkreis
-- sind. Herleitung: Alle Knoten eines Graphen haben gleichviele Knoten wie ein Pfad des Hamiltonkreises.
-- Aus Gründen der Logik schreiben wir allerdings nochmal den Startknoten als Endknoten in den Pfad, so dass
-- wir der Liste aller Knoten des Graphen den Startpunkt auch nochmal hinzufügen. Ist die Differenzmenge der beiden
-- Listen Null haben sie den gleichen Inhalt.
hamilton:: (Ix n) =>[Path n] -> Graph n -> [Path n]
hamilton [] g = []
hamilton (x:xs) g = if diff (path x) ((nodes g)++[(head (path x))]) then x:hamilton xs g else []++hamilton xs g
--Prüft ob die Differenzmenge zweier Mengen in beide Richtungen Null ist.
diff:: (Eq n)=>[n] -> [n] -> Bool
diff m n = null (m \\ n) && null (n \\ m)