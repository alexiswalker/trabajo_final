Author: OffrayLuna

ByteArray(Object)>>errorSubscriptBounds:
ByteArray(Object)>>at:
ByteArray(SequenceableCollection)>>replaceFrom:to:with:startingAt:
ByteArray>>replaceFrom:to:with:startingAt:
ByteArray(SequenceableCollection)>>copyFrom:to:
MultiByteBinaryOrTextStream(Stream)>>next:putAll:startingAt:
MultiByteBinaryOrTextStream(WriteStream)>>next:putAll:startingAt:
MultiByteBinaryOrTextStream>>next:putAll:startingAt:
[ [ readDataRemaining > 0 ]
	whileTrue: [ | chunkSize |
		chunkSize := 32768 min: readDataRemaining.
		buffer := decoder next: chunkSize into: buffer startingAt: 1.
		aStream next: chunkSize putAll: buffer startingAt: 1.
		readDataRemaining := readDataRemaining - chunkSize ] ] in ZipFileMember>>uncompressDataTo:
BlockClosure>>on:do:
ZipFileMember>>uncompressDataTo:
ZipFileMember(ZipArchiveMember)>>writeDataTo:
ZipFileMember(ZipArchiveMember)>>extractTo:
ZipFileMember(ZipArchiveMember)>>contentStreamFromEncoding:
[ (member contentStreamFromEncoding: 'utf8') text contents ] in MCMczReader>>contentsForMember:
BlockClosure>>on:do:
MCMczReader>>contentsForMember:
MCMczReader>>parseMember:
MCMczReader>>loadVersionInfo
MCMczReader(MCVersionReader)>>info
MCMczReader(MCVersionReader)>>basicVersion
MCMczReader(MCVersionReader)>>version
[ :r | r version ] in MCCacheRepository>>loadVersionFromFileNamed:
[ :s | 
(MCVersionReader readerClassForFileNamed: aString)
	ifNotNil: [ :class | aBlock value: (class on: s fileName: aString) ] ] in MCCacheRepository(MCFileBasedRepository)>>versionReaderForFileNamed:do:
[ :stream | val := aBlock value: stream ] in MCCacheRepository(MCDirectoryRepository)>>readStreamForFileNamed:do:
[ aBlock value: stream ] in FileReference(AbstractFileReference)>>readStreamDo:
BlockClosure>>ensure:
FileReference(AbstractFileReference)>>readStreamDo:
MCCacheRepository(MCDirectoryRepository)>>readStreamForFileNamed:do:
MCCacheRepository(MCFileBasedRepository)>>versionReaderForFileNamed:do:
MCCacheRepository>>loadVersionFromFileNamed:
MCSmalltalkhubRepository(MCFileBasedRepository)>>loadVersionFromFileNamed:
[ self loadVersionFromFileNamed: aFileName ] in MCSmalltalkhubRepository(MCFileBasedRepository)>>versionFromFileNamed:
Dictionary>>at:ifAbsent:
MCSmalltalkhubRepository(MCFileBasedRepository)>>versionFromFileNamed:
[ version := repository versionFromFileNamed: selectedVersion ] in MCFileRepositoryInspector>>version
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
MCFileRepositoryInspector>>version
MCFileRepositoryInspector(MCVersionInspector)>>versionSummary
MCFileRepositoryInspector(MCVersionInspector)>>summary
MCFileRepositoryInspector(Object)>>perform:withEnoughArguments:
RubPluggableTextMorph(RubScrolledTextMorph)>>getTextFromModel
RubPluggableTextMorph>>update:
[ :aDependent | aDependent update: aParameter ] in MCFileRepositoryInspector(Model)>>changed:
DependentsArray>>do:
MCFileRepositoryInspector(Model)>>changed:
MCFileRepositoryInspector>>versionSelection:
PluggableListMorph>>changeModelSelection:
PluggableListMorph>>mouseUpOnSingle:
PluggableListMorph>>mouseUp:
PluggableListMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess