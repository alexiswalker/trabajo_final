import System.IO
import Control.Monad
import Data.Array
import qualified Data.Vector.Unboxed as U
import qualified Data.Vector as V

maxtrucks = 99

data Solution = Solution (U.Vector Float) (U.Vector Float) (V.Vector (U.Vector Float)) -- weighs vols numberoftrucks x numberof boxes

check sol = (valid, delta)
  where
    valid = all ((<=100).(truckvol sol)) [0..maxtrucks]
    delta = maxw - minw
    maxw = maximum weights 
    minw = minimum weights
    weights = map (truckweight sol) [0.. maxtrucks]

truckvol (Solution ws vs d) i = dot (d V.! i) vs
truckweight (Solution ws vs d) i = dot (d V.! i) ws
    
dot v1 v2 = U.sum $ U.zipWith (*) v1 v2

greedy ws vs = undefined
  where
    
    zeros = Solution ws vs $ V.fromList $ map (\i -> U.fromList $ take ws $ cycle [0.0]) [0..maxtrucks]
    nboxes = U.length ws

main :: IO ()
main = do
    hSetBuffering stdout NoBuffering -- DO NOT REMOVE
    
    -- Auto-generated code below aims at helping you parse
    -- the standard input according to the problem statement.
    
    input_line <- getLine
    let boxcount = read input_line :: Int
    
    boxes <- replicateM boxcount $ do
        input_line <- getLine
        let input = words input_line
        let weight = read (input!!0) :: Float
        let volume = read (input!!1) :: Float
        return (weight, volume)
    let ws = U.fromList $ map fst boxes
    let vs = U.fromList $ map snd boxes
    -- hPutStrLn stderr "Debug messages..."
    
    -- Write action to stdout
    putStrLn "0 0 0 0 0 ..."
    return ()