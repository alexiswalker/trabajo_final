search :: Board -> [Board]
search board = if null result then [] else (prev result') ++ [(value result')]
	where
		result' = head result
		result  = search' [Node { value = board, prev = [] }] []

search' :: [Node] -> [Board] -> [Node]
search' level visited
	| null level            = []
	| (not . null) checkWin = checkWin
	| otherwise = search' nextLevel getVisited
	where
		checkWin  = filter (isWon . value) level
		nextLevel = filter (\i -> not $ elem (value i) visited) nextLevel
		nextLevel' = concatMap childNodes level
		getVisited = nub $ visited ++ (map (value) nextLevel)

childNodes :: Node -> [Node]
childNodes n = map (\i -> Node {value=i, prev=getPrev}) $ childBoards $ value n
	where
		getPrev = (prev n) ++ [value n]