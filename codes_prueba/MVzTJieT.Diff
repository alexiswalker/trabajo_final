diff --git a/src/corelib/thread/qmutex_p.h b/src/corelib/thread/qmutex_p.h
index a9923c4..8828ba0 100644
--- a/src/corelib/thread/qmutex_p.h
+++ b/src/corelib/thread/qmutex_p.h
@@ -83,7 +83,7 @@ public:
     Qt::HANDLE owner;
     uint count;
 
-#if defined(Q_OS_MAC)
+#if 0 // defined(Q_OS_MAC)
     semaphore_t mach_semaphore;
 #elif defined(Q_OS_UNIX) && !defined(Q_OS_LINUX) && !defined(Q_OS_SYMBIAN)
     volatile bool wakeup;
diff --git a/src/corelib/thread/qmutex_unix.cpp b/src/corelib/thread/qmutex_unix.cpp
index 2a9d23c..4325a24 100644
--- a/src/corelib/thread/qmutex_unix.cpp
+++ b/src/corelib/thread/qmutex_unix.cpp
@@ -65,7 +65,7 @@
 
 QT_BEGIN_NAMESPACE
 
-#if !defined(Q_OS_MAC) && !defined(Q_OS_LINUX)
+#if !defined(Q_OS_LINUX) // && !defined(Q_OS_MAC)
 static void report_error(int code, const char *where, const char *what)
 {
     if (code != 0)
@@ -77,7 +77,7 @@ static void report_error(int code, const char *where, const char *what)
 QMutexPrivate::QMutexPrivate(QMutex::RecursionMode mode)
     : QMutexData(mode), maximumSpinTime(MaximumSpinTimeThreshold), averageWaitTime(0), owner(0), count(0)
 {
-#if defined(Q_OS_MAC)
+#if 0 // defined(Q_OS_MAC)
     kern_return_t r = semaphore_create(mach_task_self(), &mach_semaphore, SYNC_POLICY_FIFO, 0);
     if (r != KERN_SUCCESS)
         qWarning("QMutex: failed to create semaphore, error %d", r);
@@ -90,7 +90,7 @@ QMutexPrivate::QMutexPrivate(QMutex::RecursionMode mode)
 
 QMutexPrivate::~QMutexPrivate()
 {
-#if defined(Q_OS_MAC)
+#if 0 // defined(Q_OS_MAC)
     kern_return_t r = semaphore_destroy(mach_task_self(), mach_semaphore);
     if (r != KERN_SUCCESS)
         qWarning("QMutex: failed to destroy semaphore, error %d", r);
@@ -100,7 +100,7 @@ QMutexPrivate::~QMutexPrivate()
 #endif
 }
 
-#if defined(Q_OS_MAC)
+#if 0 // defined(Q_OS_MAC)
 
 bool QMutexPrivate::wait(int timeout)
 {