(defn edit-distance [str1 str2]
  ;; Dynamic programming solution
  (defn ed- [i j]
    (cond
      ;; Base Cases
      (zero? i) j 
      (zero? j) i
      ;; Recursion
      :else (let [a (inc (ed- (dec i) j))  ;; Delete
                  b (inc (ed- i (dec j)))  ;; Insert (i.e. delete from str2)
                  c (ed- (dec i) (dec j))] ;; Replace
              (if (= (nth str1 i) (nth str2 j))
                (min a b c)
                (min a b (inc c))))))
  ;; Memoized version
  (def ed (memoize ed-))
  ;; Compute bottom-up
  (last
    (for [i (range (count str1))
          j (range (count str2))]
     (ed i j))))