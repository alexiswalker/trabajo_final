Spell/Paladin: Replenishment or Judgements of the Wise or Judgements of the Bold

diff -r aaff5adc66fd -r e1ca9649895e src/server/game/Spells/Auras/SpellAuraEffects.cpp
--- a/src/server/game/Spells/Auras/SpellAuraEffects.cpp	Thu Sep 15 15:49:24 2011 +0400
+++ b/src/server/game/Spells/Auras/SpellAuraEffects.cpp	Fri Sep 16 14:29:17 2011 +0400
@@ -728,15 +728,8 @@
             }
             break;
         case SPELL_AURA_PERIODIC_ENERGIZE:
-            if (GetSpellProto()->SpellFamilyName == SPELLFAMILY_GENERIC)
-            {
-                // Replenishment (0.25% from max)
-                // Infinite Replenishment
-                if (m_spellProto->SpellIconID == 3184 && m_spellProto->SpellVisual[0] == 12495)
-                    amount = GetBase()->GetUnitOwner()->GetMaxPower(POWER_MANA) * 25 / 10000;
-            }
-            // Innervate
-            else if (m_spellProto->Id == 29166)
+            // Innervate or Replenishment or Judgements of the Wise or Judgements of the Bold
+            if (m_spellProto->Id == 29166 || m_spellProto->Id == 57669 || (m_spellProto->SpellIconID == 3017 && m_spellProto->SpellVisual[0] == 11906))
                 amount = int32(GetBase()->GetUnitOwner()->GetCreatePowers(POWER_MANA) * amount / (GetTotalTicks() * 100.0f));
             // Owlkin Frenzy
             else if (m_spellProto->Id == 48391)
diff -r aaff5adc66fd -r e1ca9649895e src/server/game/Spells/SpellEffects.cpp
--- a/src/server/game/Spells/SpellEffects.cpp	Thu Sep 15 15:49:24 2011 +0400
+++ b/src/server/game/Spells/SpellEffects.cpp	Fri Sep 16 14:29:17 2011 +0400
@@ -5994,77 +5994,18 @@
         }
         case SPELLFAMILY_PALADIN:
         {
-            // Judgement (seal trigger)
-            if (m_spellInfo->Category == SPELLCATEGORY_JUDGEMENT)
+            switch (m_spellInfo->Id)
             {
-                if (!unitTarget || !unitTarget->isAlive())
-                    return;
-                uint32 spellId1 = 0;
-                uint32 spellId2 = 0;
-                uint32 spellId3 = 0;
-
-                // Judgement self add switch
-                switch (m_spellInfo->Id)
-                {
-                    case 53407: spellId1 = 20184; break;    // Judgement of Justice
-                    case 20271:                             // Judgement of Light
-                    case 57774: spellId1 = 20185; break;    // Judgement of Light
-                    case 53408: spellId1 = 20186; break;    // Judgement of Wisdom
-                    default:
-                        sLog->outError("Unsupported Judgement (seal trigger) spell (Id: %u) in Spell::EffectScriptEffect", m_spellInfo->Id);
-                        return;
-                }
-                // all seals have aura dummy in 2 effect
-                Unit::AuraApplicationMap & sealAuras = m_caster->GetAppliedAuras();
-                for (Unit::AuraApplicationMap::iterator iter = sealAuras.begin(); iter != sealAuras.end();)
-                {
-                    switch (iter->first)
-                    {
-                        // Heart of the Crusader
-                        case 20335: // Rank 1
-                            spellId3 = 21183;
-                            break;
-                        case 20336: // Rank 2
-                            spellId3 = 54498;
-                            break;
-                        case 20337: // Rank 3
-                            spellId3 = 54499;
-                            break;
-                    }
-                    Aura * aura = iter->second->GetBase();
-                    if (IsSealSpell(aura->GetSpellProto()))
-                    {
-                        if (AuraEffect * aureff = aura->GetEffect(2))
-                            if (aureff->GetAuraType() == SPELL_AURA_DUMMY)
-                            {
-                                if (sSpellStore.LookupEntry(aureff->GetAmount()))
-                                    spellId2 = aureff->GetAmount();
-                                break;
-                            }
-                        if (!spellId2)
-                        {
-                            switch (iter->first)
-                            {
-                                // Seal of light, Seal of wisdom, Seal of justice
-                                case 20165:
-                                case 20166:
-                                case 20164:
-                                    spellId2 = 54158;
-                            }
-                        }
-                        break;
-                    }
-                    else
-                        ++iter;
-                }
-                if (spellId1)
-                    m_caster->CastSpell(unitTarget, spellId1, true);
-                if (spellId2)
-                    m_caster->CastSpell(unitTarget, spellId2, true);
-                if (spellId3)
-                    m_caster->CastSpell(unitTarget, spellId3, true);
-                return;
+                case 20271:
+                    if (m_caster && m_caster->HasAura(89901))
+                        m_caster->CastSpell(m_caster, 89906, true);
+                    if (m_caster && m_caster->HasAura(31878))
+                        m_caster->CastSpell(m_caster, 31930, true);
+                    if (m_caster && m_caster->HasAura(31876))
+                        m_caster->CastSpell(m_caster, 57669, true);
+                    break;
             }
+            break;
         }
         case SPELLFAMILY_HUNTER:
         {
diff -r aaff5adc66fd -r e1ca9649895e src/server/game/Spells/SpellMgr.cpp
--- a/src/server/game/Spells/SpellMgr.cpp	Thu Sep 15 15:49:24 2011 +0400
+++ b/src/server/game/Spells/SpellMgr.cpp	Fri Sep 16 14:29:17 2011 +0400
@@ -4434,6 +4434,13 @@
             spellInfo->EffectApplyAuraName[0] = SPELL_AURA_PERIODIC_LEECH;
             count++;
             break;
+        case 89901:
+            spellInfo->procFlags = 0;
+            count++;
+            break;
+        case 57669:
+            spellInfo->EffectAmplitude[0] = 10000;
+            break;
         default:
             break;
         }