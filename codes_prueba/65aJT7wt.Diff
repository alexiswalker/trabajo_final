#3015426 main() function disappears after adding second project.

diff -r dabad893d55f -r d78e7873c3ea CodeLite/istorage.h
--- a/CodeLite/istorage.h	Sun Sep 11 13:34:11 2011 +0300
+++ b/CodeLite/istorage.h	Mon Sep 12 20:17:40 2011 +0300
@@ -251,7 +251,7 @@
 	 * @param path
 	 * @return TagOk or TagError
 	 */
-	virtual int DeleteTagEntry ( const wxString &kind, const wxString &signature, const wxString &path ) = 0;
+	virtual int DeleteTagEntry ( const wxString &kind, const wxString &signature, const wxString &path, const wxString &file ) = 0;
 
 	/**
 	 * Return a result set of tags according to file name.
diff -r dabad893d55f -r d78e7873c3ea CodeLite/parse_thread.cpp
--- a/CodeLite/parse_thread.cpp	Sun Sep 11 13:34:11 2011 +0300
+++ b/CodeLite/parse_thread.cpp	Mon Sep 12 20:17:40 2011 +0300
@@ -260,7 +260,7 @@
 
 	// remove all the 'deleted' items from the database
 	for (i=0; i<deletedItems.size(); i++) {
-		m_pDb->DeleteTagEntry(deletedItems[i].second.GetKind(), deletedItems[i].second.GetSignature(), deletedItems[i].second.GetPath());
+		m_pDb->DeleteTagEntry(deletedItems[i].second.GetKind(), deletedItems[i].second.GetSignature(), deletedItems[i].second.GetPath(), deletedItems[i].second.GetFile());
 	}
 
 	// insert all new items to database
diff -r dabad893d55f -r d78e7873c3ea CodeLite/tags_storage_sqlite3.cpp
--- a/CodeLite/tags_storage_sqlite3.cpp	Sun Sep 11 13:34:11 2011 +0300
+++ b/CodeLite/tags_storage_sqlite3.cpp	Mon Sep 12 20:17:40 2011 +0300
@@ -123,7 +123,7 @@
 		m_db->ExecuteUpdate(sql);
 
 		// Create unique index on tags table
-		sql = wxT("CREATE UNIQUE INDEX IF NOT EXISTS TAGS_UNIQ on tags(kind, path, signature);");
+		sql = wxT("CREATE UNIQUE INDEX IF NOT EXISTS TAGS_UNIQ on tags(kind, path, signature, file);");
 		m_db->ExecuteUpdate(sql);
 
 		sql = wxT("CREATE INDEX IF NOT EXISTS KIND_IDX on tags(kind);");
@@ -826,15 +826,16 @@
 	return TagOk;
 }
 
-int TagsStorageSQLite::DeleteTagEntry(const wxString& kind, const wxString& signature, const wxString& path)
+int TagsStorageSQLite::DeleteTagEntry(const wxString& kind, const wxString& signature, const wxString& path, const wxString& file)
 {
 	// Delete this record from database.
 	// Delete is done using the index
 	try {
-		wxSQLite3Statement statement = m_db->GetPrepareStatement(wxT("DELETE FROM TAGS WHERE Kind=? AND Signature=? AND Path=?"));
+		wxSQLite3Statement statement = m_db->GetPrepareStatement(wxT("DELETE FROM TAGS WHERE Kind=? AND Signature=? AND Path=? AND File=?"));
 		statement.Bind(1, kind);        // Kind
 		statement.Bind(2, signature);   // Signature
 		statement.Bind(3, path);        // Path
+		statement.Bind(4, file);        // Path
 		statement.ExecuteUpdate();
 	} catch (wxSQLite3Exception& exc) {
 		wxUnusedVar(exc);
@@ -881,7 +882,7 @@
 		return TagOk;
 
 	try {
-		wxSQLite3Statement statement = m_db->GetPrepareStatement(wxT("UPDATE OR REPLACE TAGS SET Name=?, File=?, Line=?, Access=?, Pattern=?, Parent=?, Inherits=?, Typeref=?, Scope=?, Return_Value=? WHERE Kind=? AND Signature=? AND Path=?"));
+		wxSQLite3Statement statement = m_db->GetPrepareStatement(wxT("UPDATE OR REPLACE TAGS SET Name=?, File=?, Line=?, Access=?, Pattern=?, Parent=?, Inherits=?, Typeref=?, Scope=?, Return_Value=? WHERE Kind=? AND Signature=? AND Path=? AND File=?"));
 		// update
 		statement.Bind(1,  tag.GetName());
 		statement.Bind(2,  tag.GetFile());
@@ -898,6 +899,7 @@
 		statement.Bind(11, tag.GetKind());
 		statement.Bind(12, tag.GetSignature());
 		statement.Bind(13, tag.GetPath());
+		statement.Bind(14, tag.GetFile());
 
 		statement.ExecuteUpdate();
 	} catch (wxSQLite3Exception& exc) {
diff -r dabad893d55f -r d78e7873c3ea CodeLite/tags_storage_sqlite3.h
--- a/CodeLite/tags_storage_sqlite3.h	Sun Sep 11 13:34:11 2011 +0300
+++ b/CodeLite/tags_storage_sqlite3.h	Mon Sep 12 20:17:40 2011 +0300
@@ -33,7 +33,7 @@
 #include <wx/wxsqlite3.h>
 #include "codelite_exports.h"
 
-const wxString gTagsDatabaseVersion(wxT("CodeLite Version 2.9"));
+const wxString gTagsDatabaseVersion(wxT("CodeLite Version 2.10"));
 
 /**
  * TagsDatabase is a wrapper around wxSQLite3 database with tags specific functions.
@@ -503,7 +503,7 @@
 	 * @param path
 	 * @return TagOk or TagError
 	 */
-	virtual int DeleteTagEntry ( const wxString &kind, const wxString &signature, const wxString &path );
+	virtual int DeleteTagEntry ( const wxString &kind, const wxString &signature, const wxString &path, const wxString &file );
 
 	/**
 	 * @brief return true if type exist under a given scope.

diff -r d78e7873c3ea -r 9eee87b498b0 CodeLite/language.cpp
--- a/CodeLite/language.cpp	Mon Sep 12 20:17:40 2011 +0300
+++ b/CodeLite/language.cpp	Sat Sep 17 16:10:13 2011 +0300
@@ -1058,8 +1058,6 @@
 			// (they can be mixed). If all entries are of one of these types, test their return value,
 			// if all have the same return value, then we are ok
 			clFunction foo;
-			int        classMatches (0);
-			size_t     classMatchIdx(0);
 
 			for (size_t i=0; i<tags.size(); i++) {
 				TagEntryPtr tag(tags.at(i));
@@ -1075,26 +1073,58 @@
 			}
 
 			// Dont give up yet!
-			// If in the list of matches there is a single entry of type class
-			// use it as our match
+			// If in the list of matches there is at least one struct or class return it
+			int foundIndex = -1;
 			for (size_t i=0; i<tags.size(); i++) {
 				if(tags.at(i)->IsClass() || tags.at(i)->IsStruct()) {
-					classMatches++;
-					classMatchIdx = i;
+					foundIndex = i;
+					break;
 				}
 			}
 
-			if(classMatches == 1) {
-				TagEntryPtr tag = tags.at(classMatchIdx);
-				tags.clear();
-				tags.push_back( tag );
-
-				type      = tag->GetName();
-				typeScope = tag->GetScopeName();
+			// If in the list of matches there is at least one namespace return it
+			if (foundIndex < 0) {
+				for (size_t i=0; i<tags.size(); i++) {
+					if (tags.at(i)->GetKind().IsSameAs(_("namespace"))) {
+						foundIndex = i;
+						break;
+					}
+				}
+			}
+			if (foundIndex < 0) {
+				Variable var;
+				wxString oldType;
+				wxString oldTypeScope;
+				for (size_t i = 0; i < tags.size(); i++) {
+					if (
+						(tags[i]->GetKind() != wxT("member") && tags[i]->GetKind() != wxT("variable")) ||
+						!VariableFromPattern(tags[i]->GetPattern(), tags[i]->GetName(), var)
+					) {
+						return false;
+					}
+					type = _U(var.m_type.c_str());
+					typeScope = var.m_typeScope.empty() ? wxT("<global>") : _U(var.m_typeScope.c_str());					
+					if (i == 0) {
+						oldType = type;
+						oldTypeScope = typeScope;
+					}
+					if (!oldType.IsSameAs(type) || !oldTypeScope.IsSameAs(typeScope)) {
+						return false;
+					}
+					oldType = type;
+					oldTypeScope = typeScope;
+				}
 				return true;
 			}
-
-			return false;
+			if (foundIndex < 0) {
+				return false;
+			}
+			TagEntryPtr tag = tags.at(foundIndex);
+			tags.clear();
+			tags.push_back( tag );
+			type      = tag->GetName();
+			typeScope = tag->GetScopeName();
+			return true;
 		}
 	}
 	return false;