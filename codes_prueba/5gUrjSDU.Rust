enum SearchResult {
	Found(usize),
	NotFound,
}

struct Graph<'a, T: 'a> 
where 
T: std::fmt::Display,
T: std::fmt::Debug
{
	nodes: Vec<&'a T>,
	matrix: Vec<Vec<i64>>,
	size: u64
}

impl <'a, T: 'a> Graph<'a, T> 
where 
T: std::fmt::Display,
T: std::fmt::Debug
{
	fn new() -> Graph<'a, T> {
		Graph {
			nodes: Vec::new(),
			matrix: Vec::new(),
			size: 0
		}
	}
	
	fn add_node(&mut self, node: &'a T) {
		let contains = vector_contains(&self.nodes, &node);
		if !(contains) {
			self.nodes.push(node);
			let mut new_vec = Vec::<i64>::new();
			for _ in 0..self.size {
				new_vec.push(-1)
			}
			self.matrix.push(new_vec);
			for row in &mut self.matrix {
				row.push(-1);
			}
			self.size += 1;
		}
	}

	fn add_edge(&mut self, node1: &'a T, node2: &'a T, weight: i64) {	
		use SearchResult::Found;
		let res1 = vector_index_of(&self.nodes, &node1);
		let res2 = vector_index_of(&self.nodes, &node2);
		match (res1, res2) {
			(Found(index1), Found(index2)) => {
				if index1 != index2 {
					self.matrix[index1][index2] = weight;
					self.matrix[index2][index1] = weight;
				}
			},
			(_, _) => {}
		}
	}

	fn print(&self) {
		println!("nodes = {:?}", self.nodes);
	}
}

fn vector_index_of<T>(vec: &Vec<T>, item: &T) -> SearchResult {
	use SearchResult::{Found, NotFound};
	let mut index = 0;
	for elem in vec {
		if elem as *const T == item as *const T {
			return Found(index);
		}
		index += 1;
	}
	NotFound
}

fn vector_contains<T>(vec: &Vec<T>, item: &T) -> bool {
	for elem in vec {
		if elem as *const T == item as *const T {
			return true;
		}
	}
	false
}

fn main() {
	let a = String::from("a");
	let b = String::from("b");
	let c = String::from("c");

	let mut graph = Graph::<String>::new();

	graph.add_node(&a);
	graph.add_node(&b);
	graph.add_node(&c);

	graph.add_edge(&a, &b, 2);
	graph.add_edge(&b, &c, 1);

	graph.print();
}