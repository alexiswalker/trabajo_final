def bfs(s): #Обход в ширину
    global c, g, b, k
    c[s] = 1
    q = [s]
    while q:
        v = q.pop(0) 
        for j in g[v]:
            if c[j] == 0:
                c[j] = 1
                q.append(j)
                k[s].append(j + 1) #Если вершина пройдена, то она добавляется к списку связности вершины S


n = int(input())
m = int(input())
g = []
for i in range(n):
    g.append([])
for i in range(m):
    u, v = map(int, input().split())
    g[u - 1].append(v - 1)
    g[v - 1].append(u - 1) #Создали массив графа
k = []
for i in range(n):
    k.append([i + 1]) #Массив связности вершин, где каждая вершина уже связана с собой
for i in range(n):
    c = [0] * n
    bfs(i)
Q = int(input())
for i in range(Q):
    a, b = map(int, input().split())
    if b in k[a - 1]:
        print("YES")
    else:
        print("NO") #Если вторая вершина находится в списке связности первой, то они связаны, если нет, то не связаны