diff --git a/client/src/game.c b/client/src/game.c
index 32f6d36..ac9f6b1 100644
--- a/client/src/game.c
+++ b/client/src/game.c
@@ -1,3 +1,4 @@
+
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
@@ -7,9 +8,9 @@
 
 
 static game_t * current_game = NULL;
-static uint_t game_dim [] = { 48, 48, 16 }; // in blocks (16-multiples only)
+static uint_t game_dim [] = { 128, 48, 128  }; // in blocks (16-multiples only)
 
-vector3_t game_gravity_vector = { 0.0, 0.0, -5.0 };
+vector3_t game_gravity_vector = { 0.0, 0.0, 0.0 };
 
 
 game_t * game_new ()
@@ -65,6 +66,7 @@ void game_init_map (game_t * game)
 
     map = map_new (start, dim);
 
+    /*
     for (coord [0] = 0; coord [0] < game_dim [0]; coord [0]++)
     {
         for (coord [1] = 0; coord [1] < game_dim [1]; coord [1]++)
@@ -79,6 +81,7 @@ void game_init_map (game_t * game)
             }
         }
     }
+    */
 
     game -> current_map = map;
 }
@@ -87,7 +90,7 @@ void game_init_map (game_t * game)
 /* Create a local player */
 void game_init_player (game_t * game)
 {
-    vector3_t pos = { 20, 20, 13 };
+    vector3_t pos = { 40, 40, 50 };
     vector3_t dir = { 0, 1, 0 };
 
     game -> current_player = player_new ("Player", pos, dir);
@@ -194,7 +197,7 @@ void game_local_forward (float_t delta_time)
     }
 
     /* FIXME temporary, recenter player */
-    uint_t axis;
+    /*uint_t axis;
     for (axis = 0; axis < 2; ++axis) // Ignore Z for now because dim [2] == 16
     {
         if (position_after [axis] >= SUPERBLOCK_SIZE*2)
@@ -210,10 +213,9 @@ void game_local_forward (float_t delta_time)
             position_after [axis] += SUPERBLOCK_SIZE;
         }
     }
-
+    */
     /* We move the player to his new position */
     vector3_copy (position_after, player -> position);
-
 }
 
 
diff --git a/client/src/main.c b/client/src/main.c
index 3bd0f76..7db9dca 100644
--- a/client/src/main.c
+++ b/client/src/main.c
@@ -4,12 +4,43 @@
 
 #include "main.h"
 
+#include <libguile.h>
 
 void init_game ()
 {
+    
     game_set (game_new ());
 }
 
+static SCM add_block (SCM x, SCM y, SCM z)
+{
+    map_t *map = game_map_get();
+    int64_t coord [3];
+    coord[0] = scm_to_int (x);
+    coord[1] = scm_to_int (y);
+    coord[2] = scm_to_int (z);
+
+    block_t block;
+    block . data = 0;
+    block . type = ground;
+    map_block_set (map, coord, &block);
+
+    return SCM_UNSPECIFIED;
+}
+
+static SCM glut_main_loop_event()
+{
+    glutMainLoopEvent();
+    
+    return SCM_UNSPECIFIED;
+}
+
+static void* register_functions (void* data)
+{
+    scm_c_define_gsubr ("add-block", 3, 0, 0, &add_block);
+    scm_c_define_gsubr ("glut-main-loop-event", 0, 0, 0, &glut_main_loop_event);
+    return 0;
+}
 
 /* Main which starts and sets up the application */
 int main (int argc, char ** argv)
@@ -18,7 +49,9 @@ int main (int argc, char ** argv)
     draw_init (argc, argv);
 
     /* Start the application */
-    glutMainLoop ();
+    //glutMainLoop ();
+    scm_with_guile (&register_functions, NULL);
+    scm_shell (argc, argv);
 
     return 0;
 }
diff --git a/init.scm b/init.scm
new file mode 100644
index 0000000..9904b74
--- /dev/null
+++ b/init.scm
@@ -0,0 +1,4 @@
+(define (main-loop)
+  (begin
+    (glut-main-loop-event)
+    (main-loop)))
diff --git a/sierpinski.scm b/sierpinski.scm
new file mode 100644
index 0000000..f7ad41d
--- /dev/null
+++ b/sierpinski.scm
@@ -0,0 +1,54 @@
+;; (define (sierpinski x y n)
+;;   (if (>= n 0)
+;;       (begin
+;;         (add-block (real->integer (* x 10)) 10 (real->integer (* y 10)))
+;;         (glut-main-loop-event)
+;;         (case (random 3)
+;;           ((0) (sierpinski (+ x 0.5) (+ y 0.5) (- n 1)))
+;;           ((1) (sierpinski (+ (/ x 2) 0.25) (+ (/ y 2) (/ (sqrt 3) 4)) (- n 1)))
+;;           ((2) (sierpinski (+ (/ x 2) 0.5) (/ y 2) (- n 1)))))))
+
+(define (sierpinski xa xb n)
+  (if (>= n 0)
+      (begin
+        (let* ((height (* (- xb xa) (/ (sqrt 3) 2)))
+               (x (random-bounded xa xb))
+               (y (random (height-in-triangle (- x xa) (- xb xa) height)))
+               (vertex (case (random 3)
+                         ((0) (cons xa 0)) ; bottom-left vertex
+                         ((1) (cons xb 0)) ; bottom-right vertex
+                         ((2) (cons (middle xa xb) height)))) ; top vertex
+               (point (middle-point (cons x y) vertex)))
+          (add-block (real->integer (car point)) 0 (real->integer (cdr point))))
+        (sierpinski xa xb (- n 1)))))
+
+; Height of the point with the specified x coordinate on the isosceles
+; triangle with the specified base-length and height of the top vertex top-height
+; with origin at (0, 0)
+(define (height-in-triangle x base-length top-height)
+  (let ((factor (/ top-height (/ base-length 2))) ; multiply the x coordinate of a point in the
+                                                 ; first half of the triangle by this to get its height
+        (offset (- x (/ base-length 2))))
+    (if (<= offset 0)
+        (* x factor)
+        (* (- x (* offset 2)) factor))))
+         
+
+(define (middle-point a b)
+  (let ((xa (car a))
+        (xb (car b))
+        (ya (cdr a))
+        (yb (cdr b)))
+    (cons (/ (+ xa xb) 2) (/ (+ ya yb) 2))))
+
+(define (square x)
+  (integer-expt x 2))
+
+(define (middle a b)
+  (/ (+ a b) 2))
+
+(define (random-bounded a b)
+  (+ a (random (- b a))))
+
+(define (real->integer x)
+  (floor (inexact->exact x)))
\ No newline at end of file