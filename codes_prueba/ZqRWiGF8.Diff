diff --git a/core/modules/media/config/schema/media.schema.yml b/core/modules/media/config/schema/media.schema.yml
index f4b8a8c235..14b56df7a5 100644
--- a/core/modules/media/config/schema/media.schema.yml
+++ b/core/modules/media/config/schema/media.schema.yml
@@ -50,6 +50,9 @@ field.formatter.settings.oembed:
     max_height:
       type: integer
       label: 'Maximum height'
+    allowed_html_tags:
+      type: string
+      label: 'Allowed HTML tags'

 field.widget.settings.oembed_textfield:
   type: field.widget.settings.string_textfield
diff --git a/core/modules/media/src/Plugin/Field/FieldFormatter/OEmbedFormatter.php b/core/modules/media/src/Plugin/Field/FieldFormatter/OEmbedFormatter.php
@@ -107,6 +107,7 @@ public static function defaultSettings() {
     return [
       'max_width' => 0,
       'max_height' => 0,
+      'allowed_html_tags' => '',
     ] + parent::defaultSettings();
   }

@@ -151,9 +152,11 @@ public function viewElements(FieldItemListInterface $items, $langcode) {

         case 'video':
         case 'rich':
+          $tags = explode(',', $this->getSetting('allowed_html_tags'));
+          $tags = array_map('trim', $tags);
           $element[$delta] = [
             '#type' => 'inline_template',
-            '#template' => (string) $resource['html'],
+            '#template' => Xss::filter((string) $resource['html'], array_merge($tags, Xss::getHtmlTagList())),
           ];
           break;

@@ -189,6 +192,11 @@ public function settingsForm(array $form, FormStateInterface $form_state) {
         '#field_suffix' => $this->t('pixels'),
         '#min' => 0,
       ],
+      'allowed_html_tags' => [
+        '#type' => 'textfield',
+        '#title' => $this->t('Allowed HTML tags'),
+        '#default_value' => $this->getSetting('allowed_html_tags'),
+      ],
     ];
   }

@@ -213,6 +221,11 @@ public function settingsSummary() {
         '%max_height' => $this->getSetting('max_height'),
       ]);
     }
+    if ($this->getSetting('allowed_html_tags')) {
+      $summary[] = $this->t('Allowed HTML tags: %tags', [
+        '%tags' => $this->getSetting('allowed_html_tags'),
+      ]);
+    }
     return $summary;
   }

diff --git a/core/modules/media/src/Plugin/media/Source/OEmbed.php b/core/modules/media/src/Plugin/media/Source/OEmbed.php
@@ -315,6 +315,9 @@ public function getSourceFieldConstraints() {
   public function prepareViewDisplay(MediaTypeInterface $type, EntityViewDisplayInterface $display) {
     $display->setComponent($this->getSourceFieldDefinition($type)->getName(), [
       'type' => 'oembed',
+      'settings' => [
+        'allowed_html_tags' => $this->configuration['allowed_html_tags'],
+      ],
     ]);
   }

diff --git a/core/modules/media/src/Plugin/media/Source/OEmbedDeriver.php b/core/modules/media/src/Plugin/media/Source/OEmbedDeriver.php
index 00aa966b89..b3bf94e882 100644
--- a/core/modules/media/src/Plugin/media/Source/OEmbedDeriver.php
+++ b/core/modules/media/src/Plugin/media/Source/OEmbedDeriver.php
@@ -19,8 +19,8 @@ public function getDerivativeDefinitions($base_plugin_definition) {
         'label' => t('Remote video'),
         'description' => t('Use remote video URL for reusable media.'),
         'supported_providers' => ['YouTube', 'Vimeo'],
-        'settings' => [],
         'default_thumbnail_filename' => 'video.png',
+        'allowed_html_tags' => 'iframe',
       ] + $base_plugin_definition,
     ];
     return parent::getDerivativeDefinitions($base_plugin_definition);