//степенная функция
class PowerFunction : Function
    {
        private double _a;
        private double _b;
        public PowerFunction(List<double> valuesOfX, List<double> valuesOfY)
        {
            
            CountCoefficients(valuesOfX, valuesOfY);
        }
        public void CountCoefficients(List<double> valuesOfX, List<double> valuesOfY)
        {
            int n = valuesOfX.Count;
            double sumOfLnX = 0;
            double sumOfLnY = 0;
            double sumOfLnXLnY = 0;
            double sumOfLnXLnX = 0;
            foreach (double x in valuesOfX)
            {
                if (x <= 0) throw new ArgumentException("Значения x должны соответствовать ОДЗ функции (x>0)");
                sumOfLnX += Math.Log(x);
            }
            foreach (double y in valuesOfY)
            {
                if (y <= 0) throw new ArgumentException("Значения y должны соответствовать области значений функции (y > 0)");
                sumOfLnY += Math.Log(y);
            }
            foreach (double x in valuesOfX) sumOfLnXLnX += Math.Log(x) * Math.Log(x);
            for (int i = 0; i < n; i++) sumOfLnXLnY += Math.Log(valuesOfX[i]) * Math.Log(valuesOfY[i]);
            _b = (n * sumOfLnXLnY - sumOfLnY * sumOfLnX) / (n * sumOfLnXLnX - sumOfLnX * sumOfLnX);
            _a = Math.Exp(sumOfLnY / n - _b / n * sumOfLnX);
        }
        public double ValueInX(double x)
        {
            return _a * Math.Pow(x, _b);
        }
        public string FunctionString
        {
            get { return "y=" + _a + "*x^" + _b; }
        }
        public object Clone()
        {
            return this.MemberwiseClone();
        }
    }