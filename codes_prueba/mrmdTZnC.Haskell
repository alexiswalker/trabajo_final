
-- *** Section 3. Reduction Strategy ***

repeat' :: a -> [a]
repeat' x = xs where xs = x:xs

take' :: Int -> [a] -> [a]
take' _ [] = []
take' n (x:t) 
         | n<=0      = []
         | otherwise = x : take' (n - 1) t


-- *** Exercise 1 - Practice 5 *** 

decBin :: Int -> [Int]
decBin x = if x < 2 then [x]
           else (x `mod` 2) : decBin (x `div` 2)

-- example:
-- decBin 4 ==> [0,0,1]


-- *** Exercise 2 - Practice 5 *** 

binDec :: [Int] -> Int
binDec (x:[]) = x
binDec (x:y)  = x + binDec y * 2

-- example:
-- binDec [0,1,1] ==> 6


-- *** Exercise 3 - Practice 5 *** 

divisors :: Int -> [Int]
divisors x = [i|i <- [1..x], mod x i == 0]

-- *** Exercise 4 - Practice 5 *** 

member :: Int -> [Int] -> Bool
member x ys = x == head [i|i <- ys, i == x]

member' :: Int -> [Int] -> Bool
member' x ys
  | ys == [] = False
  | x == head ys = True
  | x /= head ys = member' x (tail ys)
  
  
-- examples: map
-- member 1 [1,2,3,4,8,9] ==> True
-- member 0 [1,2,3,4,8,9] ==> False

-- *** Exercise 5 - Practice 5 *** 

isPrime :: Int -> Bool
isPrime x
  |x == 1 = True
  |divisors x == [1,x] = True
  |otherwise = False

primes :: Int -> [Int]
primes x = take x [i|i<- [1..], isPrime i]

-- examples: Prime 2 ==> True
-- primes 5  ==> [1,2,3,5,7]

-- *** Exercise 6 - Practice 5 *** 

selectEven :: [Int] -> [Int]
selectEven x = [i|i <- x, mod i 2 == 0]
-- example: 
-- selectEven [1,2,4,5,8,9,10] ==> [2,4,8,10]

-- *** Exercise 7 - Practice 5 *** 

selectEvenPos :: [Int] -> [Int]
selectEvenPos x = [x!!j|j <- [0..length x-1], mod j 2 == 0]
-- example: 
-- selectEvenPos [1,2,4,5,8,9,10] ==> [1,4,8,10]




ins :: Int -> [Int] -> [Int]
ins x (y:ys)
  | x < y = (x:(y:ys))
  | x > y && ys == [] = (y:(x:ys))
  | x > y && x < head ys = (y:(x:ys))
  | otherwise = (y:[]) ++ ins x ys

iSort :: [Int] -> [Int]
iSort (x:[]) = ins x []
iSort (x:xs) = ins x xs ++ iSort xs

-- example: 
-- iSort [4,9,1,3,6,8,7,0] ==> [0,1,3,4,6,7,8,9]
-- ins 5 [0,1,3,4,6,7,8,9] ==> [0,1,3,4,5,6,7,8,9]

doubleAll :: [Int] -> [Int]
doubleAll x = map (2*) x



map' :: (a -> b) -> [a] -> [b]
map' f x = [f i | i <- x]



filter' :: (a -> Bool) -> [a] -> [a]
filter' f x = [i | i <- x, f i] 


-- *** Exercise 11 - Practice 5 *** 

type Person = String
type Book = String
type Database = [(Person, Book)]

exampleBase :: Database
exampleBase = [("Alicia", "El nombre de la rosa"), 
               ("Juan", "La hija del canibal"), 
               ("Pepe", "Odesa"), 
               ("Alicia", "La ciudad de las bestias")]

obtain :: Database -> Person -> [Book]
obtain dBase thisPerson
 = [book | (person,book) <- dBase, person == thisPerson]


borrow :: Database -> Book -> Person -> Database
borrow d b p = d ++ [(p, b)]

equalsTupla :: (String, String) -> (String, String) -> Bool
equalsTupla (x,y) (a, b) = x == a && y == b

return' :: Database -> (Person,Book) -> Database
return' d pb = [i|i <- d, not (equalsTupla pb i)]



-- *** Section 5.3. Trees ***
data Tree a = Leaf a | Branch (Tree a) (Tree a) deriving Show

-- *** Exercise 12 - Practice 5 *** 

symmetric :: Tree a -> Tree a
symmetric (Leaf x) = (Leaf x)
symmetric (Branch (Leaf x) y) = (Branch (symmetric y) (Leaf x))
symmetric (Branch x (Leaf y)) = (Branch (Leaf y) (symmetric x))


-- example: 
-- symmetric (Branch (Leaf 5) (Leaf 7))

-- *** Exercise 13 - Practice 5 *** 

listToTree :: [a] -> Tree a
listToTree (x:[]) = Leaf x
listToTree (x:xs) = Branch (Leaf x) (listToTree xs)
 

treeToList :: Tree a -> [a]
treeToList (Leaf x) = [x]
treeToList (Branch x y) = treeToList x ++ treeToList y

data BinTreeInt = Void | Node Int BinTreeInt BinTreeInt deriving Show

let treeB1 = Void
let treeB2 = (Node 5 Void Void)
let treeB3 = (Node 5 
              (Node 3 (Node 1 Void Void)(Node 4 Void Void)) 
              (Node 6 Void (Node 8 Void Void)))

insTree :: Int -> BinTreeInt -> BinTreeInt
insTree x (Node y) (BinTreeInt z) (BinTreeInt t)
	| y > x = 

-- example: 
-- insTree 6 (Node 3 (Node 2 Void Void) (Node 7 (Node 4 Void Void) (Node 9 Void Void)))
-- ==> Node 3 (Node 2 Void Void) (Node 7 (Node 4 Void (Node 6 Void Void)) (Node 9 Void Void))