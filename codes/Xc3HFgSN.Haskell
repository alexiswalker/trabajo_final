module Test where

data Nat : Set where
  zero : Nat
  succ : Nat → Nat

_+_ : Nat → Nat → Nat
zero + m = m
succ m + n = succ (m + n)

data _≡_ {A : Set} (x : A) : A → Set where
  refl : x ≡ x

cong : ∀ {A B : Set} (f : A → B) {x y} → (x ≡ y) → (f x ≡ f y)
cong f refl = refl

assoc : ∀ x y z → (x + (y + z)) ≡ ((x + y) + z)
assoc zero y z = refl
assoc (succ x) y z = cong succ (assoc x y z)