fn recurse_on_dir(current_dir: &Path) -> Result<HashSet<(String, u64, u64)>, io::Error>{
    let mut files: HashSet<(String, u64, u64)> = HashSet::new();
    for entry in fs::read_dir(current_dir)? {
        let item = entry?;
        if item.file_type()?.is_dir(){
            let additional_files = recurse_on_dir(&item.path())?;
            files.extend(additional_files);
        } else if item.file_type()?.is_file(){
            let mut file = fs::File::open(item.path())?;
            let mut file_contents = Vec::with_capacity(file.metadata().unwrap().len() as usize);
            file.read_to_end(&mut file_contents)?;
            let mut hasher = DefaultHasher::new();
            hasher.write(&file_contents);
            let hash = hasher.finish();
            files.insert((item.file_name().into_string().unwrap(), hash, file.metadata().unwrap().len()));
        }
    }