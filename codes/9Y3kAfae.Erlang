-module(frequency).
-export([init/0, start/0, stop/0, allocate/0, deallocate/1,
  is_running/0, deallocate_original/1]).
-compile([export_all]).

%% START FUNCTIONS

start() ->
  register(frequency_serv, spawn(frequency, init, [])).

init() -> process_flag(trap_exit, true),
  Frequencies = {get_frequencies(), []},
  frequency_serv_gui ! {communique, frequencies_list, Frequencies},
  loop(Frequencies).

%% HARDCODED FUNCTIONS

get_frequencies() -> [10, 11, 12, 13, 14].

%% CLIENT FUNCTIONS

stop() -> call(stop).

allocate() -> call(allocate).

deallocate(Freq) -> call({deallocate, Freq}).

deallocate_original(Freq) -> call({deallocate, Freq}).

is_running() ->
  WhereIs = whereis(frequency_serv),
  if
    WhereIs /= undefined -> running;
    true -> stopped
  end.

call(Message) -> frequency_serv ! {request, self(), Message},
  receive
    {reply, Reply} -> Reply
  end.

reply(Pid, Message) -> Pid ! {reply, Message}.

%% ADDED FUNCTION
reply_to_gui(Pid, Reply) ->
  frequency_serv_gui ! {Pid, Reply}.

%% ADDED FUNCTION
update_list_gui(Frequencies) ->
  frequency_serv_gui ! {communique, update_frequencies_list, Frequencies}.

loop(Freq) ->
  receive
    {request, Pid, allocate} -> {NewF, Reply} = allocate(Freq, Pid),
      reply(Pid, Reply),
      reply_to_gui(Pid, Reply),
      update_list_gui(NewF),
      loop(NewF);
    {request, Pid, {deallocate, F}} ->
      {NewF, Reply} = deallocate(Freq, F, Pid),
      reply(Pid, Reply),
      reply_to_gui(Pid, {Reply, F}),
      update_list_gui(NewF),
      loop(NewF);
    %% ADDED FUNCTION
    {request, Pid, {deallocate_original, F}} ->
      {links, Links} = process_info(self(), links),
      {NewF, Reply} = deallocate_original(Freq, F, Links),
      reply(Pid, Reply),
      reply_to_gui(Pid, {Reply, F}),
      update_list_gui(NewF),
      loop(NewF);
    {'EXIT', Pid, _Reason} -> NewF = exited(Freq, Pid), loop(NewF);
    {request, Pid, stop} -> reply(Pid, ok)
  end.

allocate({[], Allocated}, _Pid) -> {{[], Allocated}, {error, no_frequencies}};

allocate({[Freq|Frequencies], Allocated}, Pid) -> link(Pid),
  {{Frequencies, [{Freq, Pid}|Allocated]}, {ok, Freq}}.

%% ADDED FUNCTION
deallocate({Free, Allocated}, Freq, Sender_pid) ->
  Object = lists:keysearch(Freq, 1, Allocated),
  case Object of
    {value, {Freq, Pid}} ->
      if
        Pid == Sender_pid ->
          unlink(Pid),
          NewAllocated = lists:keydelete(Freq, 1, Allocated),
          {{[Freq|Free], NewAllocated}, released};
        true ->
          {{Free, Allocated}, wrong_frequency}
      end;
    false ->
       {{Free, Allocated}, frequency_not_found}
  end.

deallocate_original({Free, Allocated}, Freq, Links) ->
  {value, {Freq, Pid}} = lists:keysearch(Freq, 1, Allocated),
  unlink(Pid),
  NewAllocated = lists:keydelete(Freq, 1, Allocated),
  broadcast_message(Pid, Freq, Links),
  {{[Freq|Free], NewAllocated}, released_someoneelse_freq}.

exited({Free, Allocated}, Pid) ->
  unregister(frequency_serv),
  case lists:keysearch(Pid, 2, Allocated) of
    {value, {Freq, Pid}} -> NewAllocated = lists:keydelete(Freq, 1, Allocated),
      {[Freq | Free], NewAllocated};
    false -> {Free, Allocated}
  end.

%% BROADCAST FUNCTIONS TO INFORM PROCESS THAT HAS LOST HIS FREQUENCY

broadcast_message(Pid, Freq, Links) ->
  spawn(?MODULE, send_message, [Links, Pid, Freq]).

send_message([], Pid, Freq) -> unregister(self());

send_message([Tl], Pid, Freq) ->
  io:format("send_message 2 ~p \n", [Tl]),
  Tl ! {broadcast_message, deallocated, Pid, Freq};

send_message([Hd|Tl], Pid, Freq) ->
  io:format("send_message 3\nHd: ~p \nTl: ~p \n", [Hd, Tl]),
  Hd ! {broadcast_message, deallocated, Pid, Freq},
  send_message(Tl, Pid, Freq).