diff -Naur cdgc/bits.d gc/bits.d
--- cdgc/bits.d	2011-10-19 23:41:05.000000000 +0200
+++ gc/bits.d	2011-10-20 16:31:06.000000000 +0200
@@ -24,11 +24,16 @@
  * Authors:   Walter Bright, David Friedman, Sean Kelly
  */
 
-module rt.gc.cdgc.bits;
+/* D2:
+ * rt.gc.cdgc -> gc
+ * tango.stdc.string -> core.stdc.string
+ */
+module gc.bits;
 
-import os = rt.gc.cdgc.os;
+import os = gc.os;
+import cstring = core.stdc.string;
 
-import cstring = tango.stdc.string;
+/* end D2 modifications */
 
 private extern (C) void onOutOfMemoryError();
 
@@ -36,7 +41,9 @@
 version (DigitalMars)
 {
     version = bitops;
-    import std.intrinsic;
+
+    /* D2: std.intrinsic -> core.bitop */
+    import core.bitop;
 }
 else version (GNU)
 {
@@ -80,7 +87,8 @@
         }
     }
 
-    invariant
+    /* D2: invariant -> invariant() */
+    invariant()
     {
         if (data)
             assert (nwords ==
@@ -133,7 +141,11 @@
     {
         version (bitops)
         {
-            return std.intrinsic.btr(data + 1, i);
+            /* D2:
+             * std.intrinsic.btr(data + 1, i) ->
+             * core.bitop.btr(cast(ulong*) data + 1, i)
+             */
+            return core.bitop.btr(cast(ulong*) data + 1, i);
         }
         else version (Asm86)
         {
diff -Naur cdgc/dynarray.d gc/dynarray.d
--- cdgc/dynarray.d	2011-10-19 23:41:05.000000000 +0200
+++ gc/dynarray.d	2011-10-20 16:36:53.000000000 +0200
@@ -11,11 +11,17 @@
  * Authors:   Leandro Lucarella <llucax@gmail.com>
  */
 
-module rt.gc.cdgc.dynarray;
+/* D2:
+ * rt.gc.cdgc -> gc
+ * tango.stdc.stdlib -> core.stdc.stdlib
+ * tango.stdc.string -> core.stdc.string
+ */
+module gc.dynarray;
 
-import tango.stdc.stdlib: realloc;
-import tango.stdc.string: memmove;
+import core.stdc.stdlib: realloc;
+import core.stdc.string: memmove;
 
+/* end D2 modifications */
 
 private void Invariant(T)(DynArray!(T)* a)
 {
@@ -52,7 +58,11 @@
 
     invariant()
     {
-        .Invariant(this);
+        /* D2:
+         * .Invariant(&this) ->
+         * .Invariant!T(&this)
+         */
+        .Invariant!T(&this);
     }
 
     /**
@@ -60,7 +70,11 @@
      */
     void Invariant()
     {
-        .Invariant(this);
+        /* D2:
+         * .Invariant(&this) ->
+         * .Invariant!T(&this)
+         */
+        .Invariant!T(&this);
     }
 
     /**
@@ -126,7 +140,11 @@
         if (this._size == this._capacity)
             if (!this.resize())
                 return null;
-        this._data[this._size] = x;
+        /* D2:
+         * = x ->
+         * = cast(T) x
+         */
+        this._data[this._size] = cast(T) x;
         this._size++;
         return this._data + this._size - 1;
     }
@@ -149,7 +167,7 @@
      * successful, null otherwise (i.e. an allocation was triggered but the
      * allocation failed) in which case the internal state is not changed.
      */
-    T* insert_sorted(char[] cmp = "a < b")(in T x)
+    T* insert_sorted(string cmp = "a < b")(in T x) /* D2: char[] -> string */
     {
         size_t i = 0;
         for (; i < this._size; i++) {
@@ -163,7 +181,11 @@
             return null;
         memmove(this._data + i + 1, this._data + i,
                 (this._size - i) * T.sizeof);
-        this._data[i] = x;
+        /* D2:
+         * = x ->
+         * = cast(T) x
+         */
+        this._data[i] = cast(T) x;
         this._size++;
         return this._data + i;
     }
@@ -206,17 +228,21 @@
      */
     bool resize(in size_t new_capacity=0)
     {
+        /* D2: cannot modify const new_capacity
+         * create a "new_cap" variable that'll be modified
+         */
         // adjust new_capacity if necessary
-        if (new_capacity == 0)
-            new_capacity = this._size * 2;
-            if (new_capacity == 0)
-                new_capacity = 16;
-        // reallocate the memory with the new_capacity
-        T* new_data = cast(T*) realloc(this._data, new_capacity * T.sizeof);
+        size_t new_cap = new_capacity;
+        if (new_cap == 0)
+            new_cap = this._size * 2;
+            if (new_cap == 0)
+                new_cap = 16;
+        // reallocate the memory with the newcap
+        T* new_data = cast(T*) realloc(this._data, new_cap * T.sizeof);
         if (new_data is null)
             return false;
         this._data = new_data;
-        this._capacity = new_capacity;
+        this._capacity = new_cap;
         // truncate the size if necessary
         if (this._size > this._capacity)
             this._size = this._capacity;
diff -Naur cdgc/gc.d gc/gc.d
--- cdgc/gc.d	2011-10-19 23:41:05.000000000 +0200
+++ gc/gc.d	2011-10-20 16:43:43.000000000 +0200
@@ -24,7 +24,8 @@
  * Authors:   Walter Bright, David Friedman, Sean Kelly
  */
 
-module rt.gc.cdgc.gc;
+/* D2: rt.gc.cdgc -> gc */
+module gc.gc;
 
 // D Programming Language Garbage Collector implementation
 
@@ -40,17 +41,101 @@
                                 // (use for Intel X86 CPUs)
                                 // else growing the stack means adding to the stack pointer
 
+/* D2: PointerMap, from the old druntime cdgc branch */
+/*************** Pointer Map ***********************/
+
+ /**
+  * Pointer map for precise heap scanning.
+  * Format:
+  *  PointerMap pm = typeid(T).pointermap;
+  *  pm.bits = [header] ~ scan_bits ~ pointer_bits
+  *  size_t header is the number of pointer sized units in T (T.sizeof/size_t.sizeof)
+  *  size_t[] scan_bits is the bitmap; each bit covers size_t bytes of T, meaning:
+  *      0: guaranteed not to be a pointer, don't scan
+  *      1: possibly a pointer, must scan
+  *  size_t[] pointer_bits is a second bitmap similar to scan_bits. If the
+  *  corrsponding bit in scan_bits is 0, the bit is 0; otherwise its meaning is:
+  *      0: pointer can not be moved, because it's possibly an integer
+  *      1: pointer can be moved, the corresponding word is always a pointer
+  *  A pointer bit set with an unset scan bit has undefined effects.
+  *  Note that not the bit-arrays are concatenated, but the size_t arrays.
+  * This implies all GC-aware pointers must be aligned on size_t boundaries.
+  * The compiler won't set any bits for unaligned pointer fields.
+  * The least significant bit of a size_t item is considered the first bit.
+  * PointerMap.init is a conservative scanning mask equivelant to void*[]
+  */
+struct PointerMap
+{
+     size_t[] bits = [1, 1, 0];
+
+     private const size_t BITS = size_t.sizeof * 8;
+
+     /// return size in bytes (aligned)
+     size_t size()
+     {
+         return bits[0] * size_t.sizeof;
+     }
+
+     private bool getbit(size_t offset, bool pointer_bit)
+     {
+         assert(offset < size);
+
+         if ((offset & (size_t.sizeof - 1)) != 0)
+             return false;
+
+         size_t elem = offset / size_t.sizeof;
+         size_t start = 1; //scan_bits offset
+         if (pointer_bit)
+             start += (bits[0] + BITS - 1) / BITS; //pointer_bits offset
+         return !!(bits[start + elem / BITS] & (1 << (elem % BITS)));
+     }
+
+     /// return if the (aligned) field starting at byte offset is a pointer
+     /// Warning: the GC may access the internal data structure directly instead
+     /// of using this method to make scanning faster
+     bool mustScanWordAt(size_t offset)
+     {
+         return getbit(offset, false);
+     }
+
+     /// return if the (aligned) field starting at byte offset is a moveable pointer
+     /// "moveable pointer" means that the memory block referenced by the pointer can
+     /// be moved by the GC (the pointer field will be updated with the new address)
+     bool isPointerAt(size_t offset)
+     {
+         return getbit(offset, true);
+     }
+
+     /// return true if and only if there are integer fields overlapping with pointer
+     /// fields in this type
+     bool canUpdatePointers()
+     {
+         auto len = (bits.length - 1) / 2;
+         return bits[1 .. 1 + len] == bits[1 + len .. $];
+     }
+
+}
+
 /***************************************************/
 
-import rt.gc.cdgc.bits: GCBits;
-import rt.gc.cdgc.stats: GCStats, Stats;
-import dynarray = rt.gc.cdgc.dynarray;
-import os = rt.gc.cdgc.os;
-import opts = rt.gc.cdgc.opts;
-
-import cstdlib = tango.stdc.stdlib;
-import cstring = tango.stdc.string;
-import cstdio = tango.stdc.stdio;
+/* D2:
+ * rt.gc.cdgc -> gc
+ * tango.stdc.stdlib -> core.stdc.stdlib
+ * tango.stdc.string -> core.stdc.string
+ * tango.stdc.stdio  -> core.stdc.stdio
+ */
+import gc.bits: GCBits;
+import gc.stats: GCStats, Stats;
+import dynarray = gc.dynarray;
+import os = gc.os;
+import opts = gc.opts;
+
+import cstdlib = core.stdc.stdlib;
+import cstring = core.stdc.string;
+import cstdio  = core.stdc.stdio;
+
+/* end D2 modifications */
+
 debug(COLLECT_PRINTF) alias cstdio.printf printf;
 
 /*
@@ -66,8 +151,9 @@
         return;
     }
     auto p = cast(ubyte*)(dst);
+    /* D2: c -> cast(ubyte) c */
     while (n-- > 0)
-        *p++ = c;
+        *p++ = cast(ubyte) c;
 }
 
 version (GNU)
@@ -711,80 +797,92 @@
     // get put on the stack so they'll be scanned
     void *sp;
     size_t result;
+
+    /* D2: assembly code from druntime GC */
     version (GNU)
     {
-        gcc.builtins.__builtin_unwind_init();
+        __builtin_unwind_init();
         sp = & sp;
     }
-    else version(LDC)
+    else version (D_InlineAsm_X86)
     {
-        version(X86)
+        asm
         {
-            uint eax,ecx,edx,ebx,ebp,esi,edi;
-            asm
-            {
-                mov eax[EBP], EAX      ;
-                mov ecx[EBP], ECX      ;
-                mov edx[EBP], EDX      ;
-                mov ebx[EBP], EBX      ;
-                mov ebp[EBP], EBP      ;
-                mov esi[EBP], ESI      ;
-                mov edi[EBP], EDI      ;
-                mov  sp[EBP], ESP      ;
-            }
+            pushad              ;
+            mov sp[EBP],ESP     ;
         }
-        else version (X86_64)
-        {
-            ulong rax,rbx,rcx,rdx,rbp,rsi,rdi,r8,r9,r10,r11,r12,r13,r14,r15;
-            asm
-            {
-                movq rax[RBP], RAX      ;
-                movq rbx[RBP], RBX      ;
-                movq rcx[RBP], RCX      ;
-                movq rdx[RBP], RDX      ;
-                movq rbp[RBP], RBP      ;
-                movq rsi[RBP], RSI      ;
-                movq rdi[RBP], RDI      ;
-                movq r8 [RBP], R8       ;
-                movq r9 [RBP], R9       ;
-                movq r10[RBP], R10      ;
-                movq r11[RBP], R11      ;
-                movq r12[RBP], R12      ;
-                movq r13[RBP], R13      ;
-                movq r14[RBP], R14      ;
-                movq r15[RBP], R15      ;
-                movq  sp[RBP], RSP      ;
-            }
-        }
-        else
-        {
-            static assert( false, "Architecture not supported." );
+    }
+    else version (D_InlineAsm_X86_64)
+    {
+        asm
+        {
+            push RAX ;
+            push RBX ;
+            push RCX ;
+            push RDX ;
+            push RSI ;
+            push RDI ;
+            push RBP ;
+            push R8  ;
+            push R9  ;
+            push R10  ;
+            push R11  ;
+            push R12  ;
+            push R13  ;
+            push R14  ;
+            push R15  ;
+            push RAX ;   // 16 byte align the stack
+            mov sp[RBP],RSP     ;
         }
     }
     else
     {
-    asm
-    {
-        pushad              ;
-        mov sp[EBP],ESP     ;
-    }
+        static assert(false, "Architecture not supported.");
     }
+    /* end D2 modifications */
+
     result = fullcollect(sp, early);
+
+    /* D2: assembly code from druntime GC */
     version (GNU)
     {
-        // nothing to do
+        // registers will be popped automatically
     }
-    else version(LDC)
+    else version (D_InlineAsm_X86)
     {
-        // nothing to do
+        asm
+        {
+            popad;
+        }
+    }
+    else version (D_InlineAsm_X86_64)
+    {
+        asm
+        {
+            pop RAX ;   // 16 byte align the stack
+            pop R15  ;
+            pop R14  ;
+            pop R13  ;
+            pop R12  ;
+            pop R11  ;
+            pop R10  ;
+            pop R9  ;
+            pop R8  ;
+            pop RBP ;
+            pop RDI ;
+            pop RSI ;
+            pop RDX ;
+            pop RCX ;
+            pop RBX ;
+            pop RAX ;
+        }
     }
     else
     {
-    asm
-    {
-        popad               ;
-    }
+        static assert(false, "Architecture not supported.");
     }
+    /* end D2 modifications */
+
     return result;
 }
 
@@ -828,6 +926,8 @@
                 debug(COLLECT_PRINTF) printf("\t\tmark proc ERROR\n");
                 disable_fork(); // Try to keep going without forking
                 break;
+            /* D2: switch needs default case */
+            default: break;
         }
     }
 
@@ -2002,7 +2102,9 @@
         return locked!(Object, () {
             return (cast(WeakPointer*)p).reference;
         })();
-        }
+    }
+    /* D2: needs return */
+    return null;
 }
 
 
@@ -2122,7 +2224,8 @@
     }
 
 
-    invariant
+    /* D2: invariant -> invariant() */
+    invariant()
     {
         //mark.Invariant();
         //scan.Invariant();
diff -Naur cdgc/opts.d gc/opts.d
--- cdgc/opts.d	2011-10-19 23:41:05.000000000 +0200
+++ gc/opts.d	2011-10-20 16:49:30.000000000 +0200
@@ -31,15 +31,23 @@
  * Authors: Leandro Lucarella
  */
 
-module rt.gc.cdgc.opts;
+/* D2:
+ * rt.gc.cdgc -> gc
+ * tango.stdc.stdlib -> core.stdc.stdlib
+ * tango.stdc.string -> core.stdc.string
+ * tango.stdc.stdio  -> core.stdc.stdio
+ * tango.stdc.errno  -> core.stdc.errno
+ */
+module gc.opts;
 
 //debug = PRINTF;
 
-import cstdlib = tango.stdc.stdlib;
-import cstring = tango.stdc.string;
-import cerrno = tango.stdc.errno;
-debug (PRINTF) import tango.stdc.stdio: printf;
+import cstdlib = core.stdc.stdlib;
+import cstring = core.stdc.string;
+import cerrno = core.stdc.errno;
+debug (PRINTF) import core.std.cstdio: printf;
 
+/* end D2 modifications */
 
 private:
 
@@ -75,7 +83,8 @@
 {
     int b(bool v) { return v; }
     with (options)
-    printf("rt.gc.cdgc.opts: verbose=%u, log_file='%s', "
+    /* D2: rt.gc.cdgc.opts -> gc.opts */
+    printf("gc.opts: verbose=%u, log_file='%s', "
             "malloc_stats_file='%s', collect_stats_file='%s', sentinel=%d, "
             "mem_stomp=%d, conservative=%d, fork=%d, eager_alloc=%d, "
             "early_collect=%d, min_free=%u, prealloc_psize=%lu, "
@@ -131,35 +140,36 @@
     long free = cstdlib.strtol(value, &end, 10);
     if (*end != '\0' || end == value || cerrno.errno || free < 0 || free > 100)
         return;
-    options.min_free = free;
+    /* D2: free -> cast(uint) free */
+    options.min_free = cast(uint) free;
 }
 
-
+/* D2: cast(char*) */
 void process_option(char* opt_name, char* opt_value)
 {
-    if (cstr_eq(opt_name, "verbose"))
+    if (cstr_eq(opt_name, cast(char*) "verbose"))
         options.verbose = cstdlib.atoi(opt_value);
-    else if (cstr_eq(opt_name, "log_file"))
+    else if (cstr_eq(opt_name, cast(char*) "log_file"))
         cstring.strcpy(options.log_file.ptr, opt_value);
-    else if (cstr_eq(opt_name, "malloc_stats_file"))
+    else if (cstr_eq(opt_name, cast(char*) "malloc_stats_file"))
         cstring.strcpy(options.malloc_stats_file.ptr, opt_value);
-    else if (cstr_eq(opt_name, "collect_stats_file"))
+    else if (cstr_eq(opt_name, cast(char*) "collect_stats_file"))
         cstring.strcpy(options.collect_stats_file.ptr, opt_value);
-    else if (cstr_eq(opt_name, "sentinel"))
+    else if (cstr_eq(opt_name, cast(char*) "sentinel"))
         options.sentinel = parse_bool(opt_value);
-    else if (cstr_eq(opt_name, "mem_stomp"))
+    else if (cstr_eq(opt_name, cast(char*) "mem_stomp"))
         options.mem_stomp = parse_bool(opt_value);
-    else if (cstr_eq(opt_name, "conservative"))
+    else if (cstr_eq(opt_name, cast(char*) "conservative"))
         options.conservative = parse_bool(opt_value);
-    else if (cstr_eq(opt_name, "fork"))
+    else if (cstr_eq(opt_name, cast(char*) "fork"))
         options.fork = parse_bool(opt_value);
-    else if (cstr_eq(opt_name, "eager_alloc"))
+    else if (cstr_eq(opt_name, cast(char*) "eager_alloc"))
         options.eager_alloc = parse_bool(opt_value);
-    else if (cstr_eq(opt_name, "early_collect"))
+    else if (cstr_eq(opt_name, cast(char*) "early_collect"))
         options.early_collect = parse_bool(opt_value);
-    else if (cstr_eq(opt_name, "min_free"))
+    else if (cstr_eq(opt_name, cast(char*) "min_free"))
         parse_min_free(opt_value);
-    else if (cstr_eq(opt_name, "pre_alloc"))
+    else if (cstr_eq(opt_name, cast(char*) "pre_alloc"))
         parse_prealloc(opt_value);
 }
 
@@ -173,7 +183,8 @@
     char* curr = opt_name.ptr;
     size_t i = 0;
     if (opts_string is null) {
-        debug (PRINTF) printf("rt.gc.cdgc.opts: no options overriden\n");
+        /* D2: rt.gc.cdgc.opts -> gc.opts */
+        debug (PRINTF) printf("gc.opts: no options overriden\n");
         return;
     }
     for (; *opts_string != '\0'; opts_string++)
diff -Naur cdgc/os.d gc/os.d
--- cdgc/os.d	2011-10-19 23:41:05.000000000 +0200
+++ gc/os.d	2011-10-20 16:56:23.000000000 +0200
@@ -24,8 +24,8 @@
  * Authors:   Walter Bright, David Friedman, Sean Kelly, Leandro Lucarella
  */
 
-module rt.gc.cdgc.os;
-
+/* D2: rt.gc.cdgc -> gc */
+module gc.os;
 
 // Fork
 ////////////////////////////////////////////////////////////////////////
@@ -61,15 +61,20 @@
  */
 WRes wait_pid(pid_t pid, bool block = true);
 
-public import tango.stdc.posix.unistd: pid_t, fork;
+/* D2: tango.stdc.posix.unistd -> core.sys.posix.unistd */
+public import core.sys.posix.unistd: pid_t, fork;
 
 }
 
 // Implementations
 else version (Posix) {
     enum { HAVE_FORK = true }
-    public import tango.stdc.posix.unistd: pid_t, fork;
-    import tango.stdc.posix.sys.wait: waitpid, WNOHANG;
+    /* D2:
+     * tango.stdc.posix.unistd -> core.sys.posix.unistd
+     * tango.stdc.posix.sys -> core.sys.posix.sys
+     */
+    public import core.sys.posix.unistd: pid_t, fork;
+    import core.sys.posix.sys.wait: waitpid, WNOHANG;
     public WRes wait_pid(pid_t pid, bool block = true) {
         int status = void;
         pid_t waited_pid = waitpid(pid, &status, block ? 0 : WNOHANG);
@@ -94,13 +99,20 @@
 // Allocation
 ////////////////////////////////////////////////////////////////////////
 
+/* D2:
+ * tango.sys.win32 -> core.sys.windows
+ * tango.stdc.posix.sys -> core.sys.posix.sys
+ * tango.stdc.stdlib -> core.stdc.stdlib
+ */
+
 version (Win32)
-    import tango.sys.win32.UserGdi;
+    import core.sys.windows.UserGdi;
 else version (Posix)
-    import tango.stdc.posix.sys.mman;
+    import core.sys.posix.sys.mman;
 else
-    import tango.stdc.stdlib;
+    import core.stdc.stdlib;
 
+/* end D2 modifications */
 
 // Public interface/Documentation
 
@@ -186,7 +198,8 @@
     //       to PAGESIZE alignment, there will be space for a void* at the end
     //       after PAGESIZE bytes used by the GC.
 
-    import rt.gc.cdgc.gc: PAGESIZE;
+    /* D2: rt.gc.cdgc -> gc */
+    import gc.gc: PAGESIZE;
 
     const size_t PAGE_MASK = PAGESIZE - 1;
 
diff -Naur cdgc/stats.d gc/stats.d
--- cdgc/stats.d	2011-10-19 23:41:05.000000000 +0200
+++ gc/stats.d	2011-10-20 16:59:20.000000000 +0200
@@ -24,15 +24,21 @@
  * Authors:   Walter Bright, Sean Kelly, Leandro Lucarella
  */
 
-module rt.gc.cdgc.stats;
+/* D2:
+ * rt.gc.cdgc -> gc
+ * tango.stdc.stdio -> core.stdc.stdio
+ * tango.stdc.posix.sys -> core.sys.posix.sys
+ */
+module gc.stats;
 
-import gc = rt.gc.cdgc.gc;
-import rt.gc.cdgc.bits: GCBits;
-import rt.gc.cdgc.opts: options;
+import gc = gc.gc;
+import gc.bits: GCBits;
+import gc.opts: options;
 
-import cstdio = tango.stdc.stdio;
-import ctime = tango.stdc.posix.sys.time;
+import cstdio = core.stdc.stdio;
+import ctime = core.sys.posix.sys.time;
 
+/* end D2 modifications */
 
 private:
 
@@ -295,11 +301,12 @@
      */
     static Stats opCall(.gc.GC* gc)
     {
+        /* D2: cast(char*) */
         Stats this_;
         this_.gc = gc;
         if (options.malloc_stats_file[0] != '\0') {
             this_.mallocs_file = this_.start_file(
-                    options.malloc_stats_file.ptr,
+                    options.malloc_stats_file.ptr, cast(char*)
                     "Timestamp,Time,Pointer,Size,Collection triggered,"
                     "Finalize,No scan,No move,Pointer map,Type size,"
                     "Pointer map scan bitmask (first word, hexa),"
@@ -310,7 +317,7 @@
         // collection
         if (options.collect_stats_file[0] != '\0') {
             this_.collections_file = this_.start_file(
-                    options.collect_stats_file.ptr,
+                    options.collect_stats_file.ptr, cast(char*)
                     "Timestamp,Malloc time,Collection time,Stop-the-world time,"
                     "Used before,Free before,Wasted before,Overhead before,"
                     "Used after,Free after,Wasted after,Overhead after\n");