--- GMPORT/src/SIMPACK/Packet/ParameterPool/ParameterPool.cpp	2011-04-23 02:40:12.000000000 +0300
+++ GENM/src/SIMPACK/Packet/ParameterPool//ParameterPool.cpp	2011-04-23 02:30:23.000000000 +0300
@@ -1,24 +1,30 @@
-//------------------------------------------------------------------------------
+// -----------------------------------------------------------------------------
 //
-// (C) 2006 European Space Agency
+// (C) 2010 European Space Agency
 // European Space Operations Centre
 // Darmstadt, Germany
 //
-//------------------------------------------------------------------------------
+// -----------------------------------------------------------------------------
+//
+// Sub-System    : SIMPACK_Packet
 //
-// File Name: ParameterPool.cpp
+// File Name     : ParameterPool.cpp
 //
-// System: SMP2 v1.2 Model Component
+// Author        : Shankar Ramasamy (VEGA)
 //
-// Description: This SMP2 Model is a container for Parameters which can either be arranged within one or more contained Parameter Groups or directly. Groups are arranged based on the first letter(s) of the parameter name where the number of letters to use for the grouping is a configurable data member. Zero indicates no grouping in which case Parameters are contained directly. 
-//              Interface access to individual parameters in the Pool is provided by supplying the Parameter name.
+// Last Modified : $Date: 2010-10-21 15:59:45 $
 //
+// Revision      : $Revision: 1.4 $
 //
-// Note: This file has been generated using the SIMSAT 4 MIE C++ Code Generator
+// Generated from: SIMSAT 4.0 MIE
+//                 Catalogue: SIMPACK_Packet.cat - V4.0.2
 //
-//------------------------------------------------------------------------------
-//------------------------------------------------------------------------------
+// -----------------------------------------------------------------------------
+// -----------------------------------------------------------------------------
 
+/// @file ParameterPool.cpp
+///    This SMP2 Model is a container for Parameters which can either be arranged within one or more contained Parameter Groups or directly. Groups are arranged based on the first letter(s) of the parameter name where the number of letters to use for the grouping is a configurable data member. Zero indicates no grouping in which case Parameters are contained directly. 
+///    Interface access to individual parameters in the Pool is provided by supplying the Parameter name.
 
 // -----------------------------------------------------------------------------
 // --------------------------------- Includes ----------------------------------
@@ -29,6 +35,7 @@
 #include "Mdk/Management/ManagedModel.h"
 #include "Mdk/Management/ManagedContainer.h"
 #include "Common/VersionedModel.h"
+
 #include "SIMPACK/Packet/ParameterPool/IParameterPool.h"
 #include "SIMPACK/Packet/ParameterPool/IParameterPoolCfg.h"
 #include "SIMPACK/Packet/ParameterPool/Parameter.h"
@@ -36,10 +43,9 @@
 #include "SIMPACK/Packet/ParameterPool/ParameterPoolLoader.h"
 #include "Smp/SimpleTypes.h"
 #include "SIMPACK/Packet/Database/IPacketDatabase.h"
-#include "SIMPACK/Packet/Database/PacketDatabase.h"
-#include "SIMPACK/Common/Datatypes/DatatypesNamespace.h"
-#include "SIMPACK/Packet/ParameterPool/IParameter.h"
-#include "SIMPACK/Packet/ParameterPool/Parameter.h"
+#include "SIMPACK/Tdbed/TdbedNamespace.h"
+#include "SIMPACK/Tdbed/IParameter.h"
+#include "Smp/SmpNamespace.h"
 #include "Smp/Publication/IType.h"
 #include "Smp/Publication/IEnumerationType.h"
 #include "Smp/Publication/IStructureType.h"
@@ -47,6 +53,26 @@
 #include "Smp/Publication/IPublishOperation.h"
 #include "Mdk/SimpleTypes.h"
 
+// --OPENING ELEMENT--::SIMPACK::Packet::ParameterPool::ParameterPool/ParameterPool::Extra_Includes--
+// MARKER: FILE INCLUSION: START
+#include "SIMPACK/Packet/Database/PacketDatabase.h"
+#include "SIMPACK/Common/Datatypes/DatatypesNamespace.h"
+#include "SIMPACK/Packet/ParameterPool/IParameter.h"
+#include "SIMPACK/Packet/ParameterPool/Parameter.h"
+#include "SIMPACK/Packet/ParameterPool/ValidName.h"
+// MARKER: FILE INCLUSION: END
+
+// MARKER: FORWARD DECLARATIONS: START
+// INSERT HERE FORWARD DECLARATIONS
+// MARKER: FORWARD DECLARATIONS: END
+
+// -----------------------------------------------------------------------------
+// ------------------------ Custom field definitions ---------------------------
+// -----------------------------------------------------------------------------
+// MARKER: EXTRA FIELD DEFINITIONS: START
+// INSERT HERE EXTRA FIELD DEFINITIONS
+// MARKER: EXTRA FIELD DEFINITIONS: END
+// --CLOSING ELEMENT--::SIMPACK::Packet::ParameterPool::ParameterPool/ParameterPool::Extra_Includes--
 
 namespace SIMPACK
 {
@@ -59,377 +85,225 @@
             // ------------------------------- Operations ----------------------------------
             // -----------------------------------------------------------------------------
 
-            // Adds a Paramter to the ParameterPool.
-            void ParameterPool::AddParameter( ::SIMPACK::Packet::Database::IPacketDatabase* packetDatabase, Smp::String8 name, const ::SIMPACK::Tdbed::ParameterType rawType, const ::SIMPACK::Tdbed::ParameterType engType, const ::Smp::UInt64 sizeInBits, Smp::String8 unit, Smp::String8 description, const ::SIMPACK::Tdbed::MessageInfoBase type, const ::SIMPACK::Tdbed::ParameterNature nature )
+// --OPENING ELEMENT--ParameterPool::AddParameter--
+            /// Implements IParameterPoolCfg.
+            /// @param packetDatabase Packet Database Interface access.
+            /// @param name The parameter name.
+            /// @param rawType The parameter raw value type.
+            /// @param engType The parameter eng value type.
+            /// @param sizeInBits The size of the encoded value in bits.
+            /// @param unit The parameter unit.
+            /// @param description The parameter description.
+            /// @param type Type of the Parameter.
+            /// @param nature Natur of the parameter. It can either be Fixed or Non-Fixed.
+            void ParameterPool::AddParameter( ::SIMPACK::Packet::Database::IPacketDatabase* packetDatabase, const ::Smp::String8 name, const ::SIMPACK::Tdbed::ParameterType rawType, const ::SIMPACK::Tdbed::ParameterType engType, const ::Smp::UInt64 sizeInBits, const ::Smp::String8 unit, const ::Smp::String8 description, const ::SIMPACK::Tdbed::MessageInfoBase type, const ::SIMPACK::Tdbed::ParameterNature nature )
             {
-                ::Smp::String8 validName = GetValidName(name);
-                                    
+                // MARKER: OPERATION BODY: START
+                std::string validName = GetValidName(name);
+
                 // Add the Parameter only if it is not already there
-                if (GetParameter(validName) == NULL)
+                if (GetParameter(validName.c_str()) == NULL)
                 {
                     // if no grouping then add the parameter to Local Parameter list
                     if (groupSize == 0)
                     {
-                        if (Parameter != NULL)
-                        {
-                            // Create and add the Parameter to the Container
-                            ::SIMPACK::Packet::ParameterPool::Parameter* parameter = new ::SIMPACK::Packet::ParameterPool::Parameter(validName, description, NULL);
-                            Parameter->AddComponent(parameter);
-                            
-                            // Set Database of the Parameter
-                            if ((parameter->Database != NULL) &&
-                                (packetDatabase != NULL))
-                            {
-                                parameter->Database->AddComponent(dynamic_cast< ::Smp::IComponent*>(packetDatabase));
-                            }
-                            
-                            // Set Parameter Field values
-                            parameter->set_Id(name);
-                            parameter->set_InformationType(::SIMPACK::Tdbed::MIB_TC);
-                            parameter->set_RawType(rawType);
-                            parameter->set_EngType(engType);
-                            parameter->set_EngUnit(unit);
-                            parameter->set_InformationType(type);                        
-                            // set parameter's nature
-                            parameter->set_Nature(nature);                        
-                        }
+                        // Create and add the Parameter to the Container
+                        ::SIMPACK::Packet::ParameterPool::Parameter* parameter = new ::SIMPACK::Packet::ParameterPool::Parameter(validName.c_str(), description, NULL);
+                        parameters->AddComponent(parameter);
+
+                        // Set Database of the Parameter
+                        if ((parameter->Database != NULL) &&
+                            (packetDatabase != NULL))
+                        {
+                            parameter->Database->AddComponent(dynamic_cast< ::Smp::IComponent*>(packetDatabase));
+                        }
+
+                        // Set Parameter Field values
+                        parameter->set_Id(name);
+                        parameter->set_InformationType(::SIMPACK::Tdbed::MIB_TC);
+                        parameter->set_RawType(rawType);
+                        parameter->set_EngType(engType);
+                        parameter->set_EngUnit(unit);
+                        parameter->set_InformationType(type);
+                        // set parameter's nature
+                        parameter->set_Nature(nature);
                     }
                     else
                     {
-                        ::SIMPACK::Packet::ParameterPool::ParameterGroup* parameterPoolGroup = NULL;
-                        ::Smp::Char8* groupName = new ::Smp::Char8[groupSize + 1];
-                        strncpy(groupName, validName, groupSize);
-                        groupName[groupSize] = '\0';
-                        
-                        // Search the Parameter Group list with passed name
-                        if (Group != NULL)
-                        {
-                            parameterPoolGroup = dynamic_cast< ::SIMPACK::Packet::ParameterPool::ParameterGroup*>
-                                                            (Group->GetComponent(groupName));
-                        }
-                        
-                        // If a Parameter Group is not found in the list then created and add one
-                        if (parameterPoolGroup == NULL)
+                        std::string groupName(validName.begin(),
+                                              validName.begin() + std::min(validName.size(), size_t(groupSize)));
+
+                        ParameterGroup* group = groups->Get(groupName.c_str());
+                        if (group == NULL)
                         {
-                            
-                            parameterPoolGroup = new ::SIMPACK::Packet::ParameterPool::ParameterGroup(groupName, NULL, NULL);
-                            Group->AddComponent(parameterPoolGroup);
+                            group = new ParameterGroup(groupName.c_str(), NULL, NULL);
+                            groups->AddComponent(group);
                         }
-                        
+
                         // Add the parameter to the Pool group
-                        parameterPoolGroup->AddParameter(packetDatabase, name, 
-                                                        rawType, engType, sizeInBits, 
-                                                        unit, description, type, nature);
-                        delete[] groupName;
+                        group->AddParameter(packetDatabase, name,
+                                            rawType, engType, sizeInBits,
+                                            unit, description, type, nature);
                     }
                 }
-                
-                // Free the memory of the Valid Name string
-                delete[] validName;
+                // MARKER: OPERATION BODY: END
             }
+// --CLOSING ELEMENT--ParameterPool::AddParameter--
 
-            // Log all Forced Parameters of the Pool.
+// --OPENING ELEMENT--ParameterPool::LogAllForcedParameters--
+            /// Simulator command.
             void ParameterPool::LogAllForcedParameters( void )
             {
-                if ((m_simulator != NULL) && (m_simulator->GetLogger() != NULL))
+                // MARKER: OPERATION BODY: START
+                char message[1024];
+                ::Smp::UInt32 count = 0;
+                Log(Smp::Services::LMK_Debug, "The following are the list of Parameters that are forced");
+
+                for (ParametersMap::ConstIterator iterator = parameters->GetMap().begin();
+                    iterator != parameters->GetMap().end();
+                    ++iterator)
                 {
-                    char message[1024];
-                    ::Smp::UInt32 count = 0;
-                    m_simulator->GetLogger()->Log(this, "The following are the list of Parameters that are forced", Smp::Services::LMK_Debug);
-                    
-                    // first log the Parameters in the Pool directly
-                    if ((Parameter != NULL) && (Parameter->Count() > 0))
+                    if (iterator->second->isForced_EngValue() == true)
                     {
-                        for (_ParameterIterator iterator = _Parameter->Begin();
-                            iterator != _Parameter->End();
-                            ++iterator)
-                        {
-                            if ((*iterator)->isForced_EngValue() == true)
-                            {
-                                sprintf(message, "           %s", (*iterator)->GetName());
-                                m_simulator->GetLogger()->Log(this, message, Smp::Services::LMK_Debug);
-                                count++;
-                            }
-                        }
-                    }
-                    
-                    // Now go through the Groups and Log forced Parameters
-                    if ((Group != NULL) && (Group->Count() > 0))
-                    {
-                        for (_GroupIterator iterator = _Group->Begin();
-                            iterator != _Group->End();
-                            ++iterator)
-                        {
-                            (*iterator)->LogAllForcedParameters();
-                        }
+                        sprintf(message, "           %s", iterator->second->GetName());
+                        Log(Smp::Services::LMK_Debug, message);
+                        count++;
                     }
                 }
+
+                // Now go through the Groups and Log forced Parameters
+                for (GroupsMap::ConstIterator iterator = groups->GetMap().begin();
+                    iterator != groups->GetMap().end();
+                    ++iterator)
+                {
+                    iterator->second->LogAllForcedParameters();
+                }
+                // MARKER: OPERATION BODY: END
             }
+// --CLOSING ELEMENT--ParameterPool::LogAllForcedParameters--
 
-            // Implements IParameterPool.
-            ::SIMPACK::Tdbed::IParameter* ParameterPool::GetParameter( ::Smp::String8 name )
+// --OPENING ELEMENT--ParameterPool::GetParameter--
+            /// Implements IParameterPool.
+            /// @param name Name of the parameter to retrieve.
+            ::SIMPACK::Tdbed::IParameter* ParameterPool::GetParameter( const ::Smp::String8 name )
             {
-                ::SIMPACK::Packet::ParameterPool::IParameter* result = NULL;
-                ::Smp::String8 validName = GetValidName(name);
+                // MARKER: OPERATION BODY: START
                 
-                // If group size is 0 then packets are added to the Pool directly
-                if (groupSize == 0)
-                {
-                    // Search the Parameter list with passed name
-                    if (Parameter != NULL)
-                    {
-                        result = dynamic_cast< ::SIMPACK::Packet::ParameterPool::IParameter*>
-                                        (Parameter->GetComponent(validName));
-                    }
-                }
-                else
+                std::string validName = GetValidName(name);
+
+                ::SIMPACK::Tdbed::IParameter* result = parameters->Get(validName.c_str());
+
+                if (result == NULL)
                 {
-                    // Check if the passed name is not NULL and has more characters than Group size
-                    if ((name != NULL) && (strlen(name) > groupSize))
+                    std::string groupName(validName.begin(),
+                                          validName.begin() + std::min(validName.size(), size_t(groupSize)));
+
+                    ParameterGroup* group = groups->Get(groupName.c_str());
+                    if (group != NULL)
                     {
-                        // Search the Parameter Group list with passed name
-                        if (Group != NULL)
-                        {
-                            ::SIMPACK::Packet::ParameterPool::ParameterGroup* group = NULL;
-                            ::Smp::Char8* groupName = new ::Smp::Char8[groupSize + 1];
-                            strncpy(groupName, name, groupSize);
-                            groupName[groupSize] = '\0';
-                            group = dynamic_cast< ::SIMPACK::Packet::ParameterPool::ParameterGroup*>
-                                                        (Group->GetComponent(groupName));
-                                            
-                            // Once the Group is extracted get the Parameter
-                            if ((group != NULL) && (group->Parameter != NULL))
-                            {
-                                result = dynamic_cast< ::SIMPACK::Packet::ParameterPool::IParameter*>
-                                                        (group->Parameter->GetComponent(validName));
-                            }
-                            
-                            // delete the name pointer
-                            delete[] groupName;
-                        }
+                        result = group->GetParameter(validName.c_str());
                     }
                 }
 
-                // Free the memory of the Valid Name string
-                delete[] validName;
-                
                 return result;
+                
+                // MARKER: OPERATION BODY: END
             }
+// --CLOSING ELEMENT--ParameterPool::GetParameter--
 
-            // Set the engineering value from the parameter pool
-            ::Smp::Bool ParameterPool::SetEngValue( ::Smp::String8 paramterId, ::Smp::AnySimple value )
+// --OPENING ELEMENT--ParameterPool::SetEngValue--
+            /// Set the engineering value from the parameter pool
+            /// @param parameterId The name of the parameter
+            /// @param value The value of the parameter
+            ::Smp::Bool ParameterPool::SetEngValue( const ::Smp::String8 parameterId, ::Smp::AnySimple value )
             {
+                // MARKER: OPERATION BODY: START
                 ::Smp::Bool result = false;
 
                 // get the parameter and set the engineering value
-                ::Smp::String8 validName = GetValidName(paramterId);
-                // If group size is 0 then packets are added to the Pool directly
-                if (groupSize == 0)
+                ::SIMPACK::Tdbed::IParameter* parameter = GetParameter(parameterId);
+                if (parameter != NULL)
                 {
-                    // Search the Parameter list with passed name
-                    if (Parameter != NULL)
-                    {
-                        ::SIMPACK::Packet::ParameterPool::IParameter* parameter = 
-                                dynamic_cast< ::SIMPACK::Packet::ParameterPool::IParameter*>
-                                        (Parameter->GetComponent(validName));
-                                        
-                        if (parameter != NULL)
-                        {
-                            parameter->set_EngValue(value);
-                            result = true;
-                        }
-                    }
-                }
-                else
-                {
-                    // Check if the passed name is not NULL and has more characters than Group size
-                    if ((paramterId != NULL) && (strlen(paramterId) > groupSize))
-                    {
-                        // Search the Parameter Group list with passed name
-                        if (Group != NULL)
-                        {
-                            ::SIMPACK::Packet::ParameterPool::ParameterGroup* group = NULL;
-                            ::Smp::Char8* groupName = new ::Smp::Char8[groupSize + 1];
-                            strncpy(groupName, paramterId, groupSize);
-                            groupName[groupSize] = '\0';
-                            group = dynamic_cast< ::SIMPACK::Packet::ParameterPool::ParameterGroup*>
-                                                        (Group->GetComponent(groupName));
-                                            
-                            // Once the Group is extracted call into its SetEngValue method
-                            if (group != NULL)
-                            {
-                                result = group->SetEngValue(validName, value);
-                            }
-                            
-                            // delete the name pointer
-                            delete[] groupName;
-                        }
-                    }
+                    parameter->set_EngValue(value);
+                    result = true;
                 }
 
-                // Free the memory of the Valid Name string
-                delete[] validName;
-
                 return result;
+                // MARKER: OPERATION BODY: END
             }
+// --CLOSING ELEMENT--ParameterPool::SetEngValue--
 
-            // Get the engineering value from the parameter pool
-            ::Smp::Bool ParameterPool::GetEngValue( ::Smp::String8 paramterId, ::Smp::AnySimple& value )
+// --OPENING ELEMENT--ParameterPool::GetEngValue--
+            /// Get the engineering value from the parameter pool
+            /// @param parameterId The name of the parameter
+            /// @param value The value of the parameter
+            ::Smp::Bool ParameterPool::GetEngValue( const ::Smp::String8 parameterId, ::Smp::AnySimple& value )
             {
+                // MARKER: OPERATION BODY: START
                 ::Smp::Bool result = false;
 
-                // get the parameter and get the engineering value
-                ::Smp::String8 validName = GetValidName(paramterId);
-                // If group size is 0 then packets are added to the Pool directly
-                if (groupSize == 0)
-                {
-                    // Search the Parameter list with passed name
-                    if (Parameter != NULL)
-                    {
-                        ::SIMPACK::Packet::ParameterPool::IParameter* parameter = 
-                                dynamic_cast< ::SIMPACK::Packet::ParameterPool::IParameter*>
-                                        (Parameter->GetComponent(validName));
-                                        
-                        if (parameter != NULL)
-                        {
-                            value = parameter->get_EngValue();
-                            result = true;
-                        }
-                    }
-                }
-                else
+                // get the parameter and set the engineering value
+                ::SIMPACK::Tdbed::IParameter* parameter = GetParameter(parameterId);
+                if (parameter != NULL)
                 {
-                    // Check if the passed name is not NULL and has more characters than Group size
-                    if ((paramterId != NULL) && (strlen(paramterId) > groupSize))
-                    {
-                        // Search the Parameter Group list with passed name
-                        if (Group != NULL)
-                        {
-                            ::SIMPACK::Packet::ParameterPool::ParameterGroup* group = NULL;                        
-                            ::Smp::Char8* groupName = new ::Smp::Char8[groupSize + 1];
-                            strncpy(groupName, paramterId, groupSize);
-                            groupName[groupSize] = '\0';
-                            group = dynamic_cast< ::SIMPACK::Packet::ParameterPool::ParameterGroup*>
-                                                        (Group->GetComponent(groupName));
-                                            
-                            // Once the Group is extracted call into its GetEngValue method
-                            if (group != NULL)
-                            {
-                                result = group->GetEngValue(validName, value);
-                            }
-                            
-                            // delete the name pointer
-                            delete[] groupName;
-                        }
-                    }
+                    value = parameter->get_EngValue();
+                    result = true;
                 }
 
-                // Free the memory of the Valid Name string
-                delete[] validName;
-                
                 return result;
+                // MARKER: OPERATION BODY: END
             }
+// --CLOSING ELEMENT--ParameterPool::GetEngValue--
 
-            // Retrieves the SMP2 valid name from the passed name
-            ::Smp::String8 ParameterPool::GetValidName( ::Smp::String8 name )
-            {
-                ::Smp::String8 result = NULL;
-                
-                // If passed name is not null then create a valid name from it
-                if (name != NULL)
-                {
-                    ::Smp::Char8* validName = new ::Smp::Char8[strlen(name) + 1];
-                    
-                    for (::Smp::UInt32 index = 0; index < strlen(name); index++)
-                    {
-                        if (name[index] == ':')
-                        {
-                            validName[index] = '_';
-                        }
-                        else
-                        {
-                            validName[index] = name[index];
-                        }
-                    }
-                    
-                    // End it with null character
-                    validName[strlen(name)] = '\0';
-                    
-                    result = validName;
-                }
-                
-                return result;
-            }
 
             // -----------------------------------------------------------------------------
             // ------------------------------- Properties ----------------------------------
             // -----------------------------------------------------------------------------
 
-            // Get GroupSize.
-            // Defines or returns the number of letters used to determine grouping.
-            ::Smp::UInt16 ParameterPool::get_GroupSize()
-            {
-                return groupSize;
-            }
-
-            // Set GroupSize.
-            // Defines or returns the number of letters used to determine grouping.
+// --OPENING ELEMENT--ParameterPool::get_GroupSize--
+            /// Get GroupSize.
+            /// Defines or returns the number of letters used to determine grouping.
+            ::Smp::UInt16 ParameterPool::get_GroupSize(void)
+            {
+                // MARKER: OPERATION BODY: START
+                return this->groupSize;
+                // MARKER: OPERATION BODY: END
+            }
+// --CLOSING ELEMENT--ParameterPool::get_GroupSize--
+
+// --OPENING ELEMENT--ParameterPool::set_GroupSize--
+            /// Set GroupSize.
+            /// Defines or returns the number of letters used to determine grouping.
             void ParameterPool::set_GroupSize( ::Smp::UInt16 value )
             {
-                groupSize = value;
-            }
-        
-            // Get NumberOfParameters.
-            // Total number of Parameters in the Parameter Pool.
-            ::Smp::UInt32 ParameterPool::get_NumberOfParameters()
+                // MARKER: OPERATION BODY: START
+                this->groupSize = value;
+                // MARKER: OPERATION BODY: END
+            }
+// --CLOSING ELEMENT--ParameterPool::set_GroupSize--
+
+// --OPENING ELEMENT--ParameterPool::get_NumberOfParameters--
+            /// Get NumberOfParameters.
+            /// Total number of Parameters in the Parameter Pool.
+            ::Smp::UInt32 ParameterPool::get_NumberOfParameters(void)
             {
-                ::Smp::UInt32 result = 0;
-                
-                // first get the Parameters in the Pool directly
-                if (Parameter != NULL)
-                {
-                    result = Parameter->Count();
-                }
+                // MARKER: OPERATION BODY: START
+                ::Smp::UInt32 result = parameters->Count();
                 
                 // Now go through the Groups and caluculate the Parameters in each of the Groups
-                if ((Group != NULL) && (Group->Count() > 0))
+                for (GroupsMap::ConstIterator iterator = groups->GetMap().begin();
+                     iterator != groups->GetMap().end();
+                     ++iterator)
                 {
-                    for (_GroupIterator iterator = _Group->Begin();
-                        iterator != _Group->End();
-                        ++iterator)
-                    {
-                        result += (*iterator)->get_NumberOfParameters();
-                    }
+                    result += iterator->second->get_NumberOfParameters();
                 }
                 
                 return result;
+                // MARKER: OPERATION BODY: END
             }
-        
-
-            // -----------------------------------------------------------------------------
-            // ------------------------ Implementation of Interfaces -----------------------
-            // -----------------------------------------------------------------------------
-
-            // --- Implementation of IParameterGroupCfg interface
-
-            // Operation: AddParameter( ::SIMPACK::Packet::Database::IPacketDatabase* packetDatabase, Smp::String8 name, const ::SIMPACK::Tdbed::ParameterType rawType, const ::SIMPACK::Tdbed::ParameterType engType, const ::Smp::UInt64 sizeInBits, Smp::String8 unit, Smp::String8 description, const ::SIMPACK::Tdbed::MessageInfoBase type, const ::SIMPACK::Tdbed::ParameterNature nature )
-            // is explicitly defined by the model - see Operations section
+// --CLOSING ELEMENT--ParameterPool::get_NumberOfParameters--
 
-            // --- Implementation of IParameterPool interface
 
-            // Operation: GetParameter( Smp::String8 name )
-            // is explicitly defined by the model - see Operations section
-
-            // Operation: GetEngValue( Smp::String8 paramterId, Smp::AnySimple value )
-            // is explicitly defined by the model - see Operations section
-
-            // Operation: SetEngValue( Smp::String8 paramterId, Smp::AnySimple value )
-            // is explicitly defined by the model - see Operations section
-
-            // --- Implementation of IParameterPoolCfg interface
-
-            // Property: GroupSize
-            // is explicitly defined by the model - see Properties section
 
 
 
@@ -442,66 +316,93 @@
             // The Publish method is implemented in the ParameterPoolSmp.cpp file.
 
 
-            // - - - - - - - - - - - - - - Configure - - - - - - - - - - - - - - -
-            //
-            // Request for configuration.  Request the model to perform any custom
-            // configuration.  The  model can  create and configure  other  models
-            // using the field values of its published fields.
-            //
-            // @par     This  method  can only be called  once for each model, and
-            //          when the model is in <em>Publishing</em> state.  The model
-            //          can still publish further  features in this call,  and can 
-            //          even create other models, but at the end of this call,  it
-            //          needs to enter the<em>Configured</em> state.
-            // 
-            // @param   logger Logger.
-            // 
-            // @remarks The simulation  environment typically calls this method in
-            //          the <em>Building</em> state.
-            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+// --OPENING ELEMENT--ParameterPool::Configure--
+            /// - - - - - - - - - - - - - - Configure - - - - - - - - - - - - - - -
+            ///
+            /// Request for configuration.  Request the model to perform any custom
+            /// configuration.  The  model can  create and configure  other  models
+            /// using the field values of its published fields.
+            ///
+            /// @par     This  method  can only be called  once for each model, and
+            ///          when the model is in <em>Publishing</em> state.  The model
+            ///          can still publish further  features in this call,  and can
+            ///          even create other models, but at the end of this call,  it
+            ///          needs to enter the<em>Configured</em> state.
+            ///
+            /// @param   logger Logger.
+            ///
+            /// @remarks The simulation  environment typically calls this method in
+            ///          the <em>Building</em> state.
+            /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
             void ParameterPool::Configure( ::Smp::Services::ILogger* logger ) throw ( ::Smp::IModel::InvalidModelState )
             {
                 // Call Mdk implementation first
-                ::Smp::Mdk::Management::ManagedModel::Configure( logger );
-
-                // Optionally perform custom configuration steps here
-            }
-
+                ::Common::VersionedModel::Configure( logger );
 
-            // - - - - - - - - - - - - - - - Connect - - - - - - - - - - - - - - -
-            //
-            // Connect model to simulator. Allow the model to connect to the simu-
-            // lator (ISimulator).
-            //
-            // @par     This method  can only be called once  for each model,  and
-            //          only  when the model  is in the <em>Configured</em> state.
-            //          When  this  operation is  called,  the  model  immediately
-            //          enters  the <em>Connected</em> state,  before it  uses any
-            //          of the simulator methods and services.
-            //
-            // @par     In this method, the model may query for and use any of the
-            //          available simulation services,  as they are all guaranteed
-            //          to be  fully  functional  at that  time.  It  may  as well
-            //          connect  to  other  models' functionality  (e.g.  to event 
-            //          sources),  as it is  guaranteed that  all models have been 
-            //          created and configured  before the Connect() method of any 
-            //          model is called.
-            //
-            // @param   simulator  Simulation  Environment  that  hosts the model.
-            //
-            // @remarks The simulation  environment typically calls this method in
-            //          the <em>Connecting</em> state.
-            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+                // MARKER: CONFIGURE BODY: START
+                // INSERT HERE CONFIGURE BODY
+                // MARKER: CONFIGURE BODY: END
+            }
+// --CLOSING ELEMENT--ParameterPool::Configure--
+
+
+// --OPENING ELEMENT--ParameterPool::Connect--
+            /// - - - - - - - - - - - - - - - Connect - - - - - - - - - - - - - - -
+            ///
+            /// Connect model to simulator. Allow the model to connect to the simu-
+            /// lator (ISimulator).
+            ///
+            /// @par     This method  can only be called once  for each model,  and
+            ///          only  when the model  is in the <em>Configured</em> state.
+            ///          When  this  operation is  called,  the  model  immediately
+            ///          enters  the <em>Connected</em> state,  before it  uses any
+            ///          of the simulator methods and services.
+            ///
+            /// @par     In this method, the model may query for and use any of the
+            ///          available simulation services,  as they are all guaranteed
+            ///          to be  fully  functional  at that  time.  It  may  as well
+            ///          connect  to  other  models' functionality  (e.g.  to event
+            ///          sources),  as it is  guaranteed that  all models have been
+            ///          created and configured  before the Connect() method of any
+            ///          model is called.
+            ///
+            /// @param   simulator  Simulation  Environment  that  hosts the model.
+            ///
+            /// @remarks The simulation  environment typically calls this method in
+            ///          the <em>Connecting</em> state.
+            /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
             void ParameterPool::Connect( ::Smp::ISimulator* simulator )  throw ( ::Smp::IModel::InvalidModelState )
             {
                 // Call Mdk implementation first
-                ::Smp::Mdk::Management::ManagedModel::Connect( simulator );
+                ::Common::VersionedModel::Connect( simulator );
 
-                // TODO: add your code here
+                // MARKER: CONNECT BODY: START
+                // INSERT HERE CONNECT BODY
+                // MARKER: CONNECT BODY: END
             }
+// --CLOSING ELEMENT--ParameterPool::Connect--
+
+            // -----------------------------------------------------------------------------
+            // ------------------------ Custom method definitions --------------------------
+            // -----------------------------------------------------------------------------
+// --OPENING ELEMENT--::SIMPACK::Packet::ParameterPool::ParameterPool/ParameterPool::Extra_Methods--
+            // MARKER: EXTRA METHOD DEFINITIONS: START
+            // INSERT HERE EXTRA METHOD DEFINITIONS
+            // MARKER: EXTRA METHOD DEFINITIONS: END
+// --CLOSING ELEMENT--::SIMPACK::Packet::ParameterPool::ParameterPool/ParameterPool::Extra_Methods--
 
         }
     }
 }
+
+// --OPENING ELEMENT--SPR_LOG_SECTION--
+// The SPR history contains the description and reference of
+// the SPRs closed on the file.
+//
+// MARKER: SPR_LOG: START
+// Insert SPR log here (Including: Date, Author, SPR REF, Description). 
+// MARKER: SPR_LOG: END
+// --CLOSING ELEMENT--SPR_LOG_SECTION--
+