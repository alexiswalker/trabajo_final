-- FP - Uebungsblatt 7, e01625747
import Data.List

-- Aufgabe 1 - Aussagenlogische Ausdruecke
type Wahrheitswert = Bool
data Name = N1 | N2 | N3 | N4 | N5 deriving (Eq,Ord,Enum,Show)
newtype Variable = Var Name deriving (Eq,Ord,Show)

instance Enum Variable where
  fromEnum (Var name) = fromEnum name
  toEnum n = Var (toEnum n :: Name)

data Ausdruck = K Wahrheitswert              -- Logische Konstante
                | V Variable                 -- Logische Variable
                | Nicht Ausdruck             -- Logische Negation
                | Und Ausdruck Ausdruck      -- Logische Konjunktion
                | Oder Ausdruck Ausdruck     -- Logische Disjunktion
                | Impl Ausdruck Ausdruck     -- Logische Implikation
                | Esgibt Variable Ausdruck   -- Existentiell quantifizierter Ausdruck
                | Fueralle Variable Ausdruck -- Allquantifizierter Ausdruck
                deriving (Eq,Show)
test = (Oder (Oder (K False) (K True)) (K False)) == (nnf (Oder (Nicht (Und (K True) (K False))) (K False)))

nnf :: Ausdruck -> Ausdruck
nnf (Nicht (Fueralle v a)) = (Esgibt v (nnf(Nicht a)))
nnf (Nicht (Esgibt v a)) = (Fueralle v (nnf(Nicht a)))
nnf (Nicht (Und a b)) = (Oder (nnf(Nicht a)) (nnf(Nicht b)))
nnf (Nicht (Oder a b)) = (Und (nnf(Nicht a)) (nnf(Nicht b)))
nnf (Nicht (Impl a b)) = nnf (Nicht (Oder (Nicht a)  b))
nnf (Nicht (Nicht a)) = (nnf a)
nnf (Nicht (V var)) = (Nicht (V var))
nnf (Nicht (K True)) = (K False)
nnf (Nicht (K False)) = (K True)
nnf (Fueralle v a) = (Fueralle v (nnf a))
nnf (Esgibt v a) = (Esgibt v (nnf a))
nnf (Und a b) = (Und (nnf a) (nnf b))
nnf (Oder a b) = (Oder (nnf a) (nnf b))
nnf (Impl a b) = nnf(Oder (Nicht a) b)
nnf (Nicht a) = (Nicht (nnf a)) 
nnf (V var) = (V var)
nnf (K True) = (K True)
nnf (K False) = (K False)

-- Aufgabe 2 - Vladimir der Vampir
type Nat0 = Int
type Nat1 = Int
type Anzahl_Blutkonserven = Nat0
type Reiseproviant = Anzahl_Blutkonserven
type Reisedauer = Nat1   -- In vollen Std., ausschliesslich Werte von 1..12
type Abfahrtszeit = Nat0 -- In vollen Std., ausschliesslich Werte von 0..23
type Ankunftszeit = Nat0 -- In vollen Std., ausschliesslich Werte von 0..23
data Stadt = S1 | S2 | S3 | S4 | S5 | S6 | S7 | S8 | S9 | S10 deriving (Show,Eq)
type Ausgangsort = Stadt
type Zielort = Stadt
type Abfahrtsort = Stadt
type Ankunftsort = Stadt
type Relation = (Abfahrtsort,Abfahrtszeit,Ankunftsort,Ankunftszeit)
type Reiseplan = [Relation]
type Fahrplan = Abfahrtsort -> [(Ankunftsort,Abfahrtszeit,Reisedauer)] -- Total def.

reise_planer :: Fahrplan -> Ausgangsort -> Zielort -> Maybe Reiseplan
reise_planer fp aus ziel 
  | aus == ziel = Just []
  | otherwise = (getgoing fp ziel (startoff aus fp)) where
    getgoing _ _ [] = Nothing
    getgoing f z rps 
      | rps == extend = Just $ reverse $ getSmallest
      | otherwise = (getgoing f z extend) where
      extend = remCircular $ addPosToList f z rps
      getSmallest = (sortBy (\x y -> compare (calcProv $ reverse x) (calcProv $ reverse y)) rps)!!0

startoff :: Stadt -> Fahrplan -> [Reiseplan]
startoff s fp = [ [(s, abfz, anko, mod (abfz+rd) 24)] | (anko, abfz, rd) <- fp s ]

addPosToList :: Fahrplan -> Zielort -> [Reiseplan] -> [Reiseplan]
addPosToList fp ziel ps = foldr (\plan ges -> if atZiel plan ziel then plan:ges else (filter (\x -> isValid x) (addPossibleDest fp plan)) ++ ges) [] ps where
  addPossibleDest fp plan@((_,_,aort,_):_) = [ attach plan ziel | ziel <- fp aort ]
  atZiel ((_,_,anko,_):_) ziel = anko == ziel

-- Fuegt den (Ankunftsort, Abfahrzeit, Reisedauer) zu einem Reiseplan hinzu
attach :: Reiseplan -> (Ankunftsort, Abfahrtszeit, Reisedauer) -> Reiseplan
attach ls@((abfo, abfz, anko, ankz):xs) (panko,pabfz,preised) = (anko, pabfz, panko, (mod (pabfz + preised) 24)) : ls

remCircular :: [Reiseplan] -> [Reiseplan]
remCircular rp = filter (inCircle) rp where
  inCircle p = gothrough p []
  gothrough [] _ = True
  gothrough ((abo,_,_,_):ps) ls
    | elem abo ls = False
    | otherwise = gothrough ps (abo:ls)

-- Schaut ob ein Reiseplan gueltig ist
isValid :: Reiseplan -> Bool
isValid ps = foldr (&&) True $ map (checkit) ps where
  checkit (abfo, abfz, anko, ankz)
    | (abfz >= 18 || abfz <= 6) && (ankz >= 18 || ankz <= 6) = True
    | otherwise = False

-- kalkuliert den Reiseplanproviant fuer den gegebenen Reiseplan
calcProv :: Reiseplan -> Reiseproviant
calcProv [] = 0
calcProv ((_,abfz,_,ankz):[]) = 0
calcProv ((_,_,_,ankz):ss@(_,abfz2,_,_):xs)
  | ankz /= abfz2 && ((ankz > abfz2) && abfz2 >= 12)  = 1 + calcProv (ss:xs)
  | otherwise = 0 + calcProv (ss:xs)

-- kalkuliert fuer die gegebene Umgebung (Fahrplan und Ausgangsort) einen minimal benoetigten Reiseproviant
proviant_planer :: Fahrplan -> Ausgangsort -> Zielort -> Maybe Reiseproviant
proviant_planer fp aus ziel
  | reise_planer fp aus ziel == Nothing = Nothing
  | otherwise = getProv $ reise_planer fp aus ziel where
    getProv (Just plan) = Just $ calcProv plan