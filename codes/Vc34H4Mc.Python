import networkx as nx
from collections import OrderedDict
from networkx.drawing.nx_agraph import write_dot
import numpy as np
import matplotlib.pyplot as plt
import pylab

f = open("E:\\input.txt", "r")
class State:
    name = ''
    input

    def __init__(self, name):
        self.name = name
        self.input = []


    def copynodes(self, a,b):
        self.name = "".join(set(a.name+b.name))
        self.name =  "".join(set(self.name))
        self.input = []
        for pair in a.input:
            self.input.append(pair)
        for pair in b.input:
            self.input.append(pair)

    def inline(self, line):
        if self.name == line[0][0]:
            pair = (line[1][0],line[1][1])
            self.input.append(pair)

    def count_states(self, a):
        count = 0
        for pair in self.input:
            if pair[0] == a:
                count+=1
        return count

    def check_pair(self,a,b,t):
        at = 0
        bt = 0
        for pair in self.input:
            if pair[0] == t:
                if pair[1] == a:
                    at = 1
                if pair[1] == b:
                    bt = 1
        return at*bt

    def get_pair(self,t):
        o1 = 0
        o2 = 0
        if (self.count_states(t) > 1):
            i=0
            while not self.input[i][0]== t:
                i+=1
            o1 = self.input[i][1]
            i+=1
            while not self.input[i][0]== t:
                i+=1
            o2 = self.input[i][1]
            return (o1,o2)

    def delete_pair(self,a,b,t):
        i = 0
        while not self.input[i][0] == t:
            if self.input[i][1] == a:
                break
            i += 1
        self.input.remove(self.input[i])
        while not self.input[i][0] == t:
            if self.input[i][1] == b:
                break
            i += 1
        temp = "".join(OrderedDict.fromkeys(a+b))
        self.input[i] = (self.input[i][0],"".join(set(temp)) )

    def delete_stait(self, a):
        for pair in self.input:
            if pair[1] == a:
                self.input.remove(pair)

    def change_stait(self,a,b):
        for pair in self.input:
            if pair[1] == a:
                pair[1] = b


level = 3
right = 1
left = 1
linelist = []
term_set =  set()
noterm_set =  set()
for line in f:
    if line.count("->") > 1:
        print("Wrong syntax.")
        quit()
    if line.find("->") == -1:
        print("Wrong syntax.")
        quit()
    line = line.replace("\n","")
    line = line.split("->")
    linelist.append(line)
    print(line)

    if len(line[0]) > len(line[1]):
        level = min(level, 0)


    if line[0].upper() != line[0]:
        level = min(level, 1)
    if not line[0].isalpha():
        level = min(level, 1)

    if len(line[1]) > 2:
        level = min(level, 2)
    if len(line[1]) == 1 & line[1].islower():
        continue
    if len(line[1]) == 1 & line[1].isupper():
        level = min(level, 2)
        continue
    if line[1].lower() == line[1]:
         level = min(level, 2)
    if line[1][0].isupper():
        left = 0
    if line[1][1].isupper():
        right = 0

if  right + left != 1:
    level = min(level, 2)

print("Grammar level is: " + str(level))
f.close()
if level < 3:
    print("Wrong level.")
    quit()
for line in linelist:
    if len(line[1]) == 1:
        line[1] = line[1]+'N'

print(linelist)
netermset = set()
termset = set()
for line in linelist:
    netermset.add(line[0][0])
    netermset.add(line[1][1])
    termset.add(line[1][0])
print(termset)
print(netermset)
classes = []
for neterm in netermset:
    classes.append(State(neterm))
for node in classes:
    for line in linelist:
        node.inline(line)
G = nx.DiGraph()
labels = {}
labels1 = {}
for nodes in classes:
    G.add_node(nodes.name)
    labels[nodes]=(r'$'+nodes.name+'$')
    for pairs in nodes.input:
        G.add_edges_from([(nodes.name, pairs[1])],label=(pairs[0]))
        labels1 [(nodes.name, pairs[1])] = pairs[0]


pos = nx.spring_layout(G)
nx.draw_networkx_nodes(G, pos, cmap=plt.get_cmap('jet'), node_size = 500)
nx.draw_networkx_edges(G, pos,  edge_color='b', arrows=True)
nx.draw_networkx_labels(G,pos);
nx.draw_networkx_edge_labels(G,pos,edge_labels=labels1,font_size=10)
##nx.draw(G)
plt.show()
netermset1 = {'S'}
netermsettemp = netermset1.copy()
changed =1
while(changed == 1):
    changed = 0
    for node in classes:
        for name in netermset1:
            if node.name == name:
                for pair in node.input:
                    netermsettemp.add(pair[1])
        if not netermsettemp == netermset1:
            changed = 1
        netermset1 = netermsettemp.copy()
netermsettemp = netermset - netermset1
for node in classes:
    if node.name in netermsettemp:
        classes.remove(node)
    for name in netermsettemp:
        node.delete_stait(name)
for node in classes:
    if node.name in netermsettemp:
        classes.remove(node)
    for name in netermsettemp:
        node.delete_stait(name)
netermset1 = 'U'
i =1
while i == 1:
    i=0
    count = 0
    for ele in netermset1:
        for node in classes:
            for element in node.input:
                if element == ele:
                    print('d')




print("lol")
G = nx.DiGraph()
labels = {}
labels1 = {}
for nodes in classes:
    G.add_node(nodes.name)
    labels[nodes]=(r'$'+nodes.name+'$')
    for pairs in nodes.input:
        G.add_edges_from([(nodes.name, pairs[1])],label=(pairs[0]))
        labels1 [(nodes.name, pairs[1])] = pairs[0]


pos = nx.spring_layout(G)
nx.draw_networkx_nodes(G, pos, cmap=plt.get_cmap('jet'), node_size = 500)
nx.draw_networkx_edges(G, pos,  edge_color='b', arrows=True)
nx.draw_networkx_labels(G,pos);
nx.draw_networkx_edge_labels(G,pos,edge_labels=labels1,font_size=10)
##nx.draw(G)
plt.show()