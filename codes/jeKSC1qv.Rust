struct Prime {
    curr: u64,
    sieve: Box<Fn(u64) -> bool>,
}

fn primes() -> Prime {
    Prime {
        curr: 2,
        sieve: Box::new(|_| true),
    }
}

impl Iterator for Prime {
    type Item = u64;

    fn next(&mut self) -> Option<Self::Item> {
        let next_sieve =
            |x| (x % self.curr != 0) & (*self.sieve)(x);
        let next_value =
            (self.curr+1..std::u64::MAX).filter(|&x| next_sieve(x)).next();

        match next_value {
            Some(p) => {
                self.curr = p;
                self.sieve = Box::new(next_sieve);
                return next_value;
            }
            None => None
        }
    }
}