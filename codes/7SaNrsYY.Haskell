-- up to this point, everything shall be given

add :: Path a -> Weight -> a -> Path a
add (P cost path) w n = P (cost+w) (n:path)

contains :: Eq n => Path n -> n -> Bool
contains (P cost []) n = False
contains (P cost (x:xs)) n = if x/=n then contains (P cost xs) n
  else True


cycles :: (Show n, Ix n) => Graph n -> n -> [Path n]
cycles g n = (P 0 [n]) : traver (g!n) g (P 0 [n])


traver :: Ix n => [(Weight,n)] -> Graph n -> Path n -> [Path n]
traver [] _ _ = []
traver ((w,n):es) g (P pw pn) = if (not (contains (P pw pn) n)) then traver (g!n) g (add (P pw pn) w n) ++ traver es g (P pw pn)
else if (n == head pn) then [ add (P pw pn) w n] ++ traver es g (P pw pn)
else traver es g (P pw pn)


tpp :: (Ix n, Show n) => Graph n -> n -> Maybe (Path n)
tpp g n | ls == [] = Nothing
        |otherwise = Just (head (getShortest ls))
                 where ls = (filterCycle g (cycles g n))


filterCycle :: (Eq n, Ix n) => Graph n -> [Path n] -> [Path n]
filterCycle _ [] = []
filterCycle g ((P w p):xs) = if (length p == ((numNodes g)+1)) then (P w p) : filterCycle g xs
    else filterCycle g xs

     
getShortest :: (Show n, Ix n) => [Path n] -> [Path n]
getShortest p | p == [] = []
              | length p == 1 = p
              | (getCost (head p)) < (getCost (head (tail p))) = getShortest ((head p): (tail (tail p)))
              |otherwise = getShortest (tail p)

getCost :: (Show n, Ix n) => Path n -> Integer
getCost (P c _) = c