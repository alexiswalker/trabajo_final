module Main where

import Codec.Archive.Zip
import Path
import Path.IO (resolveFile')
import Data.List (sortBy)
import Data.Ord (comparing)
import qualified Data.Map as Map
import qualified Data.ByteString.Char8 as Byte (ByteString)

loadTicks :: Path Abs File -> EntrySelector -> IO Byte.ByteString
loadTicks ticksArchivePath entry = withArchive ticksArchivePath (getEntry entry)

extractEntries :: Path Abs File -> IO [EntrySelector]
extractEntries ticksArchivePath = withArchive ticksArchivePath loadEntries

loadEntries :: ZipArchive [EntrySelector]
loadEntries = fmap Map.keys getEntries

-- not really useful since only natural ordering is required
customSort :: Ord a => a -> a -> Ordering
customSort elem1 elem2 = compare elem1 elem2

main :: IO ()
main = do
    let ticksArchivePath = resolveFile' "data/data-small.zip" :: IO (Path Abs File)  
    let entries = extractEntries =<< ticksArchivePath :: IO [EntrySelector]  
    sortedEntries <- fmap (sortBy customSort) entries :: IO [EntrySelector]
    print sortedEntries