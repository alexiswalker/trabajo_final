From 7bf8919ec77ec0136cd87ae19872ea0d494c5369 Mon Sep 17 00:00:00 2001
From: Bradley T. Hughes <bradley.hughes@nokia.com>
Date: Thu, 29 Sep 2011 11:45:01 +0200
Subject: [PATCH] Don't use implicit QAtomic* casts in QFreeList

Pair the testAndSetRelease() calls with loadAcquire(), to ensure that
memory initialization happens in program order. Use load() otherwise
when accessing the data vectors.

Change-Id: Ib5b9d6ef6107f87aa8e3ea2dd3a7f9116c75da70

diff --git a/src/corelib/tools/qfreelist_p.h b/src/corelib/tools/qfreelist_p.h
index 74ba3b5..9a385a4 100644
--- a/src/corelib/tools/qfreelist_p.h
+++ b/src/corelib/tools/qfreelist_p.h
@@ -218,21 +218,21 @@ template <typename T, typename ConstantsType>
 inline QFreeList<T, ConstantsType>::~QFreeList()
 {
     for (int i = 0; i < ConstantsType::BlockCount; ++i)
-        delete [] static_cast<ElementType *>(_v[i]);
+        delete [] _v[i].load();
 }
 
 template <typename T, typename ConstantsType>
 inline typename QFreeList<T, ConstantsType>::ConstReferenceType QFreeList<T, ConstantsType>::at(int x) const
 {
     const int block = blockfor(x);
-    return _v[block][x].t();
+    return (_v[block].load())[x].t();
 }
 
 template <typename T, typename ConstantsType>
 inline typename QFreeList<T, ConstantsType>::ReferenceType QFreeList<T, ConstantsType>::operator[](int x)
 {
     const int block = blockfor(x);
-    return _v[block][x].t();
+    return (_v[block].load())[x].t();
 }
 
 template <typename T, typename ConstantsType>
@@ -241,18 +241,18 @@ inline int QFreeList<T, ConstantsType>::next()
     int id, newid, at;
     ElementType *v;
     do {
-        id = _next; // .loadAqcuire();
+        id = _next.loadAcquire();
 
         at = id & ConstantsType::IndexMask;
         const int block = blockfor(at);
-        v = _v[block];
+        v = _v[block].loadAcquire();
 
         if (!v) {
             v = allocate((id & ConstantsType::IndexMask) - at, ConstantsType::Sizes[block]);
             if (!_v[block].testAndSetRelease(0, v)) {
                 // race with another thread lost
                 delete [] v;
-                v = _v[block];
+                v = _v[block].loadAcquire();
                 Q_ASSERT(v != 0);
             }
         }
@@ -271,11 +271,11 @@ inline void QFreeList<T, ConstantsType>::release(int id)
 {
     int at = id & ConstantsType::IndexMask;
     const int block = blockfor(at);
-    ElementType *v = _v[block];
+    ElementType *v = _v[block].load();
 
     int x, newid;
     do {
-        x = _next; // .loadAcquire();
+        x = _next.loadAcquire();
         v[at].next = x & ConstantsType::IndexMask;
 
         newid = incrementserial(x, id);