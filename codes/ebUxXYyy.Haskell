import Data.Matrix

mult = multStd

eps = 0.00001

a :: Matrix Double
a = fromLists [[-0.491, 0.2, -0.299],
                [-0.1, 0.499, -0.1],
                [0.1, -0.2, 0.561]]                
                
d :: Matrix Double
d = fromList 3 1 [-1.36848, 0.7806, 0.40722]

b :: Matrix Double
b' :: Matrix Double
b' = fromLists $ map (\(row, n) -> (map (\p -> - p/(getElem n n a )) row)) (zip (toLists a) [1..])
b = b' - (diagonal 0 (getDiag b'))

c :: Matrix Double
c = fromList 3 1 (map (\(el, n) -> el/(getElem n n a )) (zip (toList d) [1..]))

x0 :: Matrix Double
x0 = fromList 3 1 [1.0, 0, 0]

inaccuracyOf :: Matrix Double -> Matrix Double
inaccuracyOf x = a `mult` x - d

maxOf :: Matrix Double -> Double
maxOf = maximum. (map abs) . toList

jacobi :: Matrix Double -> Int -> (Matrix Double, Int)
jacobi x n = if (maxOf(inaccuracyOf x) < eps) then (x, n)
    else jacobi (b `mult` x + c) (n + 1)
      
zeidelUpdate :: Matrix Double -> Matrix Double
zeidelUpdate x = x'
    where 
        (x', _) = foldl (\(y, n) row -> (calc y n (fromList 1 3 row) , n + 1) ) (x, 1) (toLists b)
        calc y n row = setElem ((getElem 1 1 (row `mult` y)) + (getElem n 1 c)) (n, 1) y
        
zeidel :: Matrix Double -> Int -> (Matrix Double, Int)
zeidel x n = if (maxOf(inaccuracyOf x) < eps) then (x, n)
    else zeidel (zeidelUpdate x) (n + 1)