using System.Threading.Tasks;
using Microsoft.Azure.NotificationHubs;

namespace WpfApp
{
    //need nuget Microsoft.Azure.NotificationHubs

    public static class AzurePushes
    {
        public static NotificationHubClient Hub { get; private set; }

        public static void Init(string azureConnection, string azureHub)
        {
            Hub = NotificationHubClient.CreateClientFromConnectionString(azureConnection, azureHub);
        }

        public static async Task<bool> Post(PnsType pns, string confId, string message)
        {
            NotificationOutcome outcome = null;

            try
            {
                switch (pns)
                {

                    case PnsType.Apns:
                        // iOS
                        var alert = @"{""aps"":{""alert"":""" + message + @""", ""sound"" : ""default""}}";
                        outcome = await Hub.SendAppleNativeNotificationAsync(alert, new[] { confId });
                        break;
                    case PnsType.Gcm:
                        // Android
                        var notif = @"{""data"":{""title"":""Title of android push"", ""message"":""" + message + @""", ""confId"": """ + confId + @"""}}";
                        outcome = await Hub.SendGcmNativeNotificationAsync(notif, new[] { confId });
                        break;
                }
            }
            catch
            {
                return false;
            }


            if (outcome != null)
            {
                if (!((outcome.State == NotificationOutcomeState.Abandoned) || (outcome.State == NotificationOutcomeState.Unknown)))
                {
                    return true;
                }
            }

            return false;
        }
    }

    public enum PnsType
    {
        Apns,

        Gcm
    }
}