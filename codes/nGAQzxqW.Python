#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import os
import glob
from collections import defaultdict

project_directory = 'E:/Code/polishedcrystal'

# ['bulbasaur', 'ivysaur', ..., 'mr__mime', ..., 'celebi']
ordered_mons = []
# {'bulbasaur': 'bulbasaur', 'mrmime': 'mr__mime', ...}
underscore_names = {}
# {'MONSTER': {'bulbasaur', ...}, 'PLANT': {'bulbasaur', ...}, ...}
group_mons = defaultdict(lambda: set())
# {'bulbasaur': {'MONSTER', 'PLANT'}, ...}
mon_groups = defaultdict(lambda: set())
# {'bulbasaur': {'TACKLE', 'GROWL', ...}, ...}
learnset_moves = defaultdict(lambda: set())
# {'bulbasaur': {'LIGHT_SCREEN', 'SKULL_BASH', ...}, ...}
egg_moves = defaultdict(lambda: set())
# {'MONSTER': {'LIGHT_SCREEN', 'SKULL_BASH', ...}, ...}
group_movepools = defaultdict(lambda: set())

def get_ordered_mons():
	# Read constants/pokemon_constants.asm
	with open('constants/pokemon_constants.asm', 'r') as file:
		for line in file:
			# Assume that Pokémon constants are defined first in this file
			if line.startswith('\tconst '):
				# '\tconst MR__MIME   ; $7a' => 'mr__mime'
				mon = line[7:].split(';')[0].strip().lower()
				ordered_mons.append(mon)
				simple_name = mon.replace('_', '')
				underscore_names[simple_name] = mon
			# Assume that NUM_POKEMON is defined right after all the Pokémon
			if line.startswith('NUM_POKEMON'):
				break

def get_egg_groups(mon):
	# Read data/base_stats/<mon>.asm
	filename = 'data/base_stats/%s.asm' % mon
	with open(filename, 'r') as file:
		for line in file:
			line = line.rstrip()
			# Assume that egg groups are correctly commented
			if line.endswith('; egg groups'):
				# '\tdn MONSTER, PLANT ; egg groups' => ['MONSTER', 'PLANT']
				groups = [g.strip() for g in line[4:].split(';')[0].split(',')]
				assert len(groups) == 2
				for group in groups:
					group_mons[group].add(mon)
					mon_groups[mon].add(group)
				break
		else:
			raise RuntimeError('no egg group data for %s' % mon)

def get_learnset_moves():
	# Read data/evos_attacks.asm
	with open('data/evos_attacks.asm', 'r') as file:
		current_mon = None
		reading_moves = False
		for line in file:
			line = line.rstrip()
			# Assume that evo/attack data is labeled consistently
			if line.endswith('EvosAttacks:'):
				# 'MrMimeEvosAttacks:' => 'mrmime'
				simple_name = line[:-12].lower()
				if simple_name not in underscore_names:
					raise RuntimeError('bad EvosAttacks name: %s' % simple_name)
				current_mon = underscore_names[simple_name]
				continue
			# Assume that level-up moves are terminated consistently
			if line.endswith('no more level-up moves'):
				current_mon = None
				reading_moves = False
				continue
			# Assume that evolutions are terminated consistently
			if line.endswith('no more evolutions'):
				reading_moves = True
				continue
			if not current_mon or not reading_moves:
				continue
			# 'db 1, TACKLE ; comment' => 'TACKLE'
			move = line.split(';')[0].split(',')[-1].strip()
			learnset_moves[current_mon].add(move)

def get_egg_moves():
	# Read data/egg_moves.asm
	with open('data/egg_moves.asm', 'r') as file:
		current_mon = None
		for line in file:
			line = line.rstrip()
			# Skip the trivial case
			if line.startswith('NoEggMoves'):
				continue
			# Assume that egg move data is labeled consistently
			if line.endswith('EggMoves:'):
				# 'MrMimeEggMoves:' => 'mrmime'
				simple_name = line[:-9].lower()
				if simple_name not in underscore_names:
					raise RuntimeError('bad EggMoves name: %s' % simple_name)
				current_mon = underscore_names[simple_name]
				continue
			# Assume that egg moves are terminated consistently
			if line.endswith('db $ff') or line.endswith('db -1'):
				current_mon = None
				continue
			if not current_mon:
				continue
			# Assume that egg moves are defined consistently
			if not line.startswith('\tdb '):
				continue
			# '\tdb LIGHT_SCREEN' => 'LIGHT_SCREEN'
			move = line.split()[-1]
			egg_moves[current_mon].add(move)

def build_group_movepools():
	for group, mons in group_mons.items():
		for mon in mons:
			for move in learnset_moves[mon]:
				group_movepools[group].add(move)

def find_bad_egg_moves(mon):
	mon_movepool = set()
	for group in mon_groups[mon]:
		mon_movepool.update(group_movepools[group])
	for move in egg_moves[mon]:
		if move not in mon_movepool:
			print('%s cannot learn the egg move %s' % (mon, move))

def main():
	os.chdir(project_directory)
	get_ordered_mons()
	for mon in ordered_mons:
		get_egg_groups(mon)
	get_learnset_moves()
	get_egg_moves()
	build_group_movepools()
	for mon in ordered_mons:
		find_bad_egg_moves(mon)

if __name__ == '__main__':
	main()