{-# LANGUAGE OverloadedStrings, DeriveGeneric #-}

module NewAgent where

import Data.Aeson
import Data.Text
import Control.Applicative
import Control.Monad
import qualified Data.ByteString.Lazy.Char8 as ByteStringLazyChar8
import GHC.Generics

data NewAgent =
  NewAgent { new_agent :: !Object
           , resto :: Resto
           } deriving (Show, Generic)

data Resto =
  Resto { id' :: !Text
        , name :: !Text
        , primary_skillset :: ![Text]
        , secondary_skillset :: ![Text]
        } deriving (Show, Generic)

instance FromJSON Resto
instance ToJSON Resto

instance FromJSON NewAgent

{-
instance FromJSON NewAgent where
  parseJSON (Object (object [NewAgent "new_agent" <$> object [newAgent]]) =
     <*> newAgent .: "id"
     <*> newAgent .: "name"
     <*> newAgent .: "primary_skillset"
     <*> newAgent .: "secondary_skillset"

--let parseasdf (Object rst) = Resto <$> rst .: "id" <*> rst .: "name" <*> rst .: "primary_skillset" <*> rst .: "secondary_skillset"

instance FromJSON NewAgent where
  parseJSON (Object n_a) =
    NewAgent <$> n_a .: "new_agent"
             <*> n_a .: parseJSON (Resto resto)
  parseJSON _ = mzero
-}


instance ToJSON NewAgent