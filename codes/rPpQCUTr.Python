def compute_alignment(a, b, gap_penalty, scoring):
    """
    Поиск выравнивания при помощи подъёма по
    матрице из правого нижнего угла в левый верхний
    """
    align_a = ""
    align_b = ""
    i = len(a) - 1
    j = len(b) - 1
    f = compute_matrix(a, b, scoring, gap_penalty)

    while i >= 0 or j >= 0:
        insert = gap_penalty.insert_penalty(i, j + 1)
        delete = gap_penalty.delete_penalty(i + 1, j)
        if i >= 0 and j >= 0 and \
                f[i + 1][j + 1] == f[i][j] + scoring(a[i], b[j]):
            align_a = a[i] + align_a
            align_b = b[j] + align_b
            i -= 1
            j -= 1
        elif i >= 0 and f[i + 1][j + 1] == f[i][j + 1] - insert:
            align_a = a[i] + align_a
            align_b = "-" + align_b
            i -= 1
        elif j >= 0 and f[i + 1][j + 1] == f[i + 1][j] - delete:
            align_a = "-" + align_a
            align_b = b[j] + align_b
            j -= 1
        else:
            raise Exception("Error in computing alignment")

    return align_a, align_b, f[-1][-1]


def compute_matrix(a, b, scoring, gap_penalty):
    """
    Создание матрицы, содержащий оптимальные оценки для выравнивания первых
    i и j символов строк a и b соответственно
    """
    f = [[0 for _ in range(len(b) + 1)] for _ in range(len(a) + 1)]

    for i in range(1, len(a) + 1):
        f[i][0] = f[i - 1][0] - gap_penalty.insert_penalty(i - 1, 0)
        gap_penalty.add_insert_penalty(i, 0)

    for i in range(1, len(b) + 1):
        f[0][i] = f[0][i - 1] - gap_penalty.delete_penalty(0, i - 1)
        gap_penalty.add_delete_penalty(0, i)

    for i in range(len(a)):
        for j in range(len(b)):
            match = f[i][j] + scoring(a[i], b[j])
            delete = f[i + 1][j] - gap_penalty.delete_penalty(i + 1, j)
            insert = f[i][j + 1] - gap_penalty.insert_penalty(i, j + 1)
            f[i + 1][j + 1] = max(match, insert, delete)

            if f[i + 1][j + 1] == delete:
                gap_penalty.add_delete_penalty(i + 1, j + 1)
            elif f[i + 1][j + 1] == insert:
                gap_penalty.add_insert_penalty(i + 1, j + 1)

    return f


class GapPenalty:
    def __init__(self, a, b, bias_penalty, penalty):
        self.delete_gaps = self.__zero(len(a), len(b))
        self.insert_gaps = self.__zero(len(a), len(b))
        self.bias_penalty = bias_penalty
        self.penalty = penalty

    def __zero(self, la, lb):
        return [[0 for _ in range(lb + 1)] for _ in range(la + 1)]

    def add_insert_penalty(self, i, j):
        self.delete_gaps[i][j] = self.delete_gaps[i - 1][j] + 1

    def add_delete_penalty(self, i, j):
        self.delete_gaps[i][j] = self.delete_gaps[i][j - 1] + 1

    def insert_penalty(self, i, j):
        if self.insert_gaps[i-1][j] != 0:
            return self.penalty
        else:
            return self.bias_penalty

    def delete_penalty(self, i, j):
        if self.insert_gaps[i][j-1] != 0:
            return self.penalty
        else:
            return self.bias_penalty


def complicated_similarity_matrix():
    weights = [
        [10, -1, -3, -4],
        [-1, 7, -5, -3],
        [-3, -5, 9, 0],
        [-4, -3, 0, 8]
    ]

    return create_similarity_matrix(weights)


def create_similarity_matrix(weights):
    keys = ['A', 'G', 'C', 'T']

    columns_marked = [{k: v for k, v in zip(keys, w)} for w in weights]
    return {k: v for k, v in zip(keys, columns_marked)}


matrix = complicated_similarity_matrix()


def default_scoring(x, y):
    return matrix[x][y]