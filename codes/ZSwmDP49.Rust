fn calculate_factor(mut n: u32) -> (Prime, u32) {

	let sqrt = (n as f64).sqrt() as u32;

	let mut i = 2;

	while n > 1 && i <= sqrt {
       
		if n % i == 0 {
   
			let mut current = Prime { 
                prime: i, 
                count: 1 
            };
   
			n /= i;

			while n % i == 0  {
				current.count += 1;
				n /= i;
			}
   
			return (current, n);

		}
       
        i += if i == 2 { 1 } else { 2 }

	}

	return (Prime { prime: n, count: 1 }, 1);

}

/// Trying to refactor to...

fn calculate_factor(mut n: u32) -> (Prime, u32) {

	let sqrt = (n as f64).sqrt() as u32;
    
    return (2..)
    .filter(|&i|
        i == 2 || i % 2 != 0
    ).take_while(|&i| {
        n > 1 && i <= sqrt
    }).find(|&i| {
        n % i == 0
    }).map(|i| {
        
        let mut current = Prime { 
            prime: i, 
            count: 1 
        };

        n /= i;

        while n % i == 0 { 
            current.count += 1; 
            n /= i; 
        }

        (current, n)

    }).unwrap_or((Prime { prime: n, count: 1 }, 1));

}