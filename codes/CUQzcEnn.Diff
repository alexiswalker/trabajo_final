Script/Spell: added check cast spells system

diff -r 318bcbf10272 -r b4fd3ec9ade7 src/server/game/Spells/Spell.cpp
--- a/src/server/game/Spells/Spell.cpp	Fri Sep 16 15:37:39 2011 +0400
+++ b/src/server/game/Spells/Spell.cpp	Sat Sep 17 00:04:12 2011 +0400
@@ -5310,6 +5310,11 @@
                 }
             }
 
+    // script hook
+    castResult = CallScriptCheckCastHandlers();
+    if (castResult != SPELL_CAST_OK)
+        return castResult;
+
     for (int i = 0; i < MAX_SPELL_EFFECTS; i++)
     {
         // for effects of spells that have only one target
@@ -7634,4 +7639,23 @@
 
         (*scritr)->_FinishScriptCall();
     }
+}
+
+SpellCastResult Spell::CallScriptCheckCastHandlers()
+{
+    SpellCastResult retVal = SPELL_CAST_OK;
+    for (std::list<SpellScript *>::iterator scritr = m_loadedScripts.begin(); scritr != m_loadedScripts.end() ; ++scritr)
+    {
+        (*scritr)->_PrepareScriptCall(SPELL_SCRIPT_HOOK_CHECK_CAST);
+        std::list<SpellScript::CheckCastHandler>::iterator hookItrEnd = (*scritr)->OnCheckCast.end(), hookItr = (*scritr)->OnCheckCast.begin();
+        for (; hookItr != hookItrEnd; ++hookItr)
+        {
+            SpellCastResult tempResult = (*hookItr).Call(*scritr);
+            if (retVal == SPELL_CAST_OK)
+                retVal = tempResult;
+        }
+
+        (*scritr)->_FinishScriptCall();
+    }
+    return retVal;
 }
\ No newline at end of file
diff -r 318bcbf10272 -r b4fd3ec9ade7 src/server/game/Spells/Spell.h
--- a/src/server/game/Spells/Spell.h	Fri Sep 16 15:37:39 2011 +0400
+++ b/src/server/game/Spells/Spell.h	Sat Sep 17 00:04:12 2011 +0400
@@ -706,6 +706,7 @@
 
         // Scripting system
         void LoadScripts();
+        SpellCastResult CallScriptCheckCastHandlers();
         void PrepareScriptHitHandlers();
         bool CallScriptEffectHandlers(SpellEffIndex effIndex);
         void CallScriptBeforeHitHandlers();
diff -r 318bcbf10272 -r b4fd3ec9ade7 src/server/game/Spells/SpellScript.cpp
--- a/src/server/game/Spells/SpellScript.cpp	Fri Sep 16 15:37:39 2011 +0400
+++ b/src/server/game/Spells/SpellScript.cpp	Sat Sep 17 00:04:12 2011 +0400
@@ -152,6 +152,16 @@
     }
 }
 
+SpellScript::CheckCastHandler::CheckCastHandler(SpellCheckCastFnType checkCastHandlerScript)
+{
+    _checkCastHandlerScript = checkCastHandlerScript;
+}
+
+SpellCastResult SpellScript::CheckCastHandler::Call(SpellScript* spellScript)
+{
+    return (spellScript->*_checkCastHandlerScript)();
+}
+
 SpellScript::EffectHandler::EffectHandler(SpellEffectFnType _pEffectHandlerScript, uint8 _effIndex, uint16 _effName)
     : _SpellScript::EffectNameCheck(_effName), _SpellScript::EffectHook(_effIndex)
 {
diff -r 318bcbf10272 -r b4fd3ec9ade7 src/server/game/Spells/SpellScript.h
--- a/src/server/game/Spells/SpellScript.h	Fri Sep 16 15:37:39 2011 +0400
+++ b/src/server/game/Spells/SpellScript.h	Sat Sep 17 00:04:12 2011 +0400
@@ -125,7 +125,9 @@
     SPELL_SCRIPT_HOOK_HIT,
     SPELL_SCRIPT_HOOK_AFTER_HIT,
     SPELL_SCRIPT_HOOK_UNIT_TARGET_SELECT,
+    SPELL_SCRIPT_HOOK_CHECK_CAST,
 };
+
 #define HOOK_SPELL_HIT_START SPELL_SCRIPT_HOOK_EFFECT
 #define HOOK_SPELL_HIT_END SPELL_SCRIPT_HOOK_AFTER_HIT + 1
 #define HOOK_SPELL_START SPELL_SCRIPT_HOOK_EFFECT
@@ -138,12 +140,22 @@
     // DO NOT OVERRIDE THESE IN SCRIPTS
     public:
         #define SPELLSCRIPT_FUNCTION_TYPE_DEFINES(CLASSNAME) \
+            typedef SpellCastResult(CLASSNAME::*SpellCheckCastFnType)(); \
             typedef void(CLASSNAME::*SpellEffectFnType)(SpellEffIndex); \
             typedef void(CLASSNAME::*SpellHitFnType)(); \
             typedef void(CLASSNAME::*SpellUnitTargetFnType)(std::list<Unit*>&); \
 
         SPELLSCRIPT_FUNCTION_TYPE_DEFINES(SpellScript)
 
+        class CheckCastHandler
+        {
+            public:
+                CheckCastHandler(SpellCheckCastFnType checkCastHandlerScript);
+                SpellCastResult Call(SpellScript* spellScript);
+            private:
+                SpellCheckCastFnType _checkCastHandlerScript;
+        };
+
         class EffectHandler : public  _SpellScript::EffectNameCheck, public _SpellScript::EffectHook
         {
             public:
@@ -177,6 +189,7 @@
         };
 
         #define SPELLSCRIPT_FUNCTION_CAST_DEFINES(CLASSNAME) \
+        class CheckCastHandlerFunction : public SpellScript::CheckCastHandler { public: CheckCastHandlerFunction(SpellCheckCastFnType _checkCastHandlerScript) : SpellScript::CheckCastHandler((SpellScript::SpellCheckCastFnType)_checkCastHandlerScript) {} }; \
         class EffectHandlerFunction : public SpellScript::EffectHandler { public: EffectHandlerFunction(SpellEffectFnType _pEffectHandlerScript, uint8 _effIndex, uint16 _effName) : SpellScript::EffectHandler((SpellScript::SpellEffectFnType)_pEffectHandlerScript, _effIndex, _effName) {} }; \
         class HitHandlerFunction : public SpellScript::HitHandler { public: HitHandlerFunction(SpellHitFnType _pHitHandlerScript) : SpellScript::HitHandler((SpellScript::SpellHitFnType)_pHitHandlerScript) {} }; \
         class UnitTargetHandlerFunction : public SpellScript::UnitTargetHandler { public: UnitTargetHandlerFunction(SpellUnitTargetFnType _pUnitTargetHandlerScript, uint8 _effIndex, uint16 _targetType) : SpellScript::UnitTargetHandler((SpellScript::SpellUnitTargetFnType)_pUnitTargetHandlerScript, _effIndex, _targetType) {} }; \
@@ -202,6 +215,12 @@
         // SpellScript interface
         // hooks to which you can attach your functions
         //
+
+        // example: OnCheckCast += SpellCheckCastFn();
+        // where function is SpellCastResult function()
+        HookList<CheckCastHandler> OnCheckCast;
+        #define SpellCheckCastFn(F) CheckCastHandlerFunction(&F)
+
         // example: OnEffect += SpellEffectFn(class::function, EffectIndexSpecifier, EffectNameSpecifier);
         // where function is void function(SpellEffIndex effIndex)
         HookList<EffectHandler> OnEffect;