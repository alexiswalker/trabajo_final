;TRANSACCIONES BANCARIAS CON REFERENCIAS
(defn transferirDinero [desde hasta cantidad]
  (dosync
    (when (>= @desde cantidad)
      (alter desde - cantidad)
      ;Ponemos un sleep para que la transacción sea más realista
      (Thread/sleep (rand-int 10))
      (alter hasta + cantidad)
    )
  )
)
 
;Realiza transacciones random
(defn transaccionesRandom [cuenta1 cuenta2 n]
  (dotimes [_ n]
    (let [[desde hasta] (shuffle [cuenta1 cuenta2])]
      (transferirDinero desde hasta (rand-int @desde))
    )
  )
)

;Resetea cuentas
(defn resetearCuentas! []
  (dosync
    (ref-set cuenta-a 50)
    (ref-set cuenta-b 50)
  )
)

;Realiza un print del estado de las cuentas y su suma
(defn printResultados []
  (let [[ca cb] (dosync [@cuenta-a @cuenta-b])]
    (println "Estado cuenta A:" ca)
    (println "Estado cuenta B:" cb)
    (println "Suma de Cuentas:" (+ ca cb))
    (println "")
  )
)

;Lanza N threads realizando M transacciones con cada uno.
;Muestra el estado de las cuentas cada segundo.
(defn transaccionesMultiplesThreads [nThreads nTransXThread]
  (let [futures
        (doall
          (for [_ (range nThreads)]
            (future (transaccionesRandom cuenta-a cuenta-b nTransXThread))))]
    (while (not (every? future-done? futures))
      ;Cada segundo se imprime el estado de las cuentas
      (printResultados)
      (Thread/sleep 1000)
    )
  )
)

;Ambas cuentas tienen inicialmente 50 pesos
(def cuenta-a (ref 50))
(def cuenta-b (ref 50))

(println "TRANSACCIONES BANCARIAS CON REFS EN UN UNICO THREAD")
(transaccionesRandom cuenta-a cuenta-b 1000)
(printResultados)

(println "TRANSACCIONES BANCARIAS CON REFS EN MULTIPLES THREADS")
(resetearCuentas!)
(transaccionesMultiplesThreads 5 1000)