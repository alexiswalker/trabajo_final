From d14d54e55d14f6d01ab8209cc80230eefecd4832 Mon Sep 17 00:00:00 2001
From: Sam Protsenko <joe.skb7@gmail.com>
Date: Sat, 16 Dec 2017 02:09:57 +0200
Subject: [PATCH] DO NOT MERGE: Under construction

Signed-off-by: Sam Protsenko <joe.skb7@gmail.com>
---
 Makefile                  |  1 +
 include/board/hw_common.h |  4 +++
 include/drivers/eeprom.h  | 10 +++++++
 src/drivers/coil_emu.c    | 21 +++++++++++++
 src/drivers/eeprom.c      | 75 +++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 111 insertions(+)
 create mode 100644 include/drivers/eeprom.h
 create mode 100644 src/drivers/eeprom.c

diff --git a/Makefile b/Makefile
index 5269a84..62c353f 100644
--- a/Makefile
+++ b/Makefile
@@ -40,6 +40,7 @@ OBJS +=					\
 	src/drivers/bt.o		\
 	src/drivers/coil.o		\
 	src/drivers/dac.o		\
+	src/drivers/eeprom.o		\
 	src/drivers/nstimer.o		\
 	src/drivers/pmtimer.o		\
 	src/drivers/serial.o		\
diff --git a/include/board/hw_common.h b/include/board/hw_common.h
index ef86e82..df270f7 100644
--- a/include/board/hw_common.h
+++ b/include/board/hw_common.h
@@ -2,6 +2,7 @@
 #define BOARD_HW_COMMON_H
 
 #include <board/nvic.h>
+#include <tools/sizes.h>
 
 #include <libopencm3/cm3/nvic.h>
 #include <libopencm3/stm32/adc.h>
@@ -87,4 +88,7 @@
 #define SERIAL_RX_GPIO_PIN	GPIO_USART1_RX			/* PA10 */
 #define SERIAL_IRQN		NVIC_USART1_IRQ
 
+/* Flash */
+#define FLASH_SIZE		SZ_128K				/* md.ld, ROM */
+
 #endif /* BOARD_HW_COMMON_H */
diff --git a/include/drivers/eeprom.h b/include/drivers/eeprom.h
new file mode 100644
index 0000000..2b3df2f
--- /dev/null
+++ b/include/drivers/eeprom.h
@@ -0,0 +1,10 @@
+#ifndef DRIVERS_EEPROM_H
+#define DRIVERS_EEPROM_H
+
+#include <stdbool.h>
+#include <stdint.h>
+
+uint32_t ee_read_u32(uint32_t offset);
+bool ee_write_u32(uint32_t offset, uint32_t data);
+
+#endif /* DRIVERS_EEPROM_H */
diff --git a/src/drivers/coil_emu.c b/src/drivers/coil_emu.c
index 8c6e889..ada5e88 100644
--- a/src/drivers/coil_emu.c
+++ b/src/drivers/coil_emu.c
@@ -5,19 +5,40 @@
 
 #include <drivers/coil.h>
 
+#include <drivers/eeprom.h>
 #include <drivers/serial.h>
 
 #include <libopencm3/cm3/assert.h>
 
 #include <stddef.h>
 
+#define EEPROM_COIL_FREQ_OFFSET		0x0
+#define TEST_FREQ			7766	/* XXX */
+
 int coil_get_params(struct coil_params *params)
 {
+	bool res;
+
 	cm3_assert(params != NULL);
 
 	params->freq = CONFIG_COIL_EMU_FREQ;
 	params->type = COIL_TYPE_EMU;
 
+	/* XXX */
+	pr_debug("### EEPROM: Writing freq = %u\n", TEST_FREQ);
+	res = ee_write_u32(EEPROM_COIL_FREQ_OFFSET, TEST_FREQ);
+	if (!res) {
+		pr_debug("### EEPROM: Write error!\n");
+	} else {
+		unsigned int freq;
+
+		freq = ee_read_u32(EEPROM_COIL_FREQ_OFFSET);
+		if (freq != TEST_FREQ)
+			pr_debug("### EEPROM: Invalid read data: %u\n", freq);
+		else
+			pr_debug("### EEPROM: Success! freq = %u\n", freq);
+	}
+
 	pr_debug("coil_get_params: freq = %u Hz, type = %#x (emulated)\n",
 			params->freq, params->type);
 
diff --git a/src/drivers/eeprom.c b/src/drivers/eeprom.c
new file mode 100644
index 0000000..79ec1e5
--- /dev/null
+++ b/src/drivers/eeprom.c
@@ -0,0 +1,75 @@
+/*
+ * EEPROM implementation using internal STM32 flash.
+ */
+
+#include <drivers/eeprom.h>
+
+#include <board/hw.h>
+
+#include <libopencm3/stm32/flash.h>
+
+#define FLASH_PAGE_SIZE		SZ_2K
+#define FLASH_END		(FLASH_BASE + FLASH_SIZE)
+
+#define EEPROM_SIZE		FLASH_PAGE_SIZE
+#define EEPROM_OFFSET		(FLASH_SIZE - EEPROM_SIZE)
+#define EEPROM_ADDR		(FLASH_BASE + EEPROM_OFFSET)
+
+/**
+ * Read 32-bit word from EEPROM.
+ *
+ * @param offset Offset in EEPROM
+ *
+ * @return Read data
+ */
+uint32_t ee_read_u32(uint32_t offset)
+{
+	uint32_t *memory_ptr = (uint32_t *)(EEPROM_ADDR + offset);
+
+	return *memory_ptr;
+}
+
+/**
+ * Write 32-bit word to EEPROM.
+ *
+ * @param offset Offset in EEPROM
+ * @param data Data to write
+ *
+ * @return true on success write or false on failure
+ */
+bool ee_write_u32(uint32_t offset, uint32_t data)
+{
+	uint32_t addr = EEPROM_ADDR + offset;
+	uint32_t page_addr = addr;
+	uint32_t flash_status;
+
+	/* Check if address is in proper range */
+	if (addr >= FLASH_END)
+		return false;
+
+	/* Calculate page address (aligned address) */
+	if ((addr % FLASH_PAGE_SIZE) != 0)
+		page_addr -= (addr % FLASH_PAGE_SIZE);
+
+	flash_unlock();
+
+	/* Erase page */
+	flash_erase_page(page_addr);
+	flash_status = flash_get_status_flags();
+	if (flash_status != FLASH_SR_EOP)
+		return false;
+
+	/* ---- Programming flash memory ---- */
+
+	/* Programming word data */
+	flash_program_word(addr, data);
+	flash_status = flash_get_status_flags();
+	if (flash_status != FLASH_SR_EOP)
+		return false;
+
+	/* Verify if correct data is programmed */
+	if (ee_read_u32(offset) != data)
+		return false;
+
+	return true;
+}
-- 
2.15.1