use super::Log;

use std::thread;
use std::sync::mpsc;
use std::sync::Arc;
use std::sync::Mutex;


enum Message {
    NewJob(Job),
    Terminate
}

struct Worker {
    id:         usize,
    thread:     Option<thread::JoinHandle<()>>,
}

pub struct WorkerPool {
    workers:    Vec<Worker>,
    sender:     mpsc::Sender<Message>,
}

trait FnBox {
    fn call_box(self: Box<Self>);
}

impl<F: FnOnce()> FnBox for F {
    fn call_box(self: Box<F>) {
        (*self)()
    }
}

impl WorkerPool {
    pub fn new(size: usize) -> Self{
        assert!(size > 0);

        let (sender, receiver) = mpsc::channel();

        let receiver = Arc::new(Mutex::new(receiver));

        let mut workers = Vec::with_capacity(size);

        for id in 0..size {
            workers.push(Worker::new(id, receiver.clone()));
        }

        WorkerPool {
            workers,
            sender
        }
    }

    pub fn exec<F>(&self, f: F) 
        where F: FnOnce() + Send + 'static
    {
        let job = Box::new(f);

        self.sender.send(Message::NewJob(job)).expect("Didn't send job to workers correctly")
    }
}

impl Drop for WorkerPool {
    fn drop(&mut self) {
        Log(format!("Joining workers..."));

        for _ in self.workers.iter_mut() {
           self.sender.send(Message::Terminate).expect("Didn't send Message::Terminate correctly");
        }

        for worker in self.workers.iter_mut() {

            if let Some(thread) = worker.thread.take() {
                                    thread.join().unwrap();
            }

        }

        Log(format!("Done!"));
   }
}

type Job = Box<FnBox + Send + 'static>;
impl Worker {
    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) -> Self {
        let thread = thread::spawn(move || {
            loop {
                let msg = receiver.lock().expect("Can't lock reciever channel")
                            .recv().expect("Didn't receive job correctly");

                match msg {
                    
                    Message::NewJob(job) => {
                        Log(format!("Worker id{} received job", id));
                        job.call_box();
                    },

                    Message::Terminate => {
                        Log(format!("Worker id{} received terminating request", id));
                        break;
                    },

                };
            } 
        });

        Worker { 
            id:         id,
            thread:     Some(thread),
        }
    }
}