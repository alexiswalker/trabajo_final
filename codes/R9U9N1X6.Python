import networkx as nx
from collections import OrderedDict
from networkx.drawing.nx_agraph import write_dot
import numpy as np
import matplotlib.pyplot as plt
import pylab

f = open("E:\\input1.txt", "r")
class State:
    name = ''
    input

    def __init__(self, name):
        self.name = name
        self.input = []


    def copynodes(self, a,b):
        self.name = "".join(set(a.name+b.name))
        self.name =  "".join(set(self.name))
        self.input = []
        for pair in a.input:
            self.input.append(pair)
        for pair in b.input:
            self.input.append(pair)

    def inline(self, line):
        if self.name == line[0][0]:
            self.input.append(line[1])

    def count_states(self, a):
        count = 0
        for pair in self.input:
            if pair[0] == a:
                count+=1
        return count

    def check_pair(self,a,b,t):
        at = 0
        bt = 0
        for pair in self.input:
            if pair[0] == t:
                if pair[1] == a:
                    at = 1
                if pair[1] == b:
                    bt = 1
        return at*bt

    def get_pair(self,t):
        o1 = 0
        o2 = 0
        if (self.count_states(t) > 1):
            i=0
            while not self.input[i][0]== t:
                i+=1
            o1 = self.input[i][1]
            i+=1
            while not self.input[i][0]== t:
                i+=1
            o2 = self.input[i][1]
            return (o1,o2)

    def delete_pair(self,a,b,t):
        i = 0
        while not self.input[i][0] == t:
            if self.input[i][1] == a:
                break
            i += 1
        self.input.remove(self.input[i])
        while not self.input[i][0] == t:
            if self.input[i][1] == b:
                break
            i += 1
        temp = "".join(OrderedDict.fromkeys(a+b))
        self.input[i] = (self.input[i][0],"".join(set(temp)) )

    def delete_stait(self, a):
        for pair in self.input:
            if pair == a:
                self.input.remove(pair)

    def change_stait(self,a,b):
        for pair in self.input:
            if pair[1] == a:
                pair[1] = b

    def if_goes_to(self,a):
        for line in self.input:
            for char in a:
                if char in line or char == line:
                    return True
        return False

    def replacesome(self,a,b):
        for i, line in enumerate(self.input):
            if len(self.input[i]) > 1:
                self.input[i] = line.replace(a,b)



level = 3
right = 1
left = 1
linelist = []
term_set =  set()
noterm_set =  set()
for line in f:
    if line.count("->") > 1:
        print("Wrong syntax.")
        quit()
    if line.find("->") == -1:
        print("Wrong syntax.")
        quit()
    line = line.replace("\n","")
    line = line.split("->")
    linelist.append(line)
    print(line)

    if len(line[0]) > len(line[1]):
        level = min(level, 0)


    if line[0].upper() != line[0]:
        level = min(level, 1)
    if not line[0].isalpha():
        level = min(level, 1)

    if len(line[1]) > 2:
        level = min(level, 2)
    if len(line[1]) == 1 & line[1].islower():
        continue
    if len(line[1]) == 1 & line[1].isupper():
        level = min(level, 2)
        continue
    if line[1].lower() == line[1]:
         level = min(level, 2)
    if line[1][0].isupper():
        left = 0
    if line[1][1].isupper():
        right = 0

if  right + left != 1:
    level = min(level, 2)

print("Grammar level is: " + str(level))
f.close()
if level < 2:
    print("Wrong level.")
    quit()
print(linelist)
netermset = set()
termset = set()

f1 = open("E:\\term.txt", "r")
for line in f1:
    line = line.replace("\n", "")
    line = line.split(" ")
    for char in line:
        if char.isupper():
            netermset.add(char)
        else:
            termset.add(char)

print(termset)
print(netermset)
classes = []
for neterm in netermset:
    classes.append(State(neterm))
for node in classes:
    for line in linelist:
        node.inline(line)
print("check")

for node in classes:
    for line in node.input:
        print(node.name+"->"+line)
##bespolezniy
print("bespolezniy")
temptermset = set()
temptermset1 = set()
flag = 0
while flag == 0:
    for node in classes:
        for line in node.input:
            if line in termset or node.if_goes_to(temptermset):
                temptermset1.add(node.name)
    if temptermset1 == temptermset:
        flag = 1
    temptermset = temptermset1.copy()
print(temptermset)
for node in classes:
    if not node.name in  temptermset:
        classes.remove(node)
    for name in netermset - temptermset:
        for string in node.input:
            if name in string or string == name:
                node.input.remove(string)
for node in classes:
    for line in node.input:
        print(node.name+"->"+line)
print("test")

namelist = ['A','B','C','D','X','Y','Z','Q','R','S','J']
#nedostijimiy
print("nedostijimiy")
temptermset = {'E'}
temptermset1 = {'E'}
flag = 0
while flag == 0:
    for node in classes:
        for line in temptermset:
            if node.name in temptermset:
                for nod1 in classes:
                    tempset = {nod1.name}
                    if node.if_goes_to(tempset):
                        temptermset1.add(nod1.name)
    if temptermset1 == temptermset:
        flag = 1
    temptermset = temptermset1.copy()
print(temptermset)
for node in classes:
    if not node.name in  temptermset:
        classes.remove(node)
    for name in netermset - temptermset:
        for string in node.input:
            if name in string or string == name:
                node.input.remove(string)
for node in classes:
    for line in node.input:
        print(node.name+"->"+line)
        #epsilon
print("epsilon")
netermset = temptermset.copy()
temptermset = set()
temptermset1 = set()
flag = 0
for node in classes:
    for line in node.input:
        if line == 'e':
            temptermset.add(node.name)
            node.input.remove('e')
for char in temptermset:
    for node in classes:
        for line in node.input:
            if char in line:
                node.input.append(line.replace(char,''))
for node in classes:
    for line in node.input:
        if line == '':
            node.input.remove('')
netermset.add(namelist[0])
classes.append(State(namelist[0]))
classes[-1].input.append('e')
classes[-1].input.append('E')
namelist.remove(namelist[0])
print("")
for node in classes:
    for line in node.input:
        print(node.name+"->"+line)
        #porojdenie simvola
print("porojdenie simvola")
flag = 0
for node in classes:
    for line in node.input:
        if len(line) == 1 and line.isupper():
            node.input.remove(line)
            for node1 in classes:
                if node1.name == line:
                    for line1 in node1.input:
                        node.input.append(line1)
print("")
for node in classes:
    for line in node.input:
        print(node.name+"->"+line)
#!
print("!")
for node in classes:
    for line in node.input:
        temp = line[0]
        count = 0
        for line1 in node.input:
            if temp == line1[0] and len(line1) > 1:
                count+=1
        if count > 1:
            classes.append(State(namelist[0]))
            namelist.remove(namelist[0])
            for line1 in node.input:
                if (temp == line1[0]) and len(line1) > 1:
                    classes[-1].input.append(line1[1:])
                    node.replacesome(line1[1:],classes[-1].name)
            for line2 in node.input:
                while node.input.count(line2) > 1:
                    node.input.remove(line2)
        count = 0
        for node1 in classes:
            for node2 in classes:
                if (node1.input == node2.input) and (len(node1.input) == len(node2.input)) and not (node1.name == node2.name):
                    namelist.append(node2.name)
                    for node3 in classes:
                        for i, list4 in enumerate(node3.input):
                            node3.input[i] = list4.replace(node2.name,node1.name)
                    classes.remove(node2)
print("")

for node in classes:
    for line in node.input:
        print(node.name+"->"+line)
#rek
print("rek")
for node in classes:
    for line in node.input:
        if node.name == line[0]:
            classes.append(State(namelist[0]))
            namelist.remove(classes[-1].name)
            classes[-1].input.append(line[1:])
            classes[-1].input.append(line[1:]+classes[-1].name)
            node.input.remove(line)
            temp = []
            for line1 in node.input:
                temp.append(line1+classes[-1].name)
            for line2 in temp:
                node.input.append(line2)
print("")
for node in classes:
    for line in node.input:
        print(node.name+"->"+line)

flag = 0
for node in classes:
    for line in node.input:
        if len(line) == 1 and line.isupper():
            node.input.remove(line)
            for node1 in classes:
                if node1.name == line:
                    for line1 in node1.input:
                        node.input.append(line1)
for node1 in classes:
    for node2 in classes:
        if (node1.input == node2.input) and (len(node1.input) == len(node2.input)) and not (node1.name == node2.name):
            namelist.append(node2.name)
            for node3 in classes:
                for i, list4 in enumerate(node3.input):
                    node3.input[i] = list4.replace(node2.name,node1.name)
            classes.remove(node2)
print("")
for node in classes:
    for line in node.input:
        print(node.name+"->"+line)