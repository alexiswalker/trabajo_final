extern "C" {
    fn register_callback(cb: extern "C" fn() -> *const c_char);
}


pub struct MyStruct<'a> {
    state: &'a HashMap<String, String>
}

impl<'a> MyStruct<'a> {
    pub fn new(state: &'a HashMap<String, String>) -> MyStruct<'a> {
        return MyStruct { state: state };
    }

    pub fn start(&mut self, port: i32) {
        register_callback(self.callback);
    }

    extern "C" fn callback(&self) -> *const c_char {
        let some_string = self.state.get("hurray");
        return CString::new(some_string).unwrap().as_ptr();
    }
}