use std::path::Path;
use std::fs::File;
use std::error::Error;

use std::io::prelude::*;

fn find_min(v: &Vec<i32>) -> i32 {
    let mut min = v[0];
    for i in v {
        if *i < min {
            min = *i;
        }
    }
    min
}

fn find_max(v: &Vec<i32>) -> i32 {
    let mut max = v[0];
    for i in v {
        if *i > max {
            max = *i
        }
    }
    max
}

fn find_average(v: &Vec<i32>) -> f32 {
    let mut sum: f32 = 0.0;
    for i in v {
        sum += *i as f32;
    }
    sum / v.len() as f32
}

fn find_median(v: &Vec<i32>) -> f32 {
    let mut c = v.to_vec();

    for i in 0..c.len() {
        let mut sorted = true;

        for j in 0..(c.len()-1-i) {
            if c[j+1] < c[j] {
                let tmp = c[j];
                c[j] = c[j+1];
                c[j+1] = tmp;
                sorted = false;
            }
        }

        if sorted == true {
            break;
        }
    }

    if c.len() % 2 == 0 {
        let middle = c.len() / 2;
        return (c[middle] + c[middle-1]) as f32 / 2.0
    } 
    else {
        return c[c.len() / 2] as f32;
    }
}

fn main() {
    let path = Path::new("data.txt");
    let display = path.display();

    let mut file = match File::open(&path) {
        Err(why) => panic!("couldn't open \"{}\": {}", display, why.description()),
        Ok(file) => file,
    };

    let mut data = String::new();
    match file.read_to_string(&mut data) {
        Err(why) => panic!("couldn't read \"{}\": {}", display, why.description()),
        Ok(_) => print!("file: \"{}\" contains: [{}]", display, data),
    };

    println!("");

    let data: Vec<&str> = data.split(' ').collect();

    let mut numbers: Vec<i32> = Vec::new();

    for d in &data {
        let number: i32 = d.trim().parse().expect("Not a number!");
        numbers.push(number);
    }

    let min = find_min(&numbers);
    let max = find_max(&numbers);
    let avg = find_average(&numbers);
    let median = find_median(&numbers);

    let mut output = String::new();
    output += "Min: ";
    output += &min.to_string();
    output += "\n";

    output += "Max: ";
    output += &max.to_string();
    output += "\n";

    output += "Average: ";
    output += &avg.to_string();
    output += "\n";

    output += "Median: ";
    output += &median.to_string();
    output += "\n";

    let path = Path::new("output.txt");
    let display = path.display();

    let mut file = match File::create(path) {
        Err(why) => panic!("couldn't create \"{}\": {}", display, why.description()),
        Ok(file) => file,
    };

    match file.write_all(output.as_bytes()) {
        Err(why) => panic!("couldn't write to \"{}\": {}", display, why.description()),
        Ok(_) => println!("successfully wrote to {}", display)
    };
}