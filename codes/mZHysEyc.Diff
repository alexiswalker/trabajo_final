diff --git a/binaries/data/mods/public/gui/lobby/lobby.js b/binaries/data/mods/public/gui/lobby/lobby.js
index 2c98a57..ed23d32 100644
--- a/binaries/data/mods/public/gui/lobby/lobby.js
+++ b/binaries/data/mods/public/gui/lobby/lobby.js
@@ -381,6 +381,7 @@ function init(attribs)
 		returnToMainMenu();
 		return;
 	}
+	warn(Engine.IsXmppClientConnected());
 
 	initMusic();
 	global.music.setState(global.music.states.MENU);
diff --git a/source/lobby/IXmppClient.h b/source/lobby/IXmppClient.h
index 18c9d56..c90ccfc 100644
--- a/source/lobby/IXmppClient.h
+++ b/source/lobby/IXmppClient.h
@@ -33,6 +33,7 @@ public:
 
 	virtual void connect() = 0;
 	virtual void disconnect() = 0;
+	virtual bool isConnected() = 0;
 	virtual void recv() = 0;
 	virtual void SendIqGetBoardList() = 0;
 	virtual void SendIqGetProfile(const std::string& player) = 0;
diff --git a/source/lobby/XmppClient.cpp b/source/lobby/XmppClient.cpp
index 9bbc91d..53480b0 100644
--- a/source/lobby/XmppClient.cpp
+++ b/source/lobby/XmppClient.cpp
@@ -75,7 +75,7 @@ IXmppClient* IXmppClient::create(const std::string& sUsername, const std::string
  * @param regOpt If we are just registering or not.
  */
 XmppClient::XmppClient(const std::string& sUsername, const std::string& sPassword, const std::string& sRoom, const std::string& sNick, const int historyRequestSize, bool regOpt)
-	: m_client(NULL), m_mucRoom(NULL), m_registration(NULL), m_username(sUsername), m_password(sPassword), m_nick(sNick), m_initialLoadComplete(false), m_sessionManager()
+	: m_client(NULL), m_mucRoom(NULL), m_registration(NULL), m_username(sUsername), m_password(sPassword), m_nick(sNick), m_initialLoadComplete(false), m_isConnected(false), m_sessionManager()
 {
 	// Read lobby configuration from default.cfg
 	std::string sServer;
@@ -176,6 +176,11 @@ void XmppClient::disconnect()
 	m_client->disconnect();
 }
 
+bool XmppClient::isConnected()
+{
+	return m_isConnected;
+}
+
 void XmppClient::recv()
 {
 	m_client->recv(1);
@@ -202,6 +207,7 @@ void XmppClient::onConnect()
 	{
 		CreateGUIMessage("system", "connected");
 		m_mucRoom->join();
+		m_isConnected = true;
 	}
 
 	if (m_registration)
@@ -232,6 +238,7 @@ void XmppClient::onDisconnect(gloox::ConnectionError error)
 	m_HistoricGuiMessages.clear();
 
 	CreateGUIMessage("system", "disconnected", "reason", ConnectionErrorToString(error));
+	m_isConnected = false;
 }
 
 /**
diff --git a/source/lobby/XmppClient.h b/source/lobby/XmppClient.h
index fbe5f6e..e96239b 100644
--- a/source/lobby/XmppClient.h
+++ b/source/lobby/XmppClient.h
@@ -52,6 +52,7 @@ private:
 
 	// State
 	bool m_initialLoadComplete;
+	bool m_isConnected;
 
 public:
 	// Basic
@@ -61,6 +62,7 @@ public:
 	// Network
 	void connect();
 	void disconnect();
+	bool isConnected();
 	void recv();
 	void SendIqGetBoardList();
 	void SendIqGetProfile(const std::string& player);
diff --git a/source/lobby/scripting/JSInterface_Lobby.cpp b/source/lobby/scripting/JSInterface_Lobby.cpp
index 99707dc..10054eb 100644
--- a/source/lobby/scripting/JSInterface_Lobby.cpp
+++ b/source/lobby/scripting/JSInterface_Lobby.cpp
@@ -39,6 +39,7 @@ void JSI_Lobby::RegisterScriptFunctions(const ScriptInterface& scriptInterface)
 	scriptInterface.RegisterFunction<void, &JSI_Lobby::StopXmppClient>("StopXmppClient");
 	scriptInterface.RegisterFunction<void, &JSI_Lobby::ConnectXmppClient>("ConnectXmppClient");
 	scriptInterface.RegisterFunction<void, &JSI_Lobby::DisconnectXmppClient>("DisconnectXmppClient");
+	scriptInterface.RegisterFunction<bool, &JSI_Lobby::IsXmppClientConnected>("IsXmppClientConnected");
 	scriptInterface.RegisterFunction<void, &JSI_Lobby::SendGetBoardList>("SendGetBoardList");
 	scriptInterface.RegisterFunction<void, std::wstring, &JSI_Lobby::SendGetProfile>("SendGetProfile");
 	scriptInterface.RegisterFunction<void, JS::HandleValue, &JSI_Lobby::SendRegisterGame>("SendRegisterGame");
@@ -118,6 +119,12 @@ void JSI_Lobby::DisconnectXmppClient(ScriptInterface::CxPrivate* UNUSED(pCxPriva
 	g_XmppClient->disconnect();
 }
 
+bool JSI_Lobby::IsXmppClientConnected(ScriptInterface::CxPrivate* UNUSED(pCxPrivate))
+{
+	ENSURE(g_XmppClient);
+	return g_XmppClient->isConnected();
+}
+
 void JSI_Lobby::SendGetBoardList(ScriptInterface::CxPrivate* UNUSED(pCxPrivate))
 {
 	if (!g_XmppClient)
diff --git a/source/lobby/scripting/JSInterface_Lobby.h b/source/lobby/scripting/JSInterface_Lobby.h
index ae87103..8eca667 100644
--- a/source/lobby/scripting/JSInterface_Lobby.h
+++ b/source/lobby/scripting/JSInterface_Lobby.h
@@ -36,6 +36,7 @@ namespace JSI_Lobby
 	void StopXmppClient(ScriptInterface::CxPrivate* pCxPrivate);
 	void ConnectXmppClient(ScriptInterface::CxPrivate* pCxPrivate);
 	void DisconnectXmppClient(ScriptInterface::CxPrivate* pCxPrivate);
+	bool IsXmppClientConnected(ScriptInterface::CxPrivate* pCxPrivate);
 	void SendGetBoardList(ScriptInterface::CxPrivate* pCxPrivate);
 	void SendGetProfile(ScriptInterface::CxPrivate* pCxPrivate, const std::wstring& player);
 	void SendGameReport(ScriptInterface::CxPrivate* pCxPrivate, JS::HandleValue data);