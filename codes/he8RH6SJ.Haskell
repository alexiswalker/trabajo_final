
{-
This property says that the area under the curve of the left side, should equal the area under the right side, when
using the origin as an argument. For example, f(-4) to f(0), on a function like x^2, should equal f(0) to f(4). The
tolerance range is set to 0.5 to accomdate really large 'x' values like 6634. A tolerance range like 1e-6 would work
just fine for 'x' values up to 5000 and then some, but not more than 6000.
Side Note: Replacing "definiteIntegral x 0" with "definiteIntegral 0 (-x)" yields the same result.
-}
integralProp1 x = let
    aEqualsX = definiteIntegral x 0 (\x -> x^2 + 1) 10000
    bEqualsX = definiteIntegral 0 x (\x -> x^2 + 1) 10000
    diff = bEqualsX - (negate aEqualsX)
    tol = 0.5
  in (abs diff <= tol)
testDefiniteIntegral1 = quickCheck integralProp1

{-
This property states that when approximating the area under the curve, having a large 'n' value will yield results that
are more accurate and smaller than having a small 'n' value. 
-}
integralProp2 (a,b) = let
    smallN = abs (definiteIntegral a b (\x -> x^2 + 1) 10)
    largeN = abs (definiteIntegral a b (\x -> x^2 + 1) 10000)
  in (smallN >= largeN)
testDefiniteIntegral2 = quickCheck integralProp2

{-
This property states that when approximating the area under a horizontal line, you can skip all steps and just subtract
'b' from 'a' and then multiply the result by 'b', and you'll get the same answer as integrating it.
Side Note: You can swap 'a' and 'b' in cond, and replace 'b' with 'a' in func's anonymous class, and still get the same result.
-}
integralProp3 (a,b,n) = let
    func = abs(definiteIntegral a b (\x -> b) n)
    cond = if n == 0 then 0.0 else abs((a - b) * b)
    test = func - cond
    tol = 1e-6
   in (test <= tol)
testDefiniteIntegral3 = quickCheck integralProp3

{-
This property also (indirectly) proves that when calculating the area under a horizontal line, the value of 'n' does not
matter as long as it is not 0; 'n' can be arbitrarily large (i.e. 10000) or small (1), and the answer will be the exact same.
Side note: Answers had to be rounded because floating point numbers cannot accurately be represented. The 'round' function
rounds to the nearest Integer, which is more than adequate for this property. 
-}
integralProp4 (a,b) = let
    lowestN  = round(abs(definiteIntegral a b (\x -> a) 1))
    lowN     = round(abs(definiteIntegral a b (\x -> a) 10))
    medN     = round(abs(definiteIntegral a b (\x -> a) 100))
    highN    = round(abs(definiteIntegral a b (\x -> a) 1000))
    highestN = round(abs(definiteIntegral a b (\x -> a) 10000))
  in (lowestN == lowN && lowN == medN && medN == highN && highN == highestN) 
testDefiniteIntegral4 = quickCheck integralProp4