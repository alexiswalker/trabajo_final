{"error":"Fragment shader compile error: WARNING: 0:181: '\n' : extension directive should occur before any non-preprocessor tokens\nERROR: 0:238: 'assign' : cannot convert from 'structure' to 'mediump 3-component vector of float'\n\u0000","line":0,"resource":{"_code":"\n\n\\js\n//define exported uniforms from the shader (name, uniform, widget)\nthis.createSampler(\"Texture\",\"u_texture\",{ missing:'white' });\nthis.createSampler(\"Spec. Texture\",\"u_specular_texture\");\nthis.createSampler(\"Normal Texture\",\"u_normal_texture\",{ missing:'normal' });\nthis._light_mode = 1;\n\n\\color.vs\n\nprecision mediump float;\nattribute vec3 a_vertex;\nattribute vec3 a_normal;\nattribute vec2 a_coord;\n\n//varyings\nvarying vec3 v_pos;\nvarying vec3 v_normal;\nvarying vec2 v_uvs;\n\n//matrices\nuniform mat4 u_model;\nuniform mat4 u_normal_model;\nuniform mat4 u_view;\nuniform mat4 u_viewprojection;\n\n//globals\nuniform float u_time;\nuniform vec4 u_viewport;\nuniform float u_point_size;\n\n#pragma shaderblock \"light\"\n#pragma shaderblock \"morphing\"\n#pragma shaderblock \"skinning\"\n\n//camera\nuniform vec3 u_camera_eye;\nvoid main() {\n\t\n\tvec4 vertex4 = vec4(a_vertex,1.0);\n\tv_normal = a_normal;\n\tv_uvs = a_coord;\n  \n  //deforms\n  applyMorphing( vertex4, v_normal );\n  applySkinning( vertex4, v_normal );\n\t\n\t//vertex\n\tv_pos = (u_model * vertex4).xyz;\n  \n  applyLight(v_pos);\n  \n\t//normal\n\tv_normal = (u_normal_model * vec4(v_normal,0.0)).xyz;\n\tgl_Position = u_viewprojection * vec4(v_pos,1.0);\n}\n\n\\color.fs\n\nprecision mediump float;\n\n//varyings\nvarying vec3 v_pos;\nvarying vec3 v_normal;\nvarying vec2 v_uvs;\n\n//globals\nuniform vec3 u_camera_eye;\nuniform vec4 u_clipping_plane;\nuniform float u_time;\nuniform vec4 u_background_color;\nuniform vec4 u_material_color;\n\nuniform sampler2D u_texture;\nuniform sampler2D u_specular_texture;\nuniform sampler2D u_normal_texture;\n\n#pragma shaderblock \"light\"\n#pragma shaderblock \"applyReflection\"\n\n#pragma snippet \"perturbNormal\"\n\nvoid main() {\n\tInput IN = getInput();\n\tSurfaceOutput o = getSurfaceOutput();\n\tvec4 surface_color = texture2D( u_texture, IN.uv ) * u_material_color;\n\to.Albedo = surface_color.xyz;\n\tvec4 spec = texture2D( u_specular_texture, IN.uv );\n\to.Specular = spec.x;  \n\to.Gloss = spec.y * 10.0;\n\to.Reflectivity = spec.x * 0.5;\n\tvec4 normal_pixel = texture2D( u_normal_texture, IN.uv );\n\to.Normal = perturbNormal( IN.worldNormal, IN.worldPos, v_uvs, normal_pixel.xyz );\n\t  \n\tvec4 final_color = vec4(0.0);\n\tLight LIGHT = getLight();\n\tfinal_color.xyz = computeLight( o, IN, LIGHT );\n\tfinal_color.a = surface_color.a;\n\tif( o.Reflectivity > 0.0 )\n\t\tfinal_color = applyReflection( IN, o, final_color );\n\t\n\tgl_FragColor = vec4(1.0,0.0,1.0,1.0);\n}\n","_functions":{},"_global_uniforms":{},"_code_parts":{"color":{"vs":{"code":"precision mediump float;\nattribute vec3 a_vertex;\nattribute vec3 a_normal;\nattribute vec2 a_coord;\n//varyings\nvarying vec3 v_pos;\nvarying vec3 v_normal;\nvarying vec2 v_uvs;\n//matrices\nuniform mat4 u_model;\nuniform mat4 u_normal_model;\nuniform mat4 u_view;\nuniform mat4 u_viewprojection;\n//globals\nuniform float u_time;\nuniform vec4 u_viewport;\nuniform float u_point_size;\n#pragma shaderblock \"light\"\n#pragma shaderblock \"morphing\"\n#pragma shaderblock \"skinning\"\n//camera\nuniform vec3 u_camera_eye;\nvoid main() {\nvec4 vertex4 = vec4(a_vertex,1.0);\nv_normal = a_normal;\nv_uvs = a_coord;\n//deforms\napplyMorphing( vertex4, v_normal );\napplySkinning( vertex4, v_normal );\n//vertex\nv_pos = (u_model * vertex4).xyz;\napplyLight(v_pos);\n//normal\nv_normal = (u_normal_model * vec4(v_normal,0.0)).xyz;\ngl_Position = u_viewprojection * vec4(v_pos,1.0);\n}","blocks":[],"pragmas":{"\"light\"":true,"\"morphing\"":true,"\"skinning\"":true},"uniforms":{"u_model":"mat4","u_normal_model":"mat4","u_view":"mat4","u_viewprojection":"mat4","u_time":"float","u_viewport":"vec4","u_point_size":"float","u_camera_eye":"vec3"},"attributes":{"a_vertex":"vec3","a_normal":"vec3","a_coord":"vec2"},"includes":{},"snippets":{},"shader_blocks":{"light":true,"morphing":true,"skinning":true},"is_dynamic":true,"fragments":[{"type":1,"code":"precision mediump float;\nattribute vec3 a_vertex;\nattribute vec3 a_normal;\nattribute vec2 a_coord;\nvarying vec3 v_pos;\nvarying vec3 v_normal;\nvarying vec2 v_uvs;\nuniform mat4 u_model;\nuniform mat4 u_normal_model;\nuniform mat4 u_view;\nuniform mat4 u_viewprojection;\nuniform float u_time;\nuniform vec4 u_viewport;\nuniform float u_point_size;"},{"type":2,"line":"#pragma shaderblock \"light\"","action":"shaderblock","param":"\"light\"","action_type":2,"shader_block":[1,"light"]},{"type":2,"line":"#pragma shaderblock \"morphing\"","action":"shaderblock","param":"\"morphing\"","action_type":2,"shader_block":[1,"morphing"]},{"type":2,"line":"#pragma shaderblock \"skinning\"","action":"shaderblock","param":"\"skinning\"","action_type":2,"shader_block":[1,"skinning"]},{"type":1,"code":"uniform vec3 u_camera_eye;\nvoid main() {\nvec4 vertex4 = vec4(a_vertex,1.0);\nv_normal = a_normal;\nv_uvs = a_coord;\napplyMorphing( vertex4, v_normal );\napplySkinning( vertex4, v_normal );\nv_pos = (u_model * vertex4).xyz;\napplyLight(v_pos);\nv_normal = (u_normal_model * vec4(v_normal,0.0)).xyz;\ngl_Position = u_viewprojection * vec4(v_pos,1.0);\n}"}],"streams":{}},"fs":{"code":"precision mediump float;\n//varyings\nvarying vec3 v_pos;\nvarying vec3 v_normal;\nvarying vec2 v_uvs;\n//globals\nuniform vec3 u_camera_eye;\nuniform vec4 u_clipping_plane;\nuniform float u_time;\nuniform vec4 u_background_color;\nuniform vec4 u_material_color;\nuniform sampler2D u_texture;\nuniform sampler2D u_specular_texture;\nuniform sampler2D u_normal_texture;\n#pragma shaderblock \"light\"\n#pragma shaderblock \"applyReflection\"\n#pragma snippet \"perturbNormal\"\nvoid main() {\nInput IN = getInput();\nSurfaceOutput o = getSurfaceOutput();\nvec4 surface_color = texture2D( u_texture, IN.uv ) * u_material_color;\no.Albedo = surface_color.xyz;\nvec4 spec = texture2D( u_specular_texture, IN.uv );\no.Specular = spec.x;\no.Gloss = spec.y * 10.0;\no.Reflectivity = spec.x * 0.5;\nvec4 normal_pixel = texture2D( u_normal_texture, IN.uv );\no.Normal = perturbNormal( IN.worldNormal, IN.worldPos, v_uvs, normal_pixel.xyz );\nvec4 final_color = vec4(0.0);\nLight LIGHT = getLight();\nfinal_color.xyz = computeLight( o, IN, LIGHT );\nfinal_color.a = surface_color.a;\nif( o.Reflectivity > 0.0 )\nfinal_color = applyReflection( IN, o, final_color );\ngl_FragColor = vec4(1.0,0.0,1.0,1.0);\n}","blocks":[],"pragmas":{"\"light\"":true,"\"applyReflection\"":true,"\"perturbNormal\"":true},"uniforms":{"u_camera_eye":"vec3","u_clipping_plane":"vec4","u_time":"float","u_background_color":"vec4","u_material_color":"vec4","u_texture":"sampler2D","u_specular_texture":"sampler2D","u_normal_texture":"sampler2D"},"attributes":{},"includes":{},"snippets":{"perturbNormal":true},"shader_blocks":{"light":true,"applyReflection":true},"is_dynamic":true,"fragments":[{"type":1,"code":"precision mediump float;\nvarying vec3 v_pos;\nvarying vec3 v_normal;\nvarying vec2 v_uvs;\nuniform vec3 u_camera_eye;\nuniform vec4 u_clipping_plane;\nuniform float u_time;\nuniform vec4 u_background_color;\nuniform vec4 u_material_color;\nuniform sampler2D u_texture;\nuniform sampler2D u_specular_texture;\nuniform sampler2D u_normal_texture;"},{"type":2,"line":"#pragma shaderblock \"light\"","action":"shaderblock","param":"\"light\"","action_type":2,"shader_block":[1,"light"]},{"type":2,"line":"#pragma shaderblock \"applyReflection\"","action":"shaderblock","param":"\"applyReflection\"","action_type":2,"shader_block":[1,"applyReflection"]},{"type":2,"line":"#pragma snippet \"perturbNormal\"","action":"snippet","param":"\"perturbNormal\"","action_type":3,"snippet":"perturbNormal"},{"type":1,"code":"void main() {\nInput IN = getInput();\nSurfaceOutput o = getSurfaceOutput();\nvec4 surface_color = texture2D( u_texture, IN.uv ) * u_material_color;\no.Albedo = surface_color.xyz;\nvec4 spec = texture2D( u_specular_texture, IN.uv );\no.Specular = spec.x;\no.Gloss = spec.y * 10.0;\no.Reflectivity = spec.x * 0.5;\nvec4 normal_pixel = texture2D( u_normal_texture, IN.uv );\no.Normal = perturbNormal( IN.worldNormal, IN.worldPos, v_uvs, normal_pixel.xyz );\nvec4 final_color = vec4(0.0);\nLight LIGHT = getLight();\nfinal_color.xyz = computeLight( o, IN, LIGHT );\nfinal_color.a = surface_color.a;\nif( o.Reflectivity > 0.0 )\nfinal_color = applyReflection( IN, o, final_color );\ngl_FragColor = vec4(1.0,0.0,1.0,1.0);\n}"}],"streams":{}}}},"_subfiles":{"js":"//define exported uniforms from the shader (name, uniform, widget)\nthis.createSampler(\"Texture\",\"u_texture\",{ missing:'white' });\nthis.createSampler(\"Spec. Texture\",\"u_specular_texture\");\nthis.createSampler(\"Normal Texture\",\"u_normal_texture\",{ missing:'normal' });\nthis._light_mode = 1;","color.vs":"precision mediump float;\nattribute vec3 a_vertex;\nattribute vec3 a_normal;\nattribute vec2 a_coord;\n//varyings\nvarying vec3 v_pos;\nvarying vec3 v_normal;\nvarying vec2 v_uvs;\n//matrices\nuniform mat4 u_model;\nuniform mat4 u_normal_model;\nuniform mat4 u_view;\nuniform mat4 u_viewprojection;\n//globals\nuniform float u_time;\nuniform vec4 u_viewport;\nuniform float u_point_size;\n#pragma shaderblock \"light\"\n#pragma shaderblock \"morphing\"\n#pragma shaderblock \"skinning\"\n//camera\nuniform vec3 u_camera_eye;\nvoid main() {\nvec4 vertex4 = vec4(a_vertex,1.0);\nv_normal = a_normal;\nv_uvs = a_coord;\n//deforms\napplyMorphing( vertex4, v_normal );\napplySkinning( vertex4, v_normal );\n//vertex\nv_pos = (u_model * vertex4).xyz;\napplyLight(v_pos);\n//normal\nv_normal = (u_normal_model * vec4(v_normal,0.0)).xyz;\ngl_Position = u_viewprojection * vec4(v_pos,1.0);\n}","color.fs":"precision mediump float;\n//varyings\nvarying vec3 v_pos;\nvarying vec3 v_normal;\nvarying vec2 v_uvs;\n//globals\nuniform vec3 u_camera_eye;\nuniform vec4 u_clipping_plane;\nuniform float u_time;\nuniform vec4 u_background_color;\nuniform vec4 u_material_color;\nuniform sampler2D u_texture;\nuniform sampler2D u_specular_texture;\nuniform sampler2D u_normal_texture;\n#pragma shaderblock \"light\"\n#pragma shaderblock \"applyReflection\"\n#pragma snippet \"perturbNormal\"\nvoid main() {\nInput IN = getInput();\nSurfaceOutput o = getSurfaceOutput();\nvec4 surface_color = texture2D( u_texture, IN.uv ) * u_material_color;\no.Albedo = surface_color.xyz;\nvec4 spec = texture2D( u_specular_texture, IN.uv );\no.Specular = spec.x;\no.Gloss = spec.y * 10.0;\no.Reflectivity = spec.x * 0.5;\nvec4 normal_pixel = texture2D( u_normal_texture, IN.uv );\no.Normal = perturbNormal( IN.worldNormal, IN.worldPos, v_uvs, normal_pixel.xyz );\nvec4 final_color = vec4(0.0);\nLight LIGHT = getLight();\nfinal_color.xyz = computeLight( o, IN, LIGHT );\nfinal_color.a = surface_color.a;\nif( o.Reflectivity > 0.0 )\nfinal_color = applyReflection( IN, o, final_color );\ngl_FragColor = vec4(1.0,0.0,1.0,1.0);\n}"},"_compiled_shaders":{},"_shaderblock_flags_num":0,"_shaderblock_flags":{},"_version":-1,"filename":"hplass/tmp/my_shader.glsl","_shaderblock_vars":null,"_has_error":true,"object_class":"ShaderCode","name":"my_shader.glsl","fullpath":"hplass/tmp/my_shader.glsl","remotepath":"hplass/tmp/my_shader.glsl"},"extra":"shader"}