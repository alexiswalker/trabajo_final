pub mod random_writer {

    use std::collections::HashMap;
    use std::iter::Peekable;
    use std::iter::Iterator;
    use std::str::Chars;
    use std::any::Any;
    use std::hash::Hash;
    use std::cmp::Eq;

    pub struct RandomWriter<T> {
        input: T,
        k: u32,
        len: u32,
    }

    impl<T> RandomWriter<T> {

        pub fn new(input: T, k: u32, len: u32) -> RandomWriter<T> {
            RandomWriter { input: input, k: k, len: len }
        }
                
        pub fn get_prefix_counts(&self, vals: Vec<T>) -> HashMap<&[T], HashMap<T, u32>>
            where T: Hash + Eq + Clone
        {
            let mut followers_counts = HashMap::new();
            for i in 0..vals.len() {
				// around here! how do I insert seed as a key?
                let seed = &vals[i..(i + self.k as usize)];
                followers_counts.insert(seed, HashMap::new());
            }
            followers_counts
        }
    }
}