diff --git a/module/icp/algs/modes/ccm.c b/module/icp/algs/modes/ccm.c
index 22aeb0a..c1d4dcc 100644
--- a/module/icp/algs/modes/ccm.c
+++ b/module/icp/algs/modes/ccm.c
@@ -78,8 +78,15 @@ ccm_mode_encrypt_contiguous_blocks(ccm_ctx_t *ctx, char *data, size_t length,
 		if (ctx->ccm_remainder_len > 0) {
 			need = block_size - ctx->ccm_remainder_len;
 
-			if (need > remainder)
+			if (need > remainder) {
+#ifdef _KERNEL
+				printk(KERN_DEBUG "HERE1: %u %u %u\n",
+				    (unsigned)ctx->ccm_remainder_len,
+				    (unsigned)need,
+				    (unsigned)remainder);
+#endif
 				return (CRYPTO_DATA_LEN_RANGE);
+			}
 
 			bcopy(datap, &((uint8_t *)ctx->ccm_remainder)
 			    [ctx->ccm_remainder_len], need);
@@ -215,6 +222,12 @@ ccm_encrypt_final(ccm_ctx_t *ctx, crypto_data_t *out, size_t block_size,
 	int i;
 
 	if (out->cd_length < (ctx->ccm_remainder_len + ctx->ccm_mac_len)) {
+#ifdef _KERNEL
+		printk(KERN_DEBUG "HERE2: %u %u %u\n",
+		    (unsigned)out->cd_length,
+		    (unsigned)ctx->ccm_remainder_len,
+		    (unsigned)ctx->ccm_mac_len);
+#endif
 		return (CRYPTO_DATA_LEN_RANGE);
 	}
 
@@ -226,6 +239,12 @@ ccm_encrypt_final(ccm_ctx_t *ctx, crypto_data_t *out, size_t block_size,
 	 */
 	if ((ctx->ccm_processed_data_len + ctx->ccm_remainder_len)
 	    != (ctx->ccm_data_len)) {
+#ifdef _KERNEL
+		printk(KERN_DEBUG "HERE3: %u %u %u\n",
+		    (unsigned)ctx->ccm_processed_data_len,
+		    (unsigned)ctx->ccm_remainder_len,
+		    (unsigned)ctx->ccm_data_len);
+#endif
 		return (CRYPTO_DATA_LEN_RANGE);
 	}
 
@@ -540,6 +559,11 @@ ccm_decrypt_final(ccm_ctx_t *ctx, crypto_data_t *out, size_t block_size,
 
 	/* Make sure output buffer can fit all of the plaintext */
 	if (out->cd_length < pt_len) {
+#ifdef _KERNEL
+		printk(KERN_DEBUG "HERE4: %u %u\n",
+		    (unsigned)out->cd_length,
+		    (unsigned)pt_len);
+#endif
 		return (CRYPTO_DATA_LEN_RANGE);
 	}
 
diff --git a/module/icp/algs/modes/gcm.c b/module/icp/algs/modes/gcm.c
index c0a26f5..2310446 100644
--- a/module/icp/algs/modes/gcm.c
+++ b/module/icp/algs/modes/gcm.c
@@ -152,8 +152,15 @@ gcm_mode_encrypt_contiguous_blocks(gcm_ctx_t *ctx, char *data, size_t length,
 		if (ctx->gcm_remainder_len > 0) {
 			need = block_size - ctx->gcm_remainder_len;
 
-			if (need > remainder)
+			if (need > remainder) {
+#ifdef _KERNEL
+				printk(KERN_DEBUG "HERE5: %u %u %u\n",
+				    (unsigned)ctx->gcm_remainder_len,
+				    (unsigned)need,
+				    (unsigned)remainder);
+#endif
 				return (CRYPTO_DATA_LEN_RANGE);
+			}
 
 			bcopy(datap, &((uint8_t *)ctx->gcm_remainder)
 			    [ctx->gcm_remainder_len], need);
@@ -246,6 +253,12 @@ gcm_encrypt_final(gcm_ctx_t *ctx, crypto_data_t *out, size_t block_size,
 
 	if (out->cd_length <
 	    (ctx->gcm_remainder_len + ctx->gcm_tag_len)) {
+#ifdef _KERNEL
+		printk(KERN_DEBUG "HERE6: %u %u %u\n",
+		    (unsigned)out->cd_length,
+		    (unsigned)ctx->gcm_remainder_len,
+		    (unsigned)ctx->gcm_tag_len);
+#endif
 		return (CRYPTO_DATA_LEN_RANGE);
 	}
 
diff --git a/module/icp/core/kcf_prov_lib.c b/module/icp/core/kcf_prov_lib.c
index 3cae872..6495a32 100644
--- a/module/icp/core/kcf_prov_lib.c
+++ b/module/icp/core/kcf_prov_lib.c
@@ -66,6 +66,12 @@ crypto_uio_data(crypto_data_t *data, uchar_t *buf, int len, cmd_type_t cmd,
 		 * The caller specified an offset that is larger than
 		 * the total size of the buffers it provided.
 		 */
+#ifdef _KERNEL
+		printk(KERN_DEBUG "HERE7: %u %u %u\n",
+		    (unsigned)vec_idx,
+		    (unsigned)uiop->uio_iovcnt,
+		    (unsigned)length);
+#endif
 		return (CRYPTO_DATA_LEN_RANGE);
 	}
 
@@ -111,6 +117,13 @@ crypto_uio_data(crypto_data_t *data, uchar_t *buf, int len, cmd_type_t cmd,
 			data->cd_length = len;
 			return (CRYPTO_BUFFER_TOO_SMALL);
 		default:
+#ifdef _KERNEL
+			printk(KERN_DEBUG "HERE8: %u %u %u %u\n",
+			    (unsigned)vec_idx,
+			    (unsigned)uiop->uio_iovcnt,
+			    (unsigned)length,
+			    (unsigned)cmd);
+#endif
 			return (CRYPTO_DATA_LEN_RANGE);
 		}
 	}
@@ -197,6 +210,12 @@ crypto_update_uio(void *ctx, crypto_data_t *input, crypto_data_t *output,
 		 * The caller specified an offset that is larger than the
 		 * total size of the buffers it provided.
 		 */
+#ifdef _KERNEL
+		printk(KERN_DEBUG "HERE9: %u %u %u\n",
+		    (unsigned)vec_idx,
+		    (unsigned)uiop->uio_iovcnt,
+		    (unsigned)length);
+#endif
 		return (CRYPTO_DATA_LEN_RANGE);
 	}
 
@@ -221,7 +240,12 @@ crypto_update_uio(void *ctx, crypto_data_t *input, crypto_data_t *output,
 		 * the length requested could not be processed, i.e.
 		 * The caller requested to digest more data than it provided.
 		 */
-
+#ifdef _KERNEL
+		printk(KERN_DEBUG "HERE10: %u %u %u\n",
+		    (unsigned)vec_idx,
+		    (unsigned)uiop->uio_iovcnt,
+		    (unsigned)length);
+#endif
 		return (CRYPTO_DATA_LEN_RANGE);
 	}
 
diff --git a/module/icp/io/aes.c b/module/icp/io/aes.c
index c15931c..6215eae 100644
--- a/module/icp/io/aes.c
+++ b/module/icp/io/aes.c
@@ -405,8 +405,14 @@ aes_encrypt(crypto_ctx_t *ctx, crypto_data_t *plaintext,
 	 * This test is only valid for ciphers whose blocksize is a power of 2.
 	 */
 	if (((aes_ctx->ac_flags & (CTR_MODE|CCM_MODE|GCM_MODE|GMAC_MODE))
-	    == 0) && (plaintext->cd_length & (AES_BLOCK_LEN - 1)) != 0)
+	    == 0) && (plaintext->cd_length & (AES_BLOCK_LEN - 1)) != 0) {
+#ifdef _KERNEL
+		printk(KERN_DEBUG "HERE11: %u %u\n",
+		    (unsigned)aes_ctx->ac_flags,
+		    (unsigned)plaintext->cd_length);
+#endif
 		return (CRYPTO_DATA_LEN_RANGE);
+	}
 
 	AES_ARG_INPLACE(plaintext, ciphertext);
 
@@ -816,6 +822,11 @@ aes_encrypt_final(crypto_ctx_t *ctx, crypto_data_t *data,
 		 * not a multiple of the AES block length.
 		 */
 		if (aes_ctx->ac_remainder_len > 0) {
+#ifdef _KERNEL
+			printk(KERN_DEBUG "HERE12: %u %u\n",
+			    (unsigned)aes_ctx->ac_flags,
+			    (unsigned)aes_ctx->ac_remainder_len);
+#endif
 			return (CRYPTO_DATA_LEN_RANGE);
 		}
 		data->cd_length = 0;
@@ -955,8 +966,14 @@ aes_encrypt_atomic(crypto_provider_handle_t provider,
 	case AES_GMAC_MECH_INFO_TYPE:
 		break;
 	default:
-		if ((plaintext->cd_length & (AES_BLOCK_LEN - 1)) != 0)
+		if ((plaintext->cd_length & (AES_BLOCK_LEN - 1)) != 0) {
+#ifdef _KERNEL
+			printk(KERN_DEBUG "HERE13: %u %u\n",
+			    (unsigned)plaintext->cd_length,
+			    (unsigned)mechanism->cm_type);
+#endif
 			return (CRYPTO_DATA_LEN_RANGE);
+		}
 	}
 
 	if ((ret = aes_check_mech_param(mechanism, NULL, 0)) != CRYPTO_SUCCESS)
diff --git a/module/zfs/zio_crypt.c b/module/zfs/zio_crypt.c
index 5ffa1e8..313ed63 100644
--- a/module/zfs/zio_crypt.c
+++ b/module/zfs/zio_crypt.c
@@ -442,6 +442,11 @@ zio_do_crypt_uio(boolean_t encrypt, uint64_t crypt, crypto_key_t *key,
 	cipherdata.cd_miscdata = NULL;
 	cipherdata.cd_length = datalen + maclen;
 
+#ifdef _KERNEL
+	printk(KERN_DEBUG "maclen = %u, datalen = %u, piovs = %u ciovs = %u\n",
+	    maclen, datalen, puio->uio_iovcnt, cuio->uio_iovcnt);
+#endif
+
 	/* perform the actual encryption */
 	if (encrypt) {
 		ret = crypto_encrypt(&mech, &plaindata, key, tmpl, &cipherdata,