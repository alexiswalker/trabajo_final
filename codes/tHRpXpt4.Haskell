import Data.Map as Map
import Data.Maybe
import Data.Either

type Direction = (Int, Int)

type Point = (Int, Int)

input :: Int
input = 368078

-- basic d-pad arrows
basic_dirs  = [(0,0), (0,1), (0,-1), (-1, 0), (1,0)]
[origin, north, south, west, east] = basic_dirs

-- the in-betweens
acute_dirs = [(-1,1), (1,1), (-1,-1), (1,-1) ]
[nw, ne, sw, se] = acute_dirs

all_dirs = concat [basic_dirs, acute_dirs]

-- utility adder
addPoints :: Point -> Point -> Point
addPoints (a,b) (c,d) = (a+c, b + d)

{-
    '1' is Layer 0
    '2' to '9' is Layer 1 and so on
-}

-- fn to find the layer containing the required number
getLayerOf n = length . findBase $ n   
                where findBase number = 
                        let allLastNums = [(x^2) | x <- [1,3..]]
                        in takeWhile (< number) allLastNums


-- fn to specify how to walk along a specific direction
scale direction n 
    | direction == north    =  (replicate ((getWallStride n) - 1) (north))
    | otherwise             = replicate (getWallStride n) direction
    where   getWallStride n = n*2
            getWallWhole n = n*8


-- fn to list all the points encountered during the entire walk of the layer
walkPerimeter layer = concat (Prelude.map (\d -> scale d layer) [north, west, south, east] )


-- fn to return the end-to-end values in a layer
getLayerEndNums :: Int -> (Int, Int)
getLayerEndNums 0 = (1,1) 
getLayerEndNums layer = 
    let getLayerEnd layer = (2*layer + 1)^2
        getLayerStart layer = getLayerEnd (layer - 1) + 1
    in (getLayerStart layer, getLayerEnd layer)

-- fn to return the starting and ending coordinates of a given layer
getEndpointCoords :: Int -> (Point, Point)
getEndpointCoords layer = 
    let endingPoint     = (layer, -layer)
        startingPoint   = addPoints endingPoint north
        
    in (startingPoint, endingPoint)
  
-- fn to find the actual coordinates of the number in question
locateNumber n = 
    let layer = getLayerOf n
        (firstNum, lastNum)     = getLayerEndNums layer
        (firstCoord, lastCoord) = getEndpointCoords layer
        wallSteps               = walkPerimeter layer
        relevantSteps           = zipWith (\val pts -> pts) [firstNum + 1..n] wallSteps
        totalDisplacement       = Prelude.foldr addPoints firstCoord relevantSteps
    in 
        case n of 
            1 -> origin
            true -> totalDisplacement
            
-- fn to calculate the manhattan distance
getmdistance n = 
    let (a,b)   = locateNumber n
    in abs(a) + abs(b)

part1 = getmdistance 


{---------------------------------------------------------------}
{-PART 2-}


-- a pair consisting of a lookup table and the target
type Reference = (Map Point Integer, Either Integer Integer)



-- fn to simply get the points of the surrounding cells
getAdjacentPoints :: Point -> [Point]
getAdjacentPoints point = Prelude.map (addPoints point) all_dirs

-- fn to get the total of surrounding cells
gatherAdjacentSum :: Reference -> Point -> Reference
gatherAdjacentSum (grid, biggestSum) point = 
    let adjs            = getAdjacentPoints point
        existing_keys   = Prelude.foldr 
                            (\(point) acc -> 
                                let candidate = Map.lookup point grid
                                in  if (isJust candidate ) 
                                        then ((point, fromJust candidate):acc) 
                                        else (acc)) 
                                [] adjs
        
        running_sum     = sum . Prelude.map snd $ existing_keys
        updated_grid    = Map.insert point running_sum grid
    in 
        -- never appreciated the Either datatype until this came along
        if (biggestSum < Left running_sum)
            then (updated_grid, Right running_sum)
            else (updated_grid, biggestSum)

-- fn to list the actual coordinates of the layer's wall w.r.t. the origin
getWall :: Int -> [Point]
getWall layer = 
    let (firstCoord,_)  = getEndpointCoords layer
        wall            = scanl1 addPoints (firstCoord:(walkPerimeter layer))   
    in wall

-- fn to add to the reference lookup table a new layer, complete with sums
updateLookupSum :: Reference -> Int -> Reference
updateLookupSum reference layer = 
    let 
        (grid, biggestSum) = reference
        wall            = getWall layer     
        updated_grid    = Prelude.foldl (\m pt -> gatherAdjacentSum m pt) reference wall 
    in 
         updated_grid

-- fn to solve the damn thing
compute :: Reference -> Int -> Either Integer Integer
compute reference layer =
    if (isRight . snd $ reference)
        then (snd reference)
        else (compute (updateLookupSum reference layer) (layer + 1))

-- the final answer for part 2        
--  The input, encoded as an Left Integer to indicate unsatisfaction.
--  This becomes a Right Integer when computation succeeds.

--part2 :: Integer -> Reference -> Integer
part2 input  =
    let 
        reference = (Map.fromList [(origin, 1)], ( Left . toInteger )input)
        answer =  compute reference $ 1 -- i.e., start at Layer 1
    in head . rights $ [answer]

{-
- 'part1 <input>' or part2 <input> in GHCI to see the results
-}