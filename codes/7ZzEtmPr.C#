using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Encog.Engine.Network.Activation;
using Encog.ML.Data;
using Encog.ML.Data.Basic;
using Encog.Neural.Networks;
using Encog.Neural.Networks.Layers;
using Encog.Neural.Networks.Training.Propagation.Back;

namespace Restoran
{
	class Program
	{
		static void Main(string[] args)
		{
			BasicNetwork net = new BasicNetwork();
			net.AddLayer(new BasicLayer(null, false, 2));
			net.AddLayer(new BasicLayer(new ActivationSigmoid(), true, 2));
			net.AddLayer(new BasicLayer(new ActivationSigmoid(), false, 1));
			

			net.Structure.FinalizeStructure();
			net.Reset();

			double[][] input =
			{
				new [] {0.0, 0.0},
				new [] {1.0, 0.0},
				new [] {0.0, 1.0},
				new [] {1.0, 1.0},
			};
			double[][] ideal =
			{
				new [] {0.0},
				new [] {1.0},
				new [] {1.0},
				new [] {0.0},
			};
			//double[][] input =
			//{
			//	new double[] {0.0, 0.0},
			//	new double[] {1.0, 0.0},
			//	new double[] {0.0, 1.0},
			//	new double[] {1.0, 1.0},
			//};
			//double[][] ideal =
			//{
			//	new double[] {0.0},
			//	new double[] {1.0},
			//	new double[] {1.0},
			//	new double[] {0.0},
			//};

			BasicMLDataSet trainingSet = new BasicMLDataSet(input, ideal);

			Backpropagation train = new Backpropagation(net, trainingSet, 0.7f, 0.8f);


			int i = 1;
			do
			{
				train.Iteration();
				Console.WriteLine("PogreÅ¡ka nakon " + i + ".iteracije iznosi: " + train.Error);
				i++;
			} while (train.Error > 0.01);


			Console.WriteLine("\n\nNeural Network Results:");
			foreach (IMLDataPair pair in trainingSet)
			{
				IMLData output = net.Compute(pair.Input);

				Console.WriteLine(pair.Input[0] + "," + pair.Input[1] + ", actual=" + output[0] + ",ideal=" + pair.Ideal[0]);

			}

			Console.ReadKey();
		}
	}
}