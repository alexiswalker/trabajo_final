/*
 * The usefulness of this impl is debatable - as are its semantics.
 * Perhaps a CoArbitrary-based solution is preferable.
 */
arbitrary_for!([A: 'static + Send + Arbitrary<'a>] JoinHandle<A>,
    Mapped<'a, (A, u8, bool), Self>, A::Parameters,
    args => any_with_map(args.lift_into(), |(val, sleep, panic)| // Generate a random pair of (A, u8, bool).
        thread::spawn(move || {
            thread::sleep(Duration::from_millis(sleep as u64)); // sleep a random amount.
            if panic { panic!("Arbitrary for JoinHandle randomly paniced!"); } // randomly panic.
            val // Move value into thread and then just return it.
        })
    )
);