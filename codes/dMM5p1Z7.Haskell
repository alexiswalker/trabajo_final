type Symb = String 
infixl 2 :@

data Expr = Var Symb
          | Expr :@ Expr
          | Lam Symb Expr
          deriving (Eq, Read, Show)

freeVars :: Expr -> [Symb]
freeVars (Var v) = [v]
freeVars (x :@ y) = (freeVars x) ++ (freeVars y)
freeVars (Lam x e) = 
    let 
        helper x [] = []
        helper x (y:ys) | x == y    = t
                        | otherwise = (y:t)
            where t = helper x ys
    in helper x (freeVars e)

subst :: Symb -> Expr -> Expr -> Expr 
subst v n m = 
    let 
        cnt x [] = 0
        cnt x (y:ys) | x == y    = 1 + t
                     | otherwise = t
            where t = cnt x ys

        addStrichs s 0 = s
        addStrichs s cnt = (addStrichs s (cnt - 1)) ++ "'"

        helper name s e vs | not (elem name (freeVars e)) = e
        helper name s (Lam cat e) vs | elem cat (freeVars s) = Lam (addStrichs cat (1 + (cnt cat vs))) (helper name s e (cat:vs))
                                     | otherwise             = Lam cat (helper name s e (cat:vs))
        helper name s (Var v) vs | t > 0 && (elem v (freeVars s))       = Var (addStrichs v t)
                                 | t > 0 && (not (elem v (freeVars s))) = (Var v)
                                 | v == name                            = s
                                 | otherwise                            = (Var v)
                where t = cnt v vs
        helper name s (x :@ y) vs = (helper name s x vs) :@ (helper name s y vs)

    in helper v n m []