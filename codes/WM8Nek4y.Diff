+ Code completion tests rewrite and 2 additional tests

diff -r 9eee87b498b0 -r 0fbc1b1e4e4a CodeCompletionsTests/CCTest/cctest.cpp
--- a/CodeCompletionsTests/CCTest/cctest.cpp	Sat Sep 17 16:10:13 2011 +0300
+++ b/CodeCompletionsTests/CCTest/cctest.cpp	Sat Sep 17 16:14:32 2011 +0300
@@ -56,17 +56,21 @@
 // Code Completion test cases
 /////////////////////////////////////////////////////////////////////////////
 
+#define CHECK_TRUE(value) CHECK_SIZE(value ? 1 : 0, 1)
+#define CHECK_TAGS CHECK_TRUE(tags.size() > 0);
+#define CHECK_TAGS_EMPTY CHECK_TRUE(tags.size() == 0);
+
 TEST_FUNC(testMacros)
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/simple_tests.h")), 1, wxT("wxTheClipboard->"), LoadFile(wxT("../tests/simple_tests.h")), tags);
-	CHECK_SIZE(tags.size(), 48);
+	CHECK_TAGS
 
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/simple_tests.h")), 1, wxT("wxTheApp->"), LoadFile(wxT("../tests/simple_tests.h")), tags);
-	CHECK_SIZE(tags.size(), 120);
+	CHECK_TAGS
 
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/simple_tests.h")), 1, wxT("EG(name)."), LoadFile(wxT("../tests/simple_tests.h")), tags);
-	CHECK_SIZE(tags.size(), 197);
+	CHECK_TAGS
 	return true;
 }
 
@@ -74,7 +78,7 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/using_namespace.h")), 3, wxT("v.at(0)."), LoadFile(wxT("../tests/using_namespace.h")), tags);
-	CHECK_SIZE(tags.size(), 197);
+	CHECK_TAGS
 	return true;
 }
 
@@ -82,7 +86,7 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/inner_class_inheritance.h")), 3, wxT("td->"), LoadFile(wxT("../tests/inner_class_inheritance.h")), tags);
-	CHECK_SIZE(tags.size(), 88);
+	CHECK_TAGS
 	return true;
 }
 
@@ -90,7 +94,7 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/typedef_tests.h")), 1, wxT("myStack.at(0)."), LoadFile(wxT("../tests/typedef_tests.h")), tags);
-	CHECK_SIZE(tags.size(), 5);
+	CHECK_TAGS
 	return true;
 }
 
@@ -100,13 +104,13 @@
 	// std::map<wxString, int> mm;
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/stl_map_static.h")), 2, wxT("ms_bookmarkShapes.find(0)->first."), LoadFile(wxT("../tests/stl_map_static.h")), tags);
-	CHECK_SIZE(tags.size(), 314);
+	CHECK_TAGS
 
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/stl_map_static.h")), 2, wxT("ms_bookmarkShapes.find(wxT(\"value\"))->first."), LoadFile(wxT("../tests/stl_map_static.h")), tags);
-	CHECK_SIZE(tags.size(), 314);
+	CHECK_TAGS
 
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/stl_map_static.h")), 2, wxT("ms_bookmarkShapes.find(wxT(\"value\"))->second."), LoadFile(wxT("../tests/stl_map_static.h")), tags);
-	CHECK_SIZE(tags.size(), 0);
+	CHECK_TAGS_EMPTY
 
 	return true;
 }
@@ -117,10 +121,10 @@
 	// std::map<wxString, int> mm;
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/simple_tests.h")), 2, wxT("mm.find()->first."), LoadFile(wxT("../tests/simple_tests.h")), tags);
-	CHECK_SIZE(tags.size(), 314);
+	CHECK_TAGS
 
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/simple_tests.h")), 2, wxT("mm.find()->second."), LoadFile(wxT("../tests/simple_tests.h")), tags);
-	CHECK_SIZE(tags.size(), 0);
+	CHECK_TAGS_EMPTY
 	return true;
 }
 
@@ -129,10 +133,10 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/smart_ptr_of_template.h")), 3, wxT("ttp->GetRoot()->GetData()."), LoadFile(wxT("../tests/smart_ptr_of_template.h")), tags);
-	CHECK_SIZE(tags.size(), 77);
+	CHECK_TAGS
 
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/smart_ptr_of_template.h")), 3, wxT("ttp->GetRoot()->GetKey()."), LoadFile(wxT("../tests/smart_ptr_of_template.h")), tags);
-	CHECK_SIZE(tags.size(), 314);
+	CHECK_TAGS
 	return true;
 }
 
@@ -140,7 +144,7 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/simple_tests.h")), 2, wxT("ContextManager::Get()->"), LoadFile(wxT("../tests/simple_tests.h")), tags);
-	CHECK_SIZE(tags.size(), 14);
+	CHECK_TAGS
 	return true;
 }
 
@@ -149,11 +153,7 @@
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/this_ptr.h")), 4, wxT("this->"), LoadFile(wxT("../tests/this_ptr.h")), tags);
 
-#ifdef __WXMSW__
-	CHECK_SIZE(tags.size(), 1141);
-#else
-	CHECK_SIZE(tags.size(), 952);
-#endif
+	CHECK_TAGS
 	return true;
 }
 
@@ -161,10 +161,10 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/std_vec_tag_entry_ptr.h")), 3, wxT("tags.at(0)->"), LoadFile(wxT("../tests/std_vec_tag_entry_ptr.h")), tags);
-	CHECK_SIZE(tags.size(), 77);
+	CHECK_TAGS
 
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/std_vec_tag_entry_ptr.h")), 3, wxT("tags.at(0)."), LoadFile(wxT("../tests/std_vec_tag_entry_ptr.h")), tags);
-	CHECK_SIZE(tags.size(), 14);
+	CHECK_TAGS
 	return true;
 }
 
@@ -172,11 +172,11 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/iterators.h")), 3, wxT("mapIter->first."), LoadFile(wxT("../tests/iterators.h")), tags);
-	CHECK_SIZE(tags.size(), 314);
+	CHECK_TAGS
 
 	tags.clear();
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/iterators.h")), 3, wxT("vecIter->"), LoadFile(wxT("../tests/iterators.h")), tags);
-	CHECK_SIZE(tags.size(), 314);
+	CHECK_TAGS
 	return true;
 }
 
@@ -184,15 +184,17 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/test_template_typedef.h")), 3, wxT("ManagerST::Get()->"), LoadFile(wxT("../tests/test_template_typedef.h")), tags);
-	CHECK_SIZE(tags.size(), 219);
+	CHECK_TAGS
 	return true;
 }
 
+#include <iostream>
+
 TEST_FUNC(testNamespace)
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/test_namespace.h")), 3, wxT("flex::"), LoadFile(wxT("../tests/test_namespace.h")), tags);
-	CHECK_SIZE(tags.size(), 36);
+	CHECK_TAGS
 	return true;
 }
 
@@ -200,7 +202,7 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/test_local_var.h")), 2, wxT("path."), LoadFile(wxT("../tests/test_local_var.h")), tags);
-	CHECK_SIZE(tags.size(), 314);
+	CHECK_TAGS
 	return true;
 }
 
@@ -208,7 +210,7 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/test_auto_ptr.h")), 4, wxT("p->"), LoadFile(wxT("../tests/test_auto_ptr.h")), tags);
-	CHECK_SIZE(tags.size(), 314);
+	CHECK_TAGS
 	return true;
 }
 
@@ -216,7 +218,7 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/test_vector_std_string.h")), 6, wxT("v[0]->"), LoadFile(wxT("../tests/test_vector_std_string.h")), tags);
-	CHECK_SIZE(tags.size(), 197);
+	CHECK_TAGS
 	return true;
 }
 
@@ -224,7 +226,7 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/test_wxarraystr.h")), 7, wxT("myArr[]."), LoadFile(wxT("../tests/test_wxarraystr.h")), tags);
-	CHECK_SIZE(tags.size(), 314);
+	CHECK_TAGS
 	return true;
 }
 
@@ -233,7 +235,7 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/test_shared_ptr.h")), 10, wxT("p->"), LoadFile(wxT("../tests/test_shared_ptr.h")), tags);
-	CHECK_SIZE(tags.size(), 314);
+	CHECK_TAGS
 	return true;
 }
 
@@ -241,11 +243,7 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/test_cl_frame.h")), 4, wxT("clMainFrame::Get()->"), LoadFile(wxT("../tests/test_cl_frame.h")), tags);
-#ifdef __WXMSW__
-	CHECK_SIZE(tags.size(), 1141);
-#else
-	CHECK_SIZE(tags.size(), 952);
-#endif
+	CHECK_TAGS
 
 	return true;
 }
@@ -255,7 +253,7 @@
 {
 	std::vector<TagEntryPtr> tags;
 	TagsManagerST::Get()->AutoCompleteCandidates(wxFileName(wxT("../tests/test_vector_std_string.h")), 6, wxT("v.at(0)->"), LoadFile(wxT("../tests/test_vector_std_string.h")), tags);
-	CHECK_SIZE(tags.size(), 197);
+	CHECK_TAGS
 	return true;
 }
 
@@ -269,7 +267,7 @@
 									   LoadFile(wxT("../tests/test_goto_decl_inside_ns.h")), 
 									   tags);
 	
-	CHECK_SIZE(tags.size(), 1);
+	CHECK_TAGS
 	CHECK_STRING(tags.at(0)->GetName().mb_str(wxConvUTF8).data(), "Tada");
 	return true;
 }
@@ -284,11 +282,37 @@
 									   LoadFile(wxT("../tests/test_goto_decl_of_func_arg.h")), 
 									   tags);
 	
-	CHECK_SIZE(tags.size(), 1);
+	CHECK_TAGS
 	CHECK_STRING(tags.at(0)->GetName().mb_str(wxConvUTF8).data(), "Tada");
 	return true;
 }
 
+TEST_FUNC(testProtectedMemberWxWidgets)
+{
+	std::vector<TagEntryPtr> tags;
+	TagsManagerST::Get()->AutoCompleteCandidates(
+		wxFileName(wxT("../tests/test_member_wxwidgets.h")), 
+		7, wxT("m_tooltip->"), 
+		LoadFile(wxT("../tests/test_member_wxwidgets.h")), 
+		tags
+	);	
+	CHECK_TAGS
+	return true;
+}
+
+TEST_FUNC(testDoubleClass)
+{
+	std::vector<TagEntryPtr> tags;
+	TagsManagerST::Get()->AutoCompleteCandidates(
+		wxFileName(wxT("../tests/test_double_class.h")), 
+		4, wxT("z."), 
+		LoadFile(wxT("../tests/test_double_class.h")), 
+		tags
+	);	
+	CHECK_TAGS
+	return true;
+}
+
 ///////////////////////////////////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////
@@ -368,7 +392,7 @@
 	ParseThreadST::Get()->Start();
 
 	// Perform a full retagging
-	TagsManagerST::Get()->SetCodeLiteIndexerPath(wxT("/usr/bin"));
+	TagsManagerST::Get()->SetCodeLiteIndexerPath(wxT("/home/esminis/Desktop/codelite/Runtime/codelite_indexer"));
 	TagsManagerST::Get()->StartCodeLiteIndexer();
 	TagsManagerST::Get()->OpenDatabase(wxFileName(wxT("test.tags")));
 	TagsManagerST::Get()->RetagFiles(files, false);
diff -r 9eee87b498b0 -r 0fbc1b1e4e4a CodeCompletionsTests/CCTest/tests/test_double_class.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/CodeCompletionsTests/CCTest/tests/test_double_class.h	Sat Sep 17 16:14:32 2011 +0300
@@ -0,0 +1,4 @@
+using namespace Baz;
+
+Foo z;
+z.
\ No newline at end of file
diff -r 9eee87b498b0 -r 0fbc1b1e4e4a CodeCompletionsTests/CCTest/tests/test_goto_decl_of_func_arg.h
--- a/CodeCompletionsTests/CCTest/tests/test_goto_decl_of_func_arg.h	Sat Sep 17 16:10:13 2011 +0300
+++ b/CodeCompletionsTests/CCTest/tests/test_goto_decl_of_func_arg.h	Sat Sep 17 16:14:32 2011 +0300
@@ -1,5 +1,7 @@
 #include <stdio.h>
 
+using namespace Baz;
+
 struct Foo
 {
     struct Tada
diff -r 9eee87b498b0 -r 0fbc1b1e4e4a CodeCompletionsTests/CCTest/tests/test_member_wxwidgets.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/CodeCompletionsTests/CCTest/tests/test_member_wxwidgets.h	Sat Sep 17 16:14:32 2011 +0300
@@ -0,0 +1,5 @@
+#include <wx/wx.h>
+
+void wxDialog::Testing() {
+	
+		
\ No newline at end of file
diff -r 9eee87b498b0 -r 0fbc1b1e4e4a CodeCompletionsTests/SampleWorkspace/SampleWorksapce.project
--- a/CodeCompletionsTests/SampleWorkspace/SampleWorksapce.project	Sat Sep 17 16:10:13 2011 +0300
+++ b/CodeCompletionsTests/SampleWorkspace/SampleWorksapce.project	Sat Sep 17 16:14:32 2011 +0300
@@ -71,5 +71,6 @@
   </Settings>
   <VirtualDirectory Name="src">
     <File Name="header.h"/>
+    <File Name="header2.h"/>
   </VirtualDirectory>
 </CodeLite_Project>
diff -r 9eee87b498b0 -r 0fbc1b1e4e4a CodeCompletionsTests/SampleWorkspace/header.h
--- a/CodeCompletionsTests/SampleWorkspace/header.h	Sat Sep 17 16:10:13 2011 +0300
+++ b/CodeCompletionsTests/SampleWorkspace/header.h	Sat Sep 17 16:14:32 2011 +0300
@@ -24,6 +24,8 @@
 #include <SymbolView/symbolview.h>
 #include <wx/clipbrd.h>
 #include <wx/app.h>
+#include <wx/wx.h>
+#include <wx/tooltip.h>
 
 struct ST {
 	std::string name;
diff -r 9eee87b498b0 -r 0fbc1b1e4e4a CodeCompletionsTests/SampleWorkspace/header2.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/CodeCompletionsTests/SampleWorkspace/header2.h	Sat Sep 17 16:14:32 2011 +0300
@@ -0,0 +1,21 @@
+struct ST {
+	std::string name;
+};
+
+ST theStruct;
+
+#define EG(x) theStruct.x
+
+// Needed for the test of the 'goto decl inside namespace'
+namespace Baz
+{
+struct Tada
+{
+    int bar;  
+};
+
+class Foo
+{
+public:
+    Tada sad; // Tada cannot be located via Goto Declaration/Implementation
+};