Index: db/patch/0.2.3/2011_09_27.sql
===================================================================
--- db/patch/0.2.3/2011_09_27.sql	(revision 0)
+++ db/patch/0.2.3/2011_09_27.sql	(revision 0)
@@ -0,0 +1 @@
+ALTER TABLE  `parts` ADD  `binaryhash` VARCHAR( 255 ) NOT NULL;
Index: db/schema.sql
===================================================================
--- db/schema.sql	(revision 1915)
+++ db/schema.sql	(working copy)
@@ -593,6 +593,7 @@
   `number` BIGINT UNSIGNED NOT NULL DEFAULT '0',
   `partnumber` INT UNSIGNED NOT NULL DEFAULT '0',
   `size` BIGINT UNSIGNED NOT NULL DEFAULT '0',
+  `binaryhash` VARCHAR(255) NOT NULL,
   `dateadded` DATETIME DEFAULT NULL,
   PRIMARY KEY  (`ID`),
   KEY `binaryID` (`binaryID`)
Index: www/lib/nzb.php
===================================================================
--- www/lib/nzb.php	(revision 1915)
+++ www/lib/nzb.php	(working copy)
@@ -50,7 +50,7 @@
 				gzwrite($fp, " </groups>\n"); 
 				gzwrite($fp, " <segments>\n"); 
 
-				$resparts = $db->queryDirect(sprintf("SELECT DISTINCT(messageID), size, partnumber FROM parts WHERE binaryID = %d ORDER BY partnumber", $binrow["ID"]));
+				$resparts = $db->queryDirect(sprintf("SELECT DISTINCT(messageID), size, partnumber FROM parts WHERE binaryhash = %s ORDER BY partnumber", $db->escapeString($binrow["binaryhash"])));
 				while ($partsrow = mysql_fetch_assoc($resparts)) 
 				{				
 					gzwrite($fp, "  <segment bytes=\"".$partsrow["size"]."\" number=\"".$partsrow["partnumber"]."\">".htmlspecialchars($partsrow["messageID"], ENT_QUOTES, 'utf-8')."</segment>\n"); 
Index: www/lib/releases.php
===================================================================
--- www/lib/releases.php	(revision 1915)
+++ www/lib/releases.php	(working copy)
@@ -1394,12 +1394,12 @@
 			{
 				
 				// Check that the binary is complete
-				$binlist = $db->query(sprintf("SELECT ID, totalParts, date from binaries where relname = %s and procstat = %d and groupID = %d and fromname = %s", $db->escapeString($row["relname"]), Releases::PROCSTAT_TITLEMATCHED, $row["groupID"], $db->escapeString($row["fromname"]) ));
+				$binlist = $db->query(sprintf("SELECT ID, binaryhash, totalParts, date from binaries where relname = %s and procstat = %d and groupID = %d and fromname = %s", $db->escapeString($row["relname"]), Releases::PROCSTAT_TITLEMATCHED, $row["groupID"], $db->escapeString($row["fromname"]) ));
 
 				$incomplete = false;
 				foreach ($binlist as $rowbin) 
 				{
-					$binParts = $db->queryOneRow(sprintf("SELECT COUNT(ID) AS num FROM parts WHERE binaryID = %d", $rowbin['ID']));
+					$binParts = $db->queryOneRow(sprintf("SELECT COUNT(ID) AS num FROM parts WHERE binaryhash = %s", $db->escapeString($rowbin['binaryhash'])));
 					if ($binParts['num'] < $rowbin['totalParts']) 
 					{
 						echo "binary ".$rowbin['ID']." from ".$row['relname']." has missing parts - ".$binParts['num']."/".$rowbin['totalParts']." (".number_format(($binParts['num']/$rowbin['totalParts'])*100, 1)."% complete)\n";
@@ -1501,7 +1501,7 @@
 		// Prep the memory LUT in mysql
 		echo "Stage 3: LUT: Building...";
 		$start = microtime(true);
-		$db->query('CREATE TEMPORARY TABLE parts_lut (binaryID INT, totalSize BIGINT, relParts SMALLINT, PRIMARY KEY (binaryID)) ENGINE=HEAP SELECT binaryID, SUM(size) AS totalSize, COUNT(p.ID) AS relParts FROM parts p INNER JOIN binaries b ON b.ID = p.binaryID WHERE b.procstat='.Releases::PROCSTAT_READYTORELEASE.' GROUP BY binaryID');
+		$db->query('CREATE TEMPORARY TABLE parts_lut (binaryID INT, totalSize BIGINT, relParts SMALLINT, PRIMARY KEY (binaryID)) ENGINE=HEAP SELECT binaryID, SUM(size) AS totalSize, COUNT(p.ID) AS relParts FROM parts p INNER JOIN binaries b ON b.binaryhash = p.binaryhash WHERE b.procstat='.Releases::PROCSTAT_READYTORELEASE.' GROUP BY binaryID');
 		$time = microtime(true) - $start;
 		echo "built in ".$time." secs, ".mysql_affected_rows()." records now in LUT\n";
 
Index: www/lib/groups.php
===================================================================
--- www/lib/groups.php	(revision 1915)
+++ www/lib/groups.php	(working copy)
@@ -131,9 +131,9 @@
 		foreach ($rels as $rel)
 			$releases->delete($rel["ID"]);
 
-		$bins = $db->query(sprintf("select ID from binaries where groupID = %d", $id));
+		$bins = $db->query(sprintf("select ID, binaryhash from binaries where groupID = %d", $id));
 		foreach ($bins as $bin)
-			$binaries->delete($bin["ID"]);
+			$binaries->delete($bin["binaryhash"]);
 	}		
 	
 	public function update($group)
Index: www/lib/postprocess.php
===================================================================
--- www/lib/postprocess.php	(revision 1915)
+++ www/lib/postprocess.php	(working copy)
@@ -254,7 +254,7 @@
 				//
 				// Go through the binaries for this release looking for a rar, a sample, and a mediafile
 				//
-				$sql = sprintf("select binaries.ID, binaries.name, groups.name as groupname from binaries inner join groups on groups.ID = binaries.groupID where releaseID = %d order by relpart", $rel["ID"]);
+				$sql = sprintf("select binaries.ID, binaries.name, binaries.binaryhash, groups.name as groupname from binaries inner join groups on groups.ID = binaries.groupID where releaseID = %d order by relpart", $rel["ID"]);
 				$binresult = $db->query($sql);
 				$msgid = array();
 				$samplemsgid = $mediamsgid = $audiomsgid = -1;
@@ -269,7 +269,7 @@
 					if (preg_match("/sample/i",$binrow["name"]) && !preg_match("/\.par2|\.srs/i",$binrow["name"]))
 					{
 						echo "Detected sample file ".$binrow["name"]."\n";
-						$samplepart = $db->queryOneRow(sprintf("select messageID from parts where binaryID = %d order by partnumber limit 1", $binrow["ID"]));
+						$samplepart = $db->queryOneRow(sprintf("select messageID from parts where binaryhash = %s order by partnumber limit 1", $db->escapeString($binrow["binaryhash"])));
 						if (isset($samplepart["messageID"]))
 						{
 							$samplegroup = $binrow["groupname"];
@@ -278,7 +278,7 @@
 					}
 					if (preg_match('/\.('.$this->mediafileregex.')[\. "\)\]]/i',$binrow["name"]) && !preg_match("/\.par2|\.srs/i",$binrow["name"]))
 					{
-						$mediapart = $db->queryOneRow(sprintf("select messageID from parts where binaryID = %d order by partnumber limit 1", $binrow["ID"]));
+						$mediapart = $db->queryOneRow(sprintf("select messageID from parts where binaryhash = %s order by partnumber limit 1", $db->escapeString($binrow["binaryhash"])));
 						if (isset($mediapart["messageID"]) && $mediapart['messageID'] != $samplemsgid)
 						{
 							echo "Detected media file ".$binrow["name"]."\n";
@@ -289,7 +289,7 @@
 					if (preg_match("/\W(?:part0*1|(?!part\d+)[^.]+)\.rar(?!\.)/i", $binrow["name"]) && !preg_match("/[-_\.]sub/i", $binrow["name"]))
 					{
 						echo "Detected RAR ".$binrow["name"]."\n";
-						$part = $db->queryOneRow(sprintf("select messageID from parts where binaryID = %d order by partnumber limit 1", $binrow["ID"]));
+						$part = $db->queryOneRow(sprintf("select messageID from parts where binaryhash = %s order by partnumber limit 1", $db->escapeString($binrow["binaryhash"])));
 						if (isset($part["messageID"]))
 						{
 							$bingroup = $binrow["groupname"];
@@ -298,7 +298,7 @@
 					}
 					if (preg_match('/\.('.$this->audiofileregex.')[\. "\)\]]/i',$binrow["name"]) && !preg_match("/\.par2|\.srs|\.m3u|\.nzb/i",$binrow["name"]))
 					{
-						$audiopart = $db->queryOneRow(sprintf("select messageID from parts where binaryID = %d order by partnumber limit 1", $binrow["ID"]));
+						$audiopart = $db->queryOneRow(sprintf("select messageID from parts where binaryhash = %s order by partnumber limit 1", $db->escapeString($binrow["binaryhash"])));
 						if (isset($audiopart["messageID"]) && $audiopart['messageID'] != $audiomsgid)
 						{
 							echo "Detected mp3 file ".$binrow["name"]."\n";
Index: www/lib/binaries.php
===================================================================
--- www/lib/binaries.php	(revision 1915)
+++ www/lib/binaries.php	(working copy)
@@ -331,7 +331,8 @@
 						{
 							$maxnum = ($partdata['number'] > $maxnum) ? $partdata['number'] : $maxnum;
 							$partcount++;
-							$pidata = $db->queryInsert(sprintf("INSERT INTO parts (binaryID, messageID, number, partnumber, size, dateadded) VALUES (%d, %s, %s, %s, %s, now())", $binaryID, $db->escapeString($partdata['Message-ID']), $db->escapeString($partdata['number']), $db->escapeString(round($partdata['part'])), $db->escapeString($partdata['size'])), false);
+							$query = sprintf("INSERT INTO parts (binaryID, messageID, number, partnumber, size, dateadded, binaryhash) VALUES (%d, %s, %s, %s, %s, now(), %s)", $binaryID, $db->escapeString($partdata['Message-ID']), $db->escapeString($partdata['number']), $db->escapeString(round($partdata['part'])), $db->escapeString($partdata['size']), $db->escapeString($binaryHash));
+							$pidata = $db->queryInsert($query, false);
 							if (!$pidata) {
 								$msgsnotinserted[] = $partdata['number'];
 							} else {
@@ -530,7 +531,7 @@
 					SELECT b.*, 
 					g.name AS group_name,
 					r.guid,
-					(SELECT COUNT(ID) FROM parts p where p.binaryID = b.ID) as 'binnum'
+					(SELECT COUNT(ID) FROM parts p where p.binaryhash = b.binaryhash) as 'binnum'
 					FROM binaries b
 					INNER JOIN groups g ON g.ID = b.groupID
 					LEFT OUTER JOIN releases r ON r.ID = b.releaseID
@@ -612,10 +613,10 @@
 			$groupname, $db->escapeString($regex["regex"]), $regex["status"], $db->escapeString($regex["description"]), $regex["optype"], $regex["msgcol"]));	
 	}	
 	
-	public function delete($id)
+	public function delete($binaryHash)
 	{			
 		$db = new DB();
-		$db->query(sprintf("delete from parts where binaryID = %d", $id));
+		$db->query(sprintf("delete from parts where binaryhash = %s", $db->escapeString($binaryHash)));
 		$db->query(sprintf("delete from binaries where ID = %d", $id));
 	}	
 }
Index: www/lib/nntp.php
===================================================================
--- www/lib/nntp.php	(revision 1915)
+++ www/lib/nntp.php	(working copy)
@@ -79,7 +79,7 @@
 			return false;
 		}
 
-		$resparts = $db->query(sprintf("SELECT size, partnumber, messageID FROM parts WHERE binaryID = %d ORDER BY partnumber", $binaryId));
+		$resparts = $db->query(sprintf("SELECT size, partnumber, messageID FROM parts WHERE binaryhash = %s ORDER BY partnumber", $db->escapeString($binary['binaryhash'])));
 		
 		if (sizeof($resparts) > 1 && $isNfo === true)
 		{
Index: www/admin/nzb-import.php
===================================================================
--- www/admin/nzb-import.php	(revision 1915)
+++ www/admin/nzb-import.php	(working copy)
@@ -135,16 +135,16 @@
 					//segments (i.e. parts)
 					if (count($file->segments->segment) > 0)
 					{
-						$partsSql = "INSERT INTO parts (binaryID, messageID, number, partnumber, size, dateadded) values ";
+						$partsSql = "INSERT INTO parts (binaryID, messageID, number, partnumber, size, dateadded, binaryhash) values ";
 						foreach($file->segments->segment as $segment) 
 						{
 							$messageId = (string)$segment;
 							$partnumber = $segment->attributes()->number;
 							$size = $segment->attributes()->bytes;
 							
-							$partsSql .= sprintf("(%s, %s, 0, %s, %s, NOW()),", 
+							$partsSql .= sprintf("(%s, %s, 0, %s, %s, NOW(), %s),", 
 									$db->escapeString($binaryId), $db->escapeString($messageId), $db->escapeString($partnumber), 
-									$db->escapeString($size));
+									$db->escapeString($size), $db->escapeString($binaryHash));
 						}
 						$partsSql = substr($partsSql, 0, -1);
 						$partsQuery = $db->queryInsert($partsSql);